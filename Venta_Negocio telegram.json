{
  "name": "Venta_Negocio telegram",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1712,
        368
      ],
      "id": "91066393-939e-4a58-a488-e028bc61b6a0",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1816b788-3db9-4d49-bee1-d0ce22bbb3e3",
                    "leftValue": "={{ $json.message.voice }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "422d9d78-f06f-4b39-856e-1dc2995dd539"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "274fb551-9220-4973-9a59-db0e80151f75",
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Imagen"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0e50ec0e-9edb-4310-b491-81535dddb451",
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "sticker",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Sticker"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        224,
        320
      ],
      "id": "5ef3fc85-99fb-48c5-bbb2-f096ac51ab25",
      "name": "Switch1"
    },
    {
      "parameters": {
        "resource": "audio",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-flash"
        },
        "inputType": "binary",
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        672,
        -32
      ],
      "id": "6d357acd-dd1a-40fe-8b0a-c7a4981e6475",
      "name": "Transcribe a recording1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b355a1d1-f888-4ce4-b12b-03a9644fb07e",
              "name": "final_message",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            },
            {
              "id": "aa4f659e-93fd-458f-8cb0-d6b2bd655160",
              "name": "sessionid",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
              "type": "string"
            },
            {
              "id": "0f0f416c-ed04-4b77-bb03-23a469d40113",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1120,
        160
      ],
      "id": "0950f530-f45d-4adc-a356-f84a7f6e10f4",
      "name": "FInals_message_text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b65575a3-b476-4c0f-8ce4-a7f93531b7f0",
              "name": "final_message",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            },
            {
              "id": "bf8845d4-5e4e-4596-b9d9-ec7940739e0c",
              "name": "sessionid",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
              "type": "string"
            },
            {
              "id": "d1aea00f-74e0-4acd-bf3d-5984b8eade6c",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1120,
        -32
      ],
      "id": "ccc183c9-6cbc-4c90-a08b-bba3ceae1d51",
      "name": "Final_message_audio"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1344,
        160
      ],
      "id": "eb7b39e6-e423-4526-b4cf-678fc2e0c477",
      "name": "Merge"
    },
    {
      "parameters": {
        "content": "# Transcripcion de archivos\n## imagenes, texto. audio",
        "height": 960,
        "width": 1376,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -80,
        -96
      ],
      "id": "1bdc37bd-b541-472c-a58b-eb941c3b7bc0",
      "name": "Sticky Note1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        448,
        464
      ],
      "id": "23871773-541f-4538-b280-a42ed236b3d9",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        400,
        640
      ],
      "id": "5f37f540-d030-4ac9-b814-96d1ffadcb04",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "`venta`",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "f3933b07-b993-49b3-9bcf-a89073e90911"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "registro_venta"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "317d967e-167d-49a6-84c1-dc3d6c10af08",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "precios_mod",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "precios_mod"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "60c4819e-7de8-4057-9114-d079bd314c62",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "info_venta",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "informacion de ventas"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a7ae45e-e2dd-4429-aa61-1d60f2f128c4",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "consulta",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "consulta"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2112,
        128
      ],
      "id": "45956675-e82c-4e06-8ab2-8673979f01dc",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $json.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n// Diccionario básico de números en palabras a números\nconst numeros = {\n  \"cero\": 0,\n  \"uno\": 1, \"una\": 1,\n  \"dos\": 2,\n  \"tres\": 3,\n  \"cuatro\": 4,\n  \"cinco\": 5,\n  \"seis\": 6,\n  \"siete\": 7,\n  \"ocho\": 8,\n  \"nueve\": 9,\n  \"diez\": 10,\n  \"once\": 11,\n  \"doce\": 12,\n  \"trece\": 13,\n  \"catorce\": 14,\n  \"quince\": 15,\n  \"dieciséis\": 16, \"dieciseis\": 16,\n  \"diecisiete\": 17,\n  \"dieciocho\": 18,\n  \"diecinueve\": 19,\n  \"veinte\": 20,\n  \"veintiuno\": 21, \"veintiuna\": 21,\n  \"veintidós\": 22, \"veintidos\": 22,\n  \"veintitrés\": 23, \"veintitres\": 23,\n  \"veinticuatro\": 24,\n  \"veinticinco\": 25,\n  \"veintiséis\": 26, \"veintiseis\": 26,\n  \"veintisiete\": 27,\n  \"veintiocho\": 28,\n  \"veintinueve\": 29,\n  \"treinta\": 30,\n  \"cuarenta\": 40,\n  \"cincuenta\": 50,\n  \"sesenta\": 60,\n  \"setenta\": 70,\n  \"ochenta\": 80,\n  \"noventa\": 90\n};\n\n// Función para convertir palabras a números o símbolos\nfunction palabraANumero(palabra) {\n  palabra = palabra.toLowerCase();\n\n  // Conversión de \"punto\" a \".\"\n  if (palabra === \"punto\") {\n    return \".\";\n  }\n\n  if (numeros.hasOwnProperty(palabra)) {\n    return numeros[palabra];\n  }\n\n  // Manejo de combinaciones como \"treinta y cinco\"\n  if (palabra.includes(\" y \")) {\n    let partes = palabra.split(\" y \").map(p => p.trim());\n    if (numeros[partes[0]] && numeros[partes[1]]) {\n      return numeros[partes[0]] + numeros[partes[1]];\n    }\n  }\n\n  return palabra; // si no se reconoce, se deja igual\n}\n\n// Reemplazar en el texto\ntexto = texto.replace(/\\b([a-záéíóúñ]+(?:\\s+y\\s+[a-záéíóúñ]+)?)\\b/gi, (match) => {\n  const convertido = palabraANumero(match);\n  return convertido !== match ? convertido : match;\n});\n\nreturn { texto_convertido: texto };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        -32
      ],
      "id": "b2f7e229-9a84-4f23-a6ff-a37303af3b42",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $input.first().json.message.text || \"\";\n\n// Diccionario básico de números en palabras a números\nconst numeros = {\n  \"cero\": 0,\n  \"uno\": 1, \"una\": 1,\n  \"dos\": 2,\n  \"tres\": 3,\n  \"cuatro\": 4,\n  \"cinco\": 5,\n  \"seis\": 6,\n  \"siete\": 7,\n  \"ocho\": 8,\n  \"nueve\": 9,\n  \"diez\": 10,\n  \"once\": 11,\n  \"doce\": 12,\n  \"trece\": 13,\n  \"catorce\": 14,\n  \"quince\": 15,\n  \"dieciséis\": 16, \"dieciseis\": 16,\n  \"diecisiete\": 17,\n  \"dieciocho\": 18,\n  \"diecinueve\": 19,\n  \"veinte\": 20,\n  \"veintiuno\": 21, \"veintiuna\": 21,\n  \"veintidós\": 22, \"veintidos\": 22,\n  \"veintitrés\": 23, \"veintitres\": 23,\n  \"veinticuatro\": 24,\n  \"veinticinco\": 25,\n  \"veintiséis\": 26, \"veintiseis\": 26,\n  \"veintisiete\": 27,\n  \"veintiocho\": 28,\n  \"veintinueve\": 29,\n  \"treinta\": 30,\n  \"cuarenta\": 40,\n  \"cincuenta\": 50,\n  \"sesenta\": 60,\n  \"setenta\": 70,\n  \"ochenta\": 80,\n  \"noventa\": 90\n};\n\n// Función para convertir palabras a números o símbolos\nfunction palabraANumero(palabra) {\n  palabra = palabra.toLowerCase();\n\n  // Conversión de \"punto\" a \".\"\n  if (palabra === \"punto\") {\n    return \".\";\n  }\n\n  if (numeros.hasOwnProperty(palabra)) {\n    return numeros[palabra];\n  }\n\n  // Manejo de combinaciones como \"treinta y cinco\"\n  if (palabra.includes(\" y \")) {\n    let partes = palabra.split(\" y \").map(p => p.trim());\n    if (numeros[partes[0]] && numeros[partes[1]]) {\n      return numeros[partes[0]] + numeros[partes[1]];\n    }\n  }\n\n  return palabra; // si no se reconoce, se deja igual\n}\n\n// Reemplazar en el texto\ntexto = texto.replace(/\\b([a-záéíóúñ]+(?:\\s+y\\s+[a-záéíóúñ]+)?)\\b/gi, (match) => {\n  const convertido = palabraANumero(match);\n  return convertido !== match ? convertido : match;\n});\n\nreturn { texto_convertido: texto };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        160
      ],
      "id": "95cdf6e0-782b-470d-ae77-c1f8be61af4a",
      "name": "Code1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 368924617,
          "mode": "list",
          "cachedResultName": "LISTA_PRECIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=368924617"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3168,
        -96
      ],
      "id": "8cdc9ee0-5d31-46c7-8b30-2f84b42173af",
      "name": "Obtener_lista_precios",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos todas las ventas desde Code_ventas\nconst ventas = $('Code_ventas').all().map(item => item.json);\n\n// Obtenemos la lista de precios desde Obtener_lista_precios\nconst precios = $('Obtener_lista_precios').all().map(item => item.json);\n\n// Función para buscar el precio de un producto\nfunction buscarPrecio(nombreProducto) {\n  const nombreVenta = nombreProducto.toLowerCase().replace(/_/g, ' ').trim();\n  for (const p of precios) {\n    const nombrePrecio = p.PRODUCTO.toLowerCase().replace(/_/g, ' ').trim();\n    if (nombrePrecio === nombreVenta) {\n      return parseFloat(p.PRECIO_UNITARIO);\n    }\n  }\n  return 0; // Si no se encuentra, devuelve 0\n}\n\n// Procesamos todas las ventas\nreturn ventas.map(v => {\n  const precioUnitario = buscarPrecio(v.PRODUCTO);\n  const valorTotal = Number(v.CANTIDAD) * precioUnitario;\n  return {\n    json: {\n      PRODUCTO: v.PRODUCTO,\n      CANTIDAD: Number(v.CANTIDAD),\n      VALOR_UNITARIO: precioUnitario,\n      VALOR_TOTAL: valorTotal,\n      FECHA: v.FECHA\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3392,
        -96
      ],
      "id": "2674970e-211c-48a6-83bb-543607c04964",
      "name": "Cruce_precio_venta"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Ingreso_ventas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "CANTIDAD": "={{ $json.CANTIDAD }}",
            "FECHA": "={{ $json.FECHA }}",
            "VALOR_UNITARIO": "={{ $json.VALOR_UNITARIO }}",
            "VALOR_TOTAL": "={{ $json.VALOR_TOTAL }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CANTIDAD",
              "displayName": "CANTIDAD",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "VALOR_UNITARIO",
              "displayName": "VALOR_UNITARIO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "VALOR_TOTAL",
              "displayName": "VALOR_TOTAL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "FECHA",
              "displayName": "FECHA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3616,
        -96
      ],
      "id": "d2b0dee1-47f0-4e6f-bb5d-0870bab01000",
      "name": "Guardar_venta_en_hoja",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Clasificacion del mensaje\n",
        "height": 720,
        "width": 944,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1344,
        48
      ],
      "id": "c3fad97d-efc7-4b2b-972e-26cf2d314969",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.final_message }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# CLASIFICADOR DE MENSAJES PARA NEGOCIO DE AREPAS\n\n## ROL\nEres un clasificador que analiza mensajes de un negocio de venta de arepas, chorizos, gaseosas, tinto y cigarrillos.\n\n## OBJETIVO\nClasificar cada mensaje en UNA de estas categorías y responder según el formato especificado.\n\n---\n\n## CATEGORÍAS PRINCIPALES\n\n### 1. VENTA\n**Cuándo usar:** Registrar productos vendidos\n**Ejemplos:**\n- \"3 arepas y 2 chorizos\"\n- \"1 combo y una 350\"\n- \"5 tintos\"\n\n### 2. INFO_VENTA  \n**Cuándo usar:** Consultar totales/reportes de ventas\n**SOLO estas consultas son válidas:**\n- Ventas de HOY y variantes (\"cuánto se vendió hoy\", \"total de hoy\")\n- Ventas de AYER y variantes (\"cuánto vendimos ayer\", \"total de ayer\")\n- Ventas de LA SEMANA y variantes (\"esta semana\", \"cuánto se vendió esta semana\")\n- Ventas del MES y variantes (\"este mes\", \"total del mes\", \"cuánto se vendió este mes\")\n\n### 3. PRECIOS_MOD\n**Cuándo usar:** Crear o modificar precios de productos\n**Ejemplos:**\n- \"el chorizo a 7000\"\n- \"la arepa quedó a 5000\"\n- \"crea producto X con precio Y\"\n\n---\n\n## DICCIONARIO DE TÉRMINOS\n\n| Término Usuario | Producto Real |\n|----------------|---------------|\n| combo | 1 chorizo + 1 arepa de queso |\n| 2.5 | gaseosa MEGA 2.5 |\n| 350 | coca cola 350ml |\n| 250 | coca cola 250ml |\n| arepa/arepas | arepas de queso |\n| mustang | cigarrillo Mustang |\n\n**Casos especiales:**\n- \"3250\" o \"3 250\" = 3 gaseosas 250ml\n- \"32.5\" o \"3 2.5\" = 3 gaseosas 2.5ml\n- \"cuatro, uno punto cinco\" = 4 x 1.5\n\n---\n\n## FORMATOS DE RESPUESTA\n\n### ✅ CATEGORIZACIÓN EXITOSA\n**Solo devolver:** `nombre_categoria`\n\nEjemplos:\n- Input: \"2 arepas\" → Output: `venta`\n- Input: \"ventas de hoy\" → Output: `info_venta`\n- Input: \"chorizo a 6000\" → Output: `precios_mod`\n\n### ❌ CASOS ESPECIALES (Formato JSON)\n\n#### 1. Múltiples categorías en un mensaje\n```json\n{\n  \"respuesta\": \"No puedo procesar varias categorías simultáneamente. Envía cada solicitud por separado.\",\n  \"output\": \"consulta\"\n}\n```\n\n#### 2. Consultas de ayuda\nFrases: \"¿cómo hago?\", \"¿cómo registro?\", \"¿qué debo decir?\"\n```json\n{\n  \"respuesta\": \"[Explicación clara con ejemplos]\",\n  \"output\": \"consulta\"\n}\n```\n\n#### 3. Mensaje no entendido\n```json\n{\n  \"respuesta\": \"No entendí tu mensaje. ¿Podrías ser más específico?\",\n  \"output\": \"consulta\"\n}\n```\n\n#### 4. Funcionalidad no soportada\n**Para INFO_VENTA:** Solo se permiten consultas de HOY, AYER, LA SEMANA o EL MES\n```json\n{\n  \"respuesta\": \"Para consultar ventas, solo puedo procesar: 'hoy', 'ayer', 'esta semana' o 'este mes'. No puedo procesar otros períodos como 'antier', 'últimos X días' o fechas específicas.\",\n  \"output\": \"consulta\"\n}\n```\n\n**Para otras limitaciones:**\n```json\n{\n  \"respuesta\": \"[Explicación de limitación + sugerencia alternativa]\",\n  \"output\": \"consulta\"\n}\n```\n\n---\n\n## LIMITACIONES DEL SISTEMA\n\n### INFO_VENTA - Solo se permiten estas consultas:\n- ✅ \"hoy\", \"ayer\", \"esta semana\", \"este mes\" y sus variantes\n- ❌ \"antier\", \"últimos X días\", \"fechas específicas\", \"semana completa\", otros períodos\n\n### Otras limitaciones:\n- ❌ Días específicos: \"lunes pasado\", \"miércoles\"\n- ❌ Rangos complejos: \"últimos 3 días del mes pasado\"\n- ❌ Expresiones vagas: \"cuando hubo más ventas\"\n\n### Sugerencias para el usuario:\n- Para consultas de ventas: usar solo \"hoy\", \"ayer\", \"esta semana\" o \"este mes\"\n- Para otros casos: reformular según limitaciones específicas\n\n---\n\n## EJEMPLOS DE USO\n\n### VENTAS\n| Input | Clasificación |\n|-------|--------------|\n| \"3 arepas, 2 combos y una 350\" | `venta` |\n| \"5 tintos y 4 chorizos\" | `venta` |\n| \"1 combo\" | `venta` |\n\n### INFO_VENTA\n| Input | Clasificación |\n|-------|--------------|\n| \"ventas de hoy\" | `info_venta` |\n| \"cuánto se vendió ayer\" | `info_venta` |\n| \"total de esta semana\" | `info_venta` |\n| \"ventas del mes\" | `info_venta` |\n\n### PRECIOS_MOD\n| Input | Clasificación |\n|-------|--------------|\n| \"la arepa a 5000 y el chorizo a 7000\" | `precios_mod` |\n| \"la 350 a 3000, la 2.5 a 5000\" | `precios_mod` |\n| \"crea producto tinto con precio 2000\" | `precios_mod` |\n\n### CONSULTAS (JSON Response)\n| Input | Respuesta |\n|-------|-----------|\n| \"¿Cómo registro ventas?\" | JSON con explicación y ejemplos |\n| \"3 arepas y cambia precio chorizo\" | JSON indicando mezcla no permitida |\n| \"ventas de antier\" | JSON - solo se permiten: hoy, ayer, semana, mes |\n| \"últimos 15 días\" | JSON - solo se permiten: hoy, ayer, semana, mes |\n\n---\n\n## INSTRUCCIONES FINALES\n\n1. **Una sola tarea por mensaje**\n2. **Respuesta simple** para categorización exitosa\n3. **JSON estructurado** para casos especiales\n4. **Siempre orientar al usuario** cuando hay limitaciones\n5. **No inventar funcionalidades** que no existen"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1712,
        160
      ],
      "id": "5720817b-8294-464d-b9fd-7a0e62811200",
      "name": "CLASIFICA TIPO DE ENTRADA"
    },
    {
      "parameters": {
        "content": "## INGRESO DE VENTAS A HOJA DE CALCULO\n",
        "height": 1040,
        "width": 2912,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2336,
        -192
      ],
      "id": "070b2cc5-94cb-40c6-b719-bd42ec0f178e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "jsCode": "// Nodo posterior a Guardar_venta_en_hoja\nconst ventas = items.map(item => {\n  const cantidad = Number(item.json.CANTIDAD);\n  const nombre = item.json.PRODUCTO;\n  return `- ${cantidad} ${nombre}`;\n});\n\n// Aquí usamos \\n reales, no escapados\nconst mensaje = `✅ Registro de ventas:\\n${ventas.join('\\n')}`;\n\nreturn [{\n  json: {\n    mensaje_confirmacion: mensaje\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3840,
        -96
      ],
      "id": "3f8a4c57-c8bd-4bb8-b04d-f659757a8a05",
      "name": "Mensaje de confirmacion"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Ingreso_ventas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=0"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:E"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        2912,
        352
      ],
      "id": "67bf14ea-de71-4a44-ab84-fbf30e2ff9ca",
      "name": "ventas_solicitadas",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Tomar el mensaje desde Merge con manejo de errores\nlet raw = \"\";\ntry { \n  raw = $('Merge').first().json.final_message || \"\";\n} catch (error) {\n  console.log(\"Error obteniendo mensaje de Merge:\", error.message);\n  return [{ json: { error: \"No se pudo obtener el mensaje de Merge\" } }];\n}\n\n// Normalizar texto mejorado (minúsculas, sin tildes, sin caracteres especiales)\nfunction normalize(str) {\n  return String(str)\n    .toLowerCase()\n    .trim()\n    .replace(/[áàäâã]/g, \"a\")\n    .replace(/[éèëê]/g, \"e\")\n    .replace(/[íìïî]/g, \"i\")\n    .replace(/[óòöôõ]/g, \"o\")\n    .replace(/[úùüû]/g, \"u\")\n    .replace(/[ñ]/g, \"n\")\n    .replace(/[ç]/g, \"c\")\n    .replace(/\\s+/g, \" \"); // Múltiples espacios a uno solo\n}\n\nconst msg = normalize(raw);\nconsole.log(\"Mensaje normalizado:\", msg);\n\n// Obtener fecha de hoy en zona horaria de Bogotá optimizada\nfunction todayInTZ(tz = \"America/Bogota\") {\n  const now = new Date();\n  const formatter = new Intl.DateTimeFormat(\"en-CA\", {\n    timeZone: tz,\n    year: \"numeric\",\n    month: \"2-digit\", \n    day: \"2-digit\",\n  });\n  \n  const [year, month, day] = formatter.format(now).split('-');\n  return new Date(Number(year), Number(month) - 1, Number(day));\n}\n\n// Función para obtener el lunes de la semana actual\nfunction getMondayOfWeek(date) {\n  const d = new Date(date);\n  const day = d.getDay(); // 0 = domingo, 1 = lunes, ..., 6 = sábado\n  const diff = day === 0 ? -6 : 1 - day; // Si es domingo, retroceder 6 días\n  d.setDate(d.getDate() + diff);\n  return d;\n}\n\n// Función para obtener el domingo de la semana actual\nfunction getSundayOfWeek(date) {\n  const monday = getMondayOfWeek(date);\n  const sunday = new Date(monday);\n  sunday.setDate(monday.getDate() + 6);\n  return sunday;\n}\n\nfunction addDays(date, delta) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + delta);\n  return result;\n}\n\nfunction formatDDMMYYYY(date) {\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const yyyy = date.getFullYear();\n  return `${dd}-${mm}-${yyyy}`;\n}\n\n// Patrones de consulta más robustos\nconst patterns = {\n  hoy: /\\b(hoy|dia de hoy|ventas de hoy|hoy ventas)\\b/,\n  ayer: /\\b(ayer|dia de ayer|ventas de ayer|ayer ventas)\\b/,\n  semana: /\\b(semana|esta semana|ventas de la semana|semana actual)\\b/,\n  semanaCompleta: /\\b(semana completa|toda la semana|semana entera)\\b/,\n  mes: /\\b(mes|este mes|ventas del mes|mes actual|ultimos 30 dias|30 dias)\\b/,\n  // Nuevos patrones\n  antier: /\\b(antier|anteayer|antes de ayer)\\b/,\n  ultimosDias: /\\b(ultimos (\\d+) dias|(\\d+) dias)\\b/\n};\n\nconst hoy = todayInTZ();\nlet tipo = \"dia\";\nlet inicio = hoy;\nlet fin = hoy;\nlet descripcion = \"Ventas de hoy\";\n\n// Lógica de interpretación mejorada\nif (patterns.ayer.test(msg)) {\n  const ayer = addDays(hoy, -1);\n  inicio = ayer;\n  fin = ayer;\n  tipo = \"dia\";\n  descripcion = \"Ventas de ayer\";\n  \n} else if (patterns.antier.test(msg)) {\n  const antier = addDays(hoy, -2);\n  inicio = antier;\n  fin = antier;\n  tipo = \"dia\";\n  descripcion = \"Ventas de antier\";\n  \n} else if (patterns.semana.test(msg)) {\n  inicio = getMondayOfWeek(hoy); // Desde el lunes de esta semana\n  fin = hoy; // Hasta hoy\n  tipo = \"semana\";\n  descripcion = \"Ventas de esta semana (lunes a hoy)\";\n  \n} else if (patterns.semanaCompleta.test(msg)) {\n  inicio = getMondayOfWeek(hoy); // Desde el lunes\n  fin = getSundayOfWeek(hoy); // Hasta el domingo (puede ser futuro)\n  if (fin > hoy) fin = hoy; // No ir más allá de hoy\n  tipo = \"semana\";\n  descripcion = \"Ventas de la semana completa\";\n  \n} else if (patterns.mes.test(msg)) {\n  inicio = new Date(hoy.getFullYear(), hoy.getMonth(), 1);\n  fin = hoy;\n  tipo = \"mes\";\n  descripcion = \"Ventas del mes\";\n  \n} else if (patterns.ultimosDias.test(msg)) {\n  const match = msg.match(/(\\d+)/);\n  if (match) {\n    const dias = parseInt(match[1]);\n    if (dias > 0 && dias <= 365) { // Validar rango razonable\n      inicio = addDays(hoy, -(dias - 1));\n      fin = hoy;\n      tipo = \"rango\";\n      descripcion = `Ventas de los últimos ${dias} días`;\n    }\n  }\n} else if (patterns.hoy.test(msg)) {\n  // Explícitamente \"hoy\" (ya está configurado por defecto)\n  descripcion = \"Ventas de hoy\";\n}\n\n// Log de depuración\nconsole.log(`Interpretación: ${descripcion}`);\nconsole.log(`Período: ${formatDDMMYYYY(inicio)} al ${formatDDMMYYYY(fin)}`);\n\n// Validación de fechas\nif (inicio > hoy) {\n  console.log(\"Advertencia: Fecha de inicio en el futuro, ajustando a hoy\");\n  inicio = hoy;\n}\n\nif (fin > hoy) {\n  console.log(\"Advertencia: Fecha de fin en el futuro, ajustando a hoy\");\n  fin = hoy;\n}\n\n// Resultado con más información\nreturn [{\n  json: {\n    // Datos originales (compatibilidad)\n    queryType: tipo,\n    fechaInicio: formatDDMMYYYY(inicio),\n    fechaFin: formatDDMMYYYY(fin),\n    textoInterpretado: msg,\n    \n    // Nuevos datos\n    mensajeOriginal: raw,\n    descripcion: descripcion,\n    diasIncluidos: Math.ceil((fin - inicio) / (1000 * 60 * 60 * 24)) + 1,\n    fechaConsulta: formatDDMMYYYY(hoy),\n    \n    // Para debugging\n    debug: {\n      patronEncontrado: Object.keys(patterns).find(key => patterns[key].test(msg)) || \"hoy (default)\",\n      fechasCalculadas: {\n        inicio: inicio.toISOString().split('T')[0],\n        fin: fin.toISOString().split('T')[0]\n      }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2720,
        352
      ],
      "id": "b2ca3daa-1d47-4f59-acd3-df504cfc2221",
      "name": "Interpretar_mensaje"
    },
    {
      "parameters": {
        "jsCode": "// Solo para depurar\nconsole.log(\"Contenido de $input.first().json:\", $input.first().json);\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1568,
        160
      ],
      "id": "3da484a0-a325-441f-a5d7-5f276f1b92d3",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// Generador de mensaje WhatsApp para resumen de ventas - Versión corregida\nconst fechaObjetivo = $('Interpretar_mensaje').item.json.fechaInicio;\nconst todasLasVentas = $('ventas_solicitadas').all();\n\nconsole.log(\"Generando resumen para fecha: \" + fechaObjetivo);\n\n// Función para normalizar fechas a formato DD-MM-YYYY\nfunction normalizarFecha(fecha) {\n  if (!fecha) return null;\n  \n  // Si ya está en formato DD-MM-YYYY\n  if (typeof fecha === 'string' && fecha.match(/^\\d{1,2}-\\d{1,2}-\\d{4}$/)) {\n    const partes = fecha.split('-');\n    const dia = partes[0];\n    const mes = partes[1];\n    const año = partes[2];\n    return dia.padStart(2, '0') + '-' + mes.padStart(2, '0') + '-' + año;\n  }\n  \n  // Si viene en formato \"24/8/2025, 8:27:04 p. m.\"\n  if (typeof fecha === 'string' && fecha.includes('/')) {\n    try {\n      const partesFecha = fecha.split(',')[0].trim();\n      const partes = partesFecha.split('/');\n      const dia = partes[0];\n      const mes = partes[1];\n      const año = partes[2];\n      return dia.padStart(2, '0') + '-' + mes.padStart(2, '0') + '-' + año;\n    } catch (error) {\n      return null;\n    }\n  }\n  \n  return null;\n}\n\n// Función para formatear números con separadores de miles\nfunction formatearPeso(valor) {\n  return '$' + new Intl.NumberFormat('es-CO').format(valor);\n}\n\n// Función para obtener día de la semana en español\nfunction obtenerDiaSemana(fecha) {\n  const partes = fecha.split('-');\n  const dia = partes[0];\n  const mes = partes[1];\n  const año = partes[2];\n  const fechaObj = new Date(año, mes - 1, dia);\n  const dias = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];\n  return dias[fechaObj.getDay()];\n}\n\n// Función para fecha legible corta\nfunction fechaLegibleCorta(fecha) {\n  const partes = fecha.split('-');\n  const dia = partes[0];\n  const mes = partes[1];\n  return dia + '/' + mes;\n}\n\n// Función para convertir fecha a formato legible\nfunction fechaLegible(fecha) {\n  const partes = fecha.split('-');\n  const dia = partes[0];\n  const mes = partes[1];\n  const año = partes[2];\n  const meses = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',\n                 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];\n  const diaSemana = obtenerDiaSemana(fecha);\n  const diaCapitalizado = diaSemana.charAt(0).toUpperCase() + diaSemana.slice(1);\n  return diaCapitalizado + ', ' + parseInt(dia) + ' de ' + meses[parseInt(mes)-1] + ' de ' + año;\n}\n\n// Obtener el tipo de consulta y fechas\nconst tipoConsulta = $('Interpretar_mensaje').item.json.queryType;\nconst fechaInicio = $('Interpretar_mensaje').item.json.fechaInicio;\nconst fechaFin = $('Interpretar_mensaje').item.json.fechaFin;\n\n// Filtrar ventas por fecha (ahora maneja rangos)\nconst fechaInicioNormalizada = normalizarFecha(fechaInicio);\nlet fechaFinNormalizada = normalizarFecha(fechaFin);\n\n// Si fechaFin es null, usar fechaInicio como fecha fin (consulta de un solo día)\nif (!fechaFinNormalizada) {\n  fechaFinNormalizada = fechaInicioNormalizada;\n}\n\nconsole.log(\"Filtrando desde: \" + fechaInicioNormalizada + \" hasta: \" + fechaFinNormalizada);\n\nlet ventasFiltradas = [];\n\nfor (let i = 0; i < todasLasVentas.length; i++) {\n  const venta = todasLasVentas[i].json;\n  const fechaVenta = venta.FECHA;\n  \n  if (fechaVenta) {\n    const fechaVentaNormalizada = normalizarFecha(fechaVenta);\n    \n    // Comparar si la fecha está en el rango\n    if (fechaVentaNormalizada >= fechaInicioNormalizada && fechaVentaNormalizada <= fechaFinNormalizada) {\n      ventasFiltradas.push(venta);\n    }\n  }\n}\n\n// Procesar datos para el resumen\nlet resumenProductos = {};\nlet resumenPorDia = {}; // Nuevo: para agrupar por día\nlet valorTotalGeneral = 0;\nlet cantidadTotalProductos = 0;\n\nventasFiltradas.forEach(function(venta) {\n  const producto = venta.PRODUCTO;\n  const cantidad = parseInt(venta.CANTIDAD) || 0;\n  const valorTotal = parseFloat(venta.VALOR_TOTAL) || 0;\n  const fechaVenta = normalizarFecha(venta.FECHA);\n  \n  // Agrupar por productos (como antes)\n  if (!resumenProductos[producto]) {\n    resumenProductos[producto] = {\n      cantidad: 0,\n      valorTotal: 0\n    };\n  }\n  \n  resumenProductos[producto].cantidad += cantidad;\n  resumenProductos[producto].valorTotal += valorTotal;\n  \n  // Nuevo: Agrupar por día para reporte semanal\n  if (!resumenPorDia[fechaVenta]) {\n    resumenPorDia[fechaVenta] = 0;\n  }\n  resumenPorDia[fechaVenta] += valorTotal;\n  \n  valorTotalGeneral += valorTotal;\n  cantidadTotalProductos += cantidad;\n});\n\n// Generar mensaje de WhatsApp según el tipo de consulta\nlet mensaje = '';\n\nif (ventasFiltradas.length === 0) {\n  let titulo;\n  if (tipoConsulta === 'semana') {\n    titulo = '📊 Resumen de ventas semanal\\n📅 ' + fechaLegibleCorta(fechaInicioNormalizada) + ' al ' + fechaLegibleCorta(fechaFinNormalizada);\n  } else {\n    titulo = '📊 Resumen de ventas\\n📅 ' + fechaLegible(fechaInicioNormalizada);\n  }\n  mensaje = titulo + '\\nNo se registraron ventas para este período.';\n  \n} else if (tipoConsulta === 'semana' || tipoConsulta === 'mes') {\n  // FORMATO ESPECIAL PARA SEMANA/MES: Solo días y totales\n  mensaje = '📊 Resumen de ventas semanal\\n';\n  mensaje += '📅 ' + fechaLegibleCorta(fechaInicioNormalizada) + ' al ' + fechaLegibleCorta(fechaFinNormalizada) + '\\n';\n  \n  // Ordenar días por fecha\n  const diasOrdenados = Object.keys(resumenPorDia).sort();\n  \n  diasOrdenados.forEach(function(fecha) {\n    const diaSemana = obtenerDiaSemana(fecha);\n    const total = resumenPorDia[fecha];\n    mensaje += '• ' + diaSemana + ': ' + formatearPeso(total) + '\\n';\n  });\n  \n  mensaje += '💰 Total general: ' + formatearPeso(valorTotalGeneral);\n  \n} else {\n  // FORMATO NORMAL PARA DÍAS: Productos detallados\n  mensaje = '📊 Resumen de ventas\\n';\n  mensaje += '📅 ' + fechaLegible(fechaInicioNormalizada) + '\\n';\n  \n  // Ordenar productos por valor total (mayor a menor)\n  const productosArray = Object.entries(resumenProductos);\n  productosArray.sort(function(a, b) {\n    return b[1].valorTotal - a[1].valorTotal;\n  });\n  \n  // Lista de productos\n  productosArray.forEach(function(item) {\n    const producto = item[0];\n    const datos = item[1];\n    mensaje += '• ' + producto + ': ' + datos.cantidad + ' und — ' + formatearPeso(datos.valorTotal) + '\\n';\n  });\n  \n  // Total general\n  mensaje += '💰 Total general: ' + formatearPeso(valorTotalGeneral);\n}\n\nconsole.log(\"Ventas procesadas: \" + ventasFiltradas.length);\nconsole.log(\"Valor total: \" + valorTotalGeneral);\n\n// Retornar el mensaje\nreturn [\n  {\n    json: {\n      mensaje_telegram: mensaje,\n      tipo_consulta: tipoConsulta,\n      fecha_inicio: fechaInicioNormalizada,\n      fecha_fin: fechaFinNormalizada,\n      total_ventas: valorTotalGeneral,\n      total_productos: cantidadTotalProductos,\n      total_transacciones: ventasFiltradas.length,\n      resumen_productos: resumenProductos,\n      resumen_por_dia: resumenPorDia // Nuevo campo\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3072,
        352
      ],
      "id": "007fa49d-8feb-4b7d-8920-654d7951bbbb",
      "name": "crear_mensaje"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 368924617,
          "mode": "list",
          "cachedResultName": "LISTA_PRECIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=368924617"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "PRECIO_UNITARIO": "={{ $json.PRECIO_UNITARIO }}"
          },
          "matchingColumns": [
            "PRODUCTO"
          ],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PRECIO_UNITARIO",
              "displayName": "PRECIO_UNITARIO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3440,
        112
      ],
      "id": "d2a8b3a8-afbb-4e12-b902-ed79d1bfe7c9",
      "name": "crea_o_actualiza_productos",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del nodo de Google Sheets\nconst sheetData = $('crea_o_actualiza_productos').all();\n\n// Función para generar la respuesta\nfunction generateProductResponse(data) {\n    if (!data || data.length === 0) {\n        return {\n            mensaje: \"❌ No se pudo procesar ningún producto. Por favor, verifica el formato del mensaje.\",\n            tipo: \"error\",\n            productos_procesados: 0\n        };\n    }\n    \n    let productosCreados = [];\n    let productosActualizados = [];\n    let productosConError = [];\n    \n    // Procesar cada elemento de respuesta del sheets\n    data.forEach((item, index) => {\n        const json = item.json;\n        \n        // Verificar si hay error en la respuesta\n        if (json.error || json.PRODUCTO === 'ERROR') {\n            productosConError.push({\n                error: json.error || 'Error desconocido',\n                producto: json.PRODUCTO || 'Producto desconocido'\n            });\n            return;\n        }\n        \n        // Verificar si el producto fue creado o actualizado\n        // Esto depende de cómo esté configurado tu nodo de sheets\n        // Asumiendo que tienes campos que indican el tipo de operación\n        \n        const producto = {\n            nombre: json.PRODUCTO || json.producto || json.name,\n            precio: json.PRECIO_UNITARIO || json.precio || json.price,\n            // Detectar si fue actualización (puedes ajustar esta lógica según tu sheets)\n            esActualizacion: json.updated || json.isUpdate || false\n        };\n        \n        // Validar que tengamos datos válidos\n        if (producto.nombre && producto.precio) {\n            if (producto.esActualizacion) {\n                productosActualizados.push(producto);\n            } else {\n                productosCreados.push(producto);\n            }\n        }\n    });\n    \n    // Generar mensaje de respuesta\n    return buildResponseMessage(productosCreados, productosActualizados, productosConError);\n}\n\n// Función para construir el mensaje de respuesta\nfunction buildResponseMessage(creados, actualizados, errores) {\n    let mensaje = \"\";\n    let totalProcesados = creados.length + actualizados.length;\n    \n    // Encabezado principal\n    if (totalProcesados > 0) {\n        mensaje += \"✅ *Productos procesados exitosamente*\\n\\n\";\n    }\n    \n    // Productos creados\n    if (creados.length > 0) {\n        mensaje += \"🆕 *PRODUCTOS CREADOS:*\\n\";\n        creados.forEach((producto, index) => {\n            mensaje += `${index + 1}. ${producto.nombre} - $${formatPrice(producto.precio)}\\n`;\n        });\n        mensaje += \"\\n\";\n    }\n    \n    // Productos actualizados\n    if (actualizados.length > 0) {\n        mensaje += \"🔄 *PRODUCTOS ACTUALIZADOS:*\\n\";\n        actualizados.forEach((producto, index) => {\n            mensaje += `${index + 1}. ${producto.nombre} - $${formatPrice(producto.precio)}\\n`;\n        });\n        mensaje += \"\\n\";\n    }\n    \n    // Resumen\n    if (totalProcesados > 0) {\n        mensaje += `📊 *Resumen:*\\n`;\n        if (creados.length > 0) mensaje += `• ${creados.length} producto(s) creado(s)\\n`;\n        if (actualizados.length > 0) mensaje += `• ${actualizados.length} producto(s) actualizado(s)\\n`;\n        mensaje += `• Total procesados: ${totalProcesados}\\n`;\n    }\n    \n    // Errores si los hay\n    if (errores.length > 0) {\n        mensaje += \"\\n⚠️ *ERRORES:*\\n\";\n        errores.forEach((error, index) => {\n            mensaje += `${index + 1}. ${error.producto}: ${error.error}\\n`;\n        });\n    }\n    \n    // Si no hay productos procesados\n    if (totalProcesados === 0 && errores.length === 0) {\n        mensaje = \"❌ No se encontraron productos válidos para procesar.\\n\\n\";\n        mensaje += \"💡 *Formato correcto:*\\n\";\n        mensaje += \"• producto a precio\\n\";\n        mensaje += \"• Ejemplo: coca cola 350ml a 3000\\n\";\n        mensaje += \"• Ejemplo: arepa burguer a 7000\";\n    }\n    \n    return {\n        mensaje: mensaje.trim(),\n        tipo: totalProcesados > 0 ? \"success\" : \"error\",\n        productos_procesados: totalProcesados,\n        productos_creados: creados.length,\n        productos_actualizados: actualizados.length,\n        errores: errores.length,\n        detalles: {\n            creados: creados,\n            actualizados: actualizados,\n            errores: errores\n        }\n    };\n}\n\n// Función para formatear precios (agregar separadores de miles)\nfunction formatPrice(price) {\n    return new Intl.NumberFormat('es-CO').format(price);\n}\n\n// Función alternativa si el nodo de sheets retorna datos en formato diferente\nfunction generateResponseFromAlternativeFormat(data) {\n    if (!data || data.length === 0) {\n        return generateProductResponse([]);\n    }\n    \n    // Si los datos vienen en formato diferente, adaptarlos\n    const adaptedData = data.map(item => {\n        return {\n            json: {\n                PRODUCTO: item.PRODUCTO || item.producto || item.name,\n                PRECIO_UNITARIO: item.PRECIO_UNITARIO || item.precio || item.price,\n                updated: item.updated || item.isUpdate || false,\n                error: item.error\n            }\n        };\n    });\n    \n    return generateProductResponse(adaptedData);\n}\n\n// Ejecutar la generación de respuesta\nconsole.log('Datos recibidos del nodo sheets:', sheetData);\n\nlet response;\n\n// Intentar con el formato principal\ntry {\n    response = generateProductResponse(sheetData);\n} catch (error) {\n    console.log('Error con formato principal, intentando formato alternativo:', error);\n    \n    // Si falla, intentar con formato alternativo\n    try {\n        response = generateResponseFromAlternativeFormat(sheetData);\n    } catch (altError) {\n        console.log('Error con formato alternativo:', altError);\n        \n        // Respuesta de error genérica\n        response = {\n            mensaje: \"❌ Error interno al procesar los datos de los productos.\",\n            tipo: \"error\",\n            productos_procesados: 0,\n            error_tecnico: altError.message\n        };\n    }\n}\n\nconsole.log('Respuesta generada:', response);\n\n// Retornar la respuesta formateada\nreturn [response];\n\n/*\nEJEMPLO DE SALIDA:\n\nPara productos exitosos:\n{\n  \"mensaje\": \"✅ *Productos procesados exitosamente*\\n\\n🆕 *PRODUCTOS CREADOS:*\\n1. Coca Cola 350ml - $3,000\\n2. Arepa Burguer - $7,000\\n\\n📊 *Resumen:*\\n• 2 producto(s) creado(s)\\n• Total procesados: 2\",\n  \"tipo\": \"success\",\n  \"productos_procesados\": 2,\n  \"productos_creados\": 2,\n  \"productos_actualizados\": 0,\n  \"errores\": 0\n}\n\nPara errores:\n{\n  \"mensaje\": \"❌ No se encontraron productos válidos para procesar.\\n\\n💡 *Formato correcto:*\\n• producto a precio\\n• Ejemplo: coca cola 350ml a 3000\\n• Ejemplo: arepa burguer a 7000\",\n  \"tipo\": \"error\",\n  \"productos_procesados\": 0\n}\n*/"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3632,
        112
      ],
      "id": "c662dcb8-365c-4fad-bf33-15a60dd8ec6d",
      "name": "crea_mensaje"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Switch1').item.json.message.text }}",
        "options": {
          "systemMessage": "=#ROL\nTu funcion es extraer productos y precios, para devolverlos en las variables PRODUCTO y PRECIO_UNITARIO\n\n#FORMATO DE SALIDA\n-cuando veas la palabra chorizo devuelve el PRODUCTO chorizos\n-cuando veas la palabra arepa,arepa de queso,arepa con queso devuelve el PRODUCTO Arepas de queso\n-Cuando veas la palabra tinto devuelve el PRODUCTO tintos\n.cuando veas frases como \"la 350\" devuelve el PRODUCTO coca cola 350"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2720,
        112
      ],
      "id": "ca0ddba7-01ed-4297-b943-755d8b9bdf27",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3088,
        160
      ],
      "id": "c21163af-18bc-46bc-acc9-67db00e38705",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos de entrada\nconst inputData = $input.all();\n\n// Función para parsear el output y convertirlo al formato requerido\nfunction parseOutputToSheetFormat(data) {\n    const results = [];\n    \n    // Procesar cada item de entrada\n    data.forEach((item, index) => {\n        try {\n            // Obtener el texto del output\n            const outputText = item.json.output;\n            \n            if (!outputText) {\n                console.log(`Item ${index}: No se encontró campo 'output'`);\n                return;\n            }\n            \n            // Llama a la nueva función que maneja múltiples productos\n            const parsedItems = parseMultipleProductData(outputText);\n            \n            if (parsedItems.length > 0) {\n                // Agregar cada producto individual a los resultados\n                parsedItems.forEach(product => {\n                    results.push({\n                        PRODUCTO: product.PRODUCTO,\n                        PRECIO_UNITARIO: product.PRECIO_UNITARIO,\n                        item_index: index,\n                        original_output: outputText\n                    });\n                });\n            } else {\n                console.log(`Item ${index}: No se pudieron extraer datos válidos`);\n                // Agregar item con error para tracking\n                results.push({\n                    PRODUCTO: 'ERROR_PARSING',\n                    PRECIO_UNITARIO: 0,\n                    error: 'No se pudieron extraer producto y precio',\n                    original_output: outputText,\n                    item_index: index\n                });\n            }\n            \n        } catch (error) {\n            console.log(`Error procesando item ${index}:`, error.message);\n            results.push({\n                PRODUCTO: 'ERROR',\n                PRECIO_UNITARIO: 0,\n                error: error.message,\n                item_index: index\n            });\n        }\n    });\n    \n    return results;\n}\n\n// ----> FUNCIÓN MODIFICADA <----\n// Ahora esta función procesa múltiples productos en una sola cadena de texto\nfunction parseMultipleProductData(outputText) {\n    const allProducts = [];\n    // Dividir el texto en bloques de productos, cada uno separado por dos saltos de línea\n    const productBlocks = outputText.split('\\n\\n');\n\n    productBlocks.forEach(block => {\n        const lines = block.split('\\n');\n        \n        // Asume que el primer elemento es el producto y el segundo el precio\n        if (lines.length >= 2) {\n            const productNameMatch = lines[0].match(/PRODUCTO:\\s*(.*)/i);\n            const productPriceMatch = lines[1].match(/PRECIO_UNITARIO:\\s*(\\d+)/i);\n            \n            if (productNameMatch && productPriceMatch) {\n                const productName = productNameMatch[1].trim();\n                const productPrice = parseInt(productPriceMatch[1], 10);\n\n                if (productName && !isNaN(productPrice)) {\n                    allProducts.push({\n                        PRODUCTO: productName,\n                        PRECIO_UNITARIO: productPrice\n                    });\n                }\n            }\n        }\n    });\n\n    return allProducts;\n}\n\n// Función para limpiar el nombre del producto (ya no necesaria con el nuevo enfoque)\n// function cleanProductName(producto) { ... }\n\n// Ejecutar el procesamiento\nconsole.log('Datos de entrada:', JSON.stringify(inputData, null, 2));\nconst parsedResults = parseOutputToSheetFormat(inputData);\nconsole.log('Resultados parseados:', JSON.stringify(parsedResults, null, 2));\n\n// Retornar los resultados en el formato esperado\nreturn parsedResults;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3232,
        112
      ],
      "id": "4965b795-bf3c-432c-a73e-c4c8da61f06b",
      "name": "Code3"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        352
      ],
      "id": "9054c5fb-a054-4a05-a211-74cfcd90f64c",
      "name": "Telegram Trigger",
      "webhookId": "ee5ecdeb-5ad7-4f1a-8b95-9d2f223b3716",
      "credentials": {
        "telegramApi": {
          "id": "n8eN1ulgccR7W4jL",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        448,
        -32
      ],
      "id": "d194748e-6701-46c7-9141-b27907ba9bbf",
      "name": "Get a file",
      "webhookId": "fe3266dc-5b5f-4fd7-acbe-63055767f9ab",
      "credentials": {
        "telegramApi": {
          "id": "n8eN1ulgccR7W4jL",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "text": "={{ $json.mensaje_confirmacion }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4064,
        -96
      ],
      "id": "70abc9b5-b551-4bcf-bb72-06adf7013d5e",
      "name": "Send a text message",
      "webhookId": "c2ebbf30-6626-4dcd-97b8-61a5cfd438f1",
      "credentials": {
        "telegramApi": {
          "id": "n8eN1ulgccR7W4jL",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.mensaje }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3840,
        112
      ],
      "id": "4c50f9aa-a15d-4a03-b863-fd41e8465caf",
      "name": "Send a text message1",
      "webhookId": "2d213bfe-5b74-4779-9488-c75eae16ea14",
      "credentials": {
        "telegramApi": {
          "id": "n8eN1ulgccR7W4jL",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "text": "={{ $json.mensaje_telegram }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3248,
        352
      ],
      "id": "89f93b3d-5455-4a45-b569-bc129bb034c3",
      "name": "Send a text message2",
      "webhookId": "2d213bfe-5b74-4779-9488-c75eae16ea14",
      "credentials": {
        "telegramApi": {
          "id": "n8eN1ulgccR7W4jL",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Tomar el primer item\nlet item = $input.item.json;\n\n// Parsear el string que está en item.output\nlet parsed;\ntry {\n  parsed = JSON.parse(item.output);\n} catch (e) {\n  parsed = { output: null, error: 'No se pudo parsear el JSON interno' };\n}\n\n// Devolver el objeto parseado como nuevo JSON\nreturn [{ json: parsed }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2704,
        576
      ],
      "id": "5db4c820-b273-4b25-aad7-3badb305d1dc",
      "name": "Code4"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "text": "={{ $json.respuesta }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2880,
        576
      ],
      "id": "c857bb7d-86d6-4356-840e-5c44add03adf",
      "name": "Send a text message3",
      "webhookId": "2d213bfe-5b74-4779-9488-c75eae16ea14",
      "credentials": {
        "telegramApi": {
          "id": "n8eN1ulgccR7W4jL",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Capturamos el texto desde la propiedad correcta\nconst texto = String($input.first().json.output || '').trim();\n// Regex para extraer \"producto\" cantidad\nconst regex = /\"([^\"]+)\"\\s+(\\d+(?:\\.\\d+)?)/g;\n\nconst filas = [];\nlet match;\n\nwhile ((match = regex.exec(texto)) !== null) {\n  filas.push({\n    PRODUCTO: match[1].replace(/_/g, ' '),\n    CANTIDAD: parseFloat(match[2]),\n    FECHA: new Date().toLocaleString('es-CO', { timeZone: 'America/Bogota' })\n  });\n}\n\nreturn filas;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2864,
        -80
      ],
      "id": "d5ba2366-5f57-44b2-a122-f6ea9042b481",
      "name": "Code_ventas"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "587a228a-9714-4cc8-9c84-2e6c1d6366b5",
              "name": "final_message",
              "value": "={{ $('Code2').item.json.final_message }}",
              "type": "string"
            },
            {
              "id": "eb846807-9689-456d-9149-4a6e2cbe8b66",
              "name": "sessionid",
              "value": "={{ $('Code2').item.json.sessionid }}",
              "type": "string"
            },
            {
              "id": "244d55b4-fd85-436e-8184-645a868a9e1c",
              "name": "datetime",
              "value": "={{ $('Code2').item.json.datetime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        -80
      ],
      "id": "3cc73ad8-761b-469a-9528-ef4de9421f46",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-flash"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $json.final_message }}"
            }
          ]
        },
        "options": {
          "systemMessage": "extrae la cantidad la CANTIDAD y PRODUCTO y deveulelos como variable"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        2480,
        -80
      ],
      "id": "9022d5a6-b3a9-4507-bae1-0c18d010813f",
      "name": "Message a model",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "CLASIFICA TIPO DE ENTRADA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe a recording1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FInals_message_text": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final_message_audio": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "FInals_message_text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Final_message_audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Interpretar_mensaje",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener_lista_precios": {
      "main": [
        [
          {
            "node": "Cruce_precio_venta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cruce_precio_venta": {
      "main": [
        [
          {
            "node": "Guardar_venta_en_hoja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar_venta_en_hoja": {
      "main": [
        [
          {
            "node": "Mensaje de confirmacion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CLASIFICA TIPO DE ENTRADA": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mensaje de confirmacion": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ventas_solicitadas": {
      "main": [
        [
          {
            "node": "crear_mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "CLASIFICA TIPO DE ENTRADA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interpretar_mensaje": {
      "main": [
        [
          {
            "node": "ventas_solicitadas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crear_mensaje": {
      "main": [
        [
          {
            "node": "Send a text message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crea_o_actualiza_productos": {
      "main": [
        [
          {
            "node": "crea_mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crea_mensaje": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "crea_o_actualiza_productos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Transcribe a recording1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Send a text message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code_ventas": {
      "main": [
        [
          {
            "node": "Obtener_lista_precios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Code_ventas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Bogota",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "f893af11-13c5-4f6b-849f-94edd2f345a5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "07f67ec32baaad4ae3d75f4e22d6ad4d1aa561c2ad8388f49ad7031ee0fe8de1"
  },
  "id": "scN4Lq2ogK85DYo0",
  "tags": []
}