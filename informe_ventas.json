{
  "name": "informe_ventas",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "mensaje"
            },
            {
              "name": "wa_id"
            },
            {
              "name": "instancia"
            },
            {
              "name": "fecha"
            }
          ]
        }
      },
      "id": "c055762a-8fe7-4141-a639-df2372f30060",
      "typeVersion": 1.1,
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        160,
        352
      ]
    },
    {
      "parameters": {
        "jsCode": "// Tomar el mensaje desde Telegram Trigger con manejo de errores\nlet raw = \"\";\ntry {\n  raw = $input.first().json.mensaje || \"\";\n} catch (error) {\n  console.log(\"Error obteniendo mensaje de Telegram:\", error.message);\n  return [{ json: { error: \"No se pudo obtener el mensaje de Telegram\" } }];\n}\n\n// Normalizar texto mejorado (minúsculas, sin tildes, sin caracteres especiales)\nfunction normalize(str) {\n  return String(str)\n    .toLowerCase()\n    .trim()\n    .replace(/[áàäâã]/g, \"a\")\n    .replace(/[éèëê]/g, \"e\")\n    .replace(/[íìïî]/g, \"i\")\n    .replace(/[óòöôõ]/g, \"o\")\n    .replace(/[úùüû]/g, \"u\")\n    .replace(/[ñ]/g, \"n\")\n    .replace(/[ç]/g, \"c\")\n    .replace(/\\s+/g, \" \"); // Múltiples espacios a uno solo\n}\n\nconst msg = normalize(raw);\nconsole.log(\"Mensaje normalizado:\", msg);\n\n// Obtener fecha de hoy en zona horaria de Bogotá optimizada\nfunction todayInTZ(tz = \"America/Bogota\") {\n  const now = new Date();\n  const formatter = new Intl.DateTimeFormat(\"en-CA\", {\n    timeZone: tz,\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n  });\n  \n  const [year, month, day] = formatter.format(now).split('-');\n  return new Date(Number(year), Number(month) - 1, Number(day));\n}\n\n// Función para obtener el lunes de la semana actual\nfunction getMondayOfWeek(date) {\n  const d = new Date(date);\n  const day = d.getDay(); // 0 = domingo, 1 = lunes, ..., 6 = sábado\n  const diff = day === 0 ? -6 : 1 - day; // Si es domingo, retroceder 6 días\n  d.setDate(d.getDate() + diff);\n  return d;\n}\n\n// Función para obtener el domingo de la semana actual\nfunction getSundayOfWeek(date) {\n  const monday = getMondayOfWeek(date);\n  const sunday = new Date(monday);\n  sunday.setDate(monday.getDate() + 6);\n  return sunday;\n}\n\nfunction addDays(date, delta) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + delta);\n  return result;\n}\n\nfunction formatDDMMYYYY(date) {\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const yyyy = date.getFullYear();\n  return `${dd}-${mm}-${yyyy}`;\n}\n\n// Patrones de consulta más robustos\nconst patterns = {\n  hoy: /\\b(hoy|dia de hoy|ventas de hoy|hoy ventas)\\b/,\n  ayer: /\\b(ayer|dia de ayer|ventas de ayer|ayer ventas)\\b/,\n  semana: /\\b(semana|esta semana|ventas de la semana|semana actual)\\b/,\n  semanaCompleta: /\\b(semana completa|toda la semana|semana entera)\\b/,\n  mes: /\\b(mes|este mes|ventas del mes|mes actual|ultimos 30 dias|30 dias)\\b/,\n  // Nuevos patrones\n  antier: /\\b(antier|anteayer|antes de ayer)\\b/,\n  ultimosDias: /\\b(ultimos (\\d+) dias|(\\d+) dias)\\b/\n};\n\nconst hoy = todayInTZ();\nlet tipo = \"dia\";\nlet inicio = hoy;\nlet fin = hoy;\nlet descripcion = \"Ventas de hoy\";\n\n// Lógica de interpretación mejorada\nif (patterns.ayer.test(msg)) {\n  const ayer = addDays(hoy, -1);\n  inicio = ayer;\n  fin = ayer;\n  tipo = \"dia\";\n  descripcion = \"Ventas de ayer\";\n  \n} else if (patterns.antier.test(msg)) {\n  const antier = addDays(hoy, -2);\n  inicio = antier;\n  fin = antier;\n  tipo = \"dia\";\n  descripcion = \"Ventas de antier\";\n  \n} else if (patterns.semana.test(msg)) {\n  inicio = getMondayOfWeek(hoy); // Desde el lunes de esta semana\n  fin = hoy; // Hasta hoy\n  tipo = \"semana\";\n  descripcion = \"Ventas de esta semana (lunes a hoy)\";\n  \n} else if (patterns.semanaCompleta.test(msg)) {\n  inicio = getMondayOfWeek(hoy); // Desde el lunes\n  fin = getSundayOfWeek(hoy); // Hasta el domingo (puede ser futuro)\n  if (fin > hoy) fin = hoy; // No ir más allá de hoy\n  tipo = \"semana\";\n  descripcion = \"Ventas de la semana completa\";\n  \n} else if (patterns.mes.test(msg)) {\n  inicio = new Date(hoy.getFullYear(), hoy.getMonth(), 1);\n  fin = hoy;\n  tipo = \"mes\";\n  descripcion = \"Ventas del mes\";\n  \n} else if (patterns.ultimosDias.test(msg)) {\n  const match = msg.match(/(\\d+)/);\n  if (match) {\n    const dias = parseInt(match[1]);\n    if (dias > 0 && dias <= 365) { // Validar rango razonable\n      inicio = addDays(hoy, -(dias - 1));\n      fin = hoy;\n      tipo = \"rango\";\n      descripcion = `Ventas de los últimos ${dias} días`;\n    }\n  }\n} else if (patterns.hoy.test(msg)) {\n  // Explícitamente \"hoy\" (ya está configurado por defecto)\n  descripcion = \"Ventas de hoy\";\n}\n\n// Log de depuración\nconsole.log(`Interpretación: ${descripcion}`);\nconsole.log(`Período: ${formatDDMMYYYY(inicio)} al ${formatDDMMYYYY(fin)}`);\n\n// Validación de fechas\nif (inicio > hoy) {\n  console.log(\"Advertencia: Fecha de inicio en el futuro, ajustando a hoy\");\n  inicio = hoy;\n}\n\nif (fin > hoy) {\n  console.log(\"Advertencia: Fecha de fin en el futuro, ajustando a hoy\");\n  fin = hoy;\n}\n\n// Resultado con más información\nreturn [{\n  json: {\n    // Datos originales (compatibilidad)\n    queryType: tipo,\n    fechaInicio: formatDDMMYYYY(inicio),\n    fechaFin: formatDDMMYYYY(fin),\n    textoInterpretado: msg,\n    \n    // Nuevos datos\n    mensajeOriginal: raw,\n    descripcion: descripcion,\n    diasIncluidos: Math.ceil((fin - inicio) / (1000 * 60 * 60 * 24)) + 1,\n    fechaConsulta: formatDDMMYYYY(hoy),\n    \n    // Para debugging\n    debug: {\n      patronEncontrado: Object.keys(patterns).find(key => patterns[key].test(msg)) || \"hoy (default)\",\n      fechasCalculadas: {\n        inicio: inicio.toISOString().split('T')[0],\n        fin: fin.toISOString().split('T')[0]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        688,
        352
      ],
      "id": "5829df08-97fa-4dd8-9838-c125f9b91af8",
      "name": "Interpretar_mensaje"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:D"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1008,
        320
      ],
      "id": "7c31fa39-5912-4316-a450-79bcb95f3c50",
      "name": "obtener_inventario",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 4,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1408,
        320
      ],
      "id": "5a1889c6-cd51-4ce3-859f-b2c1333e9707",
      "name": "Merge1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 556520416,
          "mode": "list",
          "cachedResultName": "consumo_personal",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=556520416"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:F"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1008,
        512
      ],
      "id": "c0966d52-02a6-4672-ab57-fe94956cbab1",
      "name": "obtener_consumos",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cf5df9b0-6955-4b90-b679-6e957c06305a",
              "name": "mensaje",
              "value": "={{ $json.mensaje }}",
              "type": "string"
            },
            {
              "id": "6da972ba-322f-4112-b4e2-b243a51e8239",
              "name": "wa_id",
              "value": "={{ $json.wa_id }}",
              "type": "string"
            },
            {
              "id": "d12a8370-2dab-46c2-9f3e-8f8770c14a79",
              "name": "instancia",
              "value": "={{ $json.instancia }}",
              "type": "string"
            },
            {
              "id": "e12fa449-cf4a-422a-81f5-829e24820548",
              "name": "fecha",
              "value": "={{ $json.fecha }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        432,
        352
      ],
      "id": "b1f3bf3f-1a7e-4d1d-abdc-2f1d9f5bbe11",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Edit Fields').first().json.instancia }}",
        "remoteJid": "={{ $('Edit Fields').first().json.wa_id }}",
        "messageText": "={{ $json.mensaje_texto }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2224,
        352
      ],
      "id": "8890f76d-cecb-48f5-a57f-fbee731adfa7",
      "name": "Enviar texto",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 453999267,
          "mode": "list",
          "cachedResultName": "registro_entrada_inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=453999267"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1008,
        704
      ],
      "id": "1db3d1fd-d173-475d-9a4d-ac9fb24ac9b6",
      "name": "registroEntradaInventario",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ===== GENERADOR DE MENSAJE DE VENTAS =====\nconsole.log('=== GENERANDO MENSAJE DE CONFIRMACIÓN ===');\n\ntry {\n  // Obtener datos del nodo anterior\n  const datos = $input.first().json;\n  \n  // ===== FUNCIONES AUXILIARES =====\n  \n  function formatearNumero(valor) {\n    return new Intl.NumberFormat('es-CO').format(valor);\n  }\n\n  function formatearPeso(valor) {\n    return '$' + formatearNumero(valor);\n  }\n\n  function manejarSingularPlural(cantidad, palabra) {\n    if (cantidad === 1) {\n      if (palabra === 'unidades') {\n        return 'unidad';\n      }\n      if (palabra.endsWith('s')) {\n        return palabra.slice(0, -1);\n      }\n    }\n    return palabra;\n  }\n\n  function obtenerDiaSemana(fecha) {\n    const [dia, mes, año] = fecha.split('-');\n    const fechaObj = new Date(año, mes - 1, dia);\n    const dias = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];\n    return dias[fechaObj.getDay()];\n  }\n\n  function fechaLegible(fecha) {\n    const [dia, mes, año] = fecha.split('-');\n    const meses = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',\n                   'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];\n    const diaSemana = obtenerDiaSemana(fecha);\n    return `${diaSemana}, ${parseInt(dia)} de ${meses[parseInt(mes)-1]} de ${año}`;\n  }\n\n  function fechaLegibleCorta(fecha) {\n    const [dia, mes] = fecha.split('-');\n    return `${dia}/${mes}`;\n  }\n\n  // ===== CONSTRUIR MENSAJE =====\n  let mensaje = '';\n\n  if (datos.tipoConsulta === 'semana' || datos.tipoConsulta === 'mes') {\n    mensaje = '📊 RESUMEN SEMANAL\\n';\n    mensaje += `📅 ${fechaLegibleCorta(datos.fechaInicio)} al ${fechaLegibleCorta(datos.fechaFin)}\\n`;\n  } else {\n    mensaje = '📊 RESUMEN DE VENTAS\\n';\n    mensaje += `📅 ${fechaLegible(datos.fechaInicio)}\\n`;\n  }\n  \n  mensaje += '━━━━━━━━━━━━━━━━━━━━━━━━━\\n\\n';\n\n  // ===== SECCIÓN DE VENTAS =====\n  if (datos.hay_ventas) {\n    mensaje += '📦 *PRODUCTOS VENDIDOS:*\\n';\n\n    // Lista de productos que no muestran stock y tienen orden fijo\n    const productosSinStock = [\"Arepas de QUESO\", \"Arepa BURGUER\", \"Chorizos\"];\n\n    const productosVentas = Object.entries(datos.ventas.productos);\n\n    // Separar excluidos y normales\n    const excluidos = productosSinStock\n      .map(nombre => productosVentas.find(([producto]) => producto === nombre))\n      .filter(Boolean); // elimina los que no existan en ventas\n\n    const normales = productosVentas\n      .filter(([producto]) => !productosSinStock.includes(producto))\n      .sort(([,a], [,b]) => b.cantidad - a.cantidad);\n\n    const productosOrdenados = [...excluidos, ...normales];\n\n    productosOrdenados.forEach(([producto, info]) => {\n      mensaje += `• ${formatearNumero(info.cantidad)} ${producto} | ${formatearPeso(info.valor)}`;\n\n      if (!productosSinStock.includes(producto)) {\n        if (info.stock > 0) {\n          const stockTexto = manejarSingularPlural(info.stock, 'unidades');\n          mensaje += ` | Stock: ${formatearNumero(info.stock)} ${stockTexto}\\n`;\n        } else if (info.stock === 0) {\n          mensaje += ' | ⚠️ Agotado\\n';\n        } else {\n          mensaje += '\\n';\n        }\n      } else {\n        mensaje += '\\n';\n      }\n    });\n\n    mensaje += '\\n━━━━━━━━━━━━━━━━━━━━━━━━━\\n';\n    mensaje += `📈 TOTAL VENTAS: ${formatearPeso(datos.ventas.total)}\\n\\n`;\n  } else {\n    mensaje += '⚠️ No se registraron ventas para este período\\n\\n';\n  }\n\n  // ===== SECCIÓN DE COMPRAS =====\n  if (datos.hay_compras) {\n    mensaje += '🛒 *COMPRAS:*\\n';\n    const productosCompras = Object.entries(datos.compras.productos)\n      .sort(([,a], [,b]) => b.cantidad - a.cantidad);\n\n    productosCompras.forEach(([producto, info]) => {\n      const factorTexto = manejarSingularPlural(info.cantidad, info.factor);\n      mensaje += `• ${formatearNumero(info.cantidad)} ${factorTexto} ${producto}\\n`;\n    });\n    mensaje += '\\n';\n  }\n\n  // ===== SECCIÓN DE CONSUMOS PERSONALES =====\n  if (datos.hay_consumos) {\n    mensaje += '🏠 *CONSUMOS PERSONALES:*\\n';\n    const productosConsumos = Object.entries(datos.consumos.productos)\n      .sort(([,a], [,b]) => b - a);\n\n    productosConsumos.forEach(([producto, cantidad]) => {\n      mensaje += `• ${formatearNumero(cantidad)} ${producto}\\n`;\n    });\n  }\n\n  console.log('✅ Mensaje generado exitosamente');\n  console.log(`   • Longitud: ${mensaje.length} caracteres`);\n  console.log(`   • Productos vendidos: ${datos.ventas.cantidad_productos}`);\n  console.log(`   • Total ventas: ${formatearPeso(datos.ventas.total)}`);\n\n  return [{\n    json: {\n      mensaje_texto: mensaje,\n      estadisticas: {\n        total_ventas: datos.ventas.total,\n        productos_vendidos: datos.ventas.cantidad_productos,\n        productos_consumidos: datos.consumos.cantidad_productos,\n        productos_comprados: datos.compras.cantidad_productos,\n        hay_ventas: datos.hay_ventas,\n        hay_consumos: datos.hay_consumos,\n        hay_compras: datos.hay_compras\n      }\n    }\n  }];\n\n} catch (error) {\n  console.log('❌ ERROR generando mensaje:', error.message);\n  \n  return [{\n    json: {\n      error: true,\n      mensaje_texto: `❌ Error generando mensaje: ${error.message}`,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1968,
        352
      ],
      "id": "002ce195-b8f9-4b77-b4f8-1c3347d3a16c",
      "name": "creaMensaje"
    },
    {
      "parameters": {
        "jsCode": "// ===== EXTRACTOR SIMPLE DE DATOS DE VENTAS =====\nconsole.log('=== EXTRAYENDO DATOS PARA MENSAJE DE CONFIRMACIÓN ===');\n\ntry {\n  // ===== OBTENER FECHAS DEL MENSAJE INTERPRETADO =====\n  const consulta = $('Interpretar_mensaje').item.json;\n  const fechaInicio = consulta.fechaInicio;\n  const fechaFin = consulta.fechaFin;\n  const tipoConsulta = consulta.queryType;\n  \n  console.log(`📅 Consultando desde: ${fechaInicio} hasta: ${fechaFin} (${tipoConsulta})`);\n\n  // ===== FUNCIÓN PARA NORMALIZAR FECHAS =====\n  function normalizarFecha(fecha) {\n    if (!fecha) return null;\n    \n    // DD-MM-YYYY -> mantener\n    if (fecha.match(/^\\d{1,2}-\\d{1,2}-\\d{4}$/)) {\n      const [dia, mes, año] = fecha.split('-');\n      return dia.padStart(2, '0') + '-' + mes.padStart(2, '0') + '-' + año;\n    }\n    \n    // DD/MM/YYYY -> DD-MM-YYYY\n    if (fecha.includes('/')) {\n      const [dia, mes, año] = fecha.split(',')[0].split('/');\n      return dia.padStart(2, '0') + '-' + mes.padStart(2, '0') + '-' + año;\n    }\n    \n    return null;\n  }\n\n  // ===== FILTRAR DATOS POR FECHA =====\n  function filtrarPorFecha(datos, fechaField) {\n    const fechaInicioNorm = normalizarFecha(fechaInicio);\n    const fechaFinNorm = normalizarFecha(fechaFin);\n    \n    return datos.filter(item => {\n      const fechaItem = normalizarFecha(item[fechaField]);\n      return fechaItem >= fechaInicioNorm && fechaItem <= fechaFinNorm;\n    });\n  }\n\n  // ===== EXTRAER VENTAS =====\n  const ventasRaw = $('ventas_solicitadas').all().map(item => item.json);\n  const ventasFiltradas = filtrarPorFecha(ventasRaw, 'FECHA');\n  \n  // Resumir ventas por producto\n  const ventasResumen = {};\n  let totalVentas = 0;\n  \n  ventasFiltradas.forEach(venta => {\n    const producto = venta.PRODUCTO;\n    const cantidad = parseInt(venta.CANTIDAD) || 0;\n    const valorTotal = parseFloat(venta.VALOR_TOTAL) || 0;\n    \n    if (!ventasResumen[producto]) {\n      ventasResumen[producto] = { cantidad: 0, valor: 0 };\n    }\n    \n    ventasResumen[producto].cantidad += cantidad;\n    ventasResumen[producto].valor += valorTotal;\n    totalVentas += valorTotal;\n  });\n\n  // ===== EXTRAER INVENTARIO =====\n  const inventarioRaw = $('obtener_inventario').all().map(item => item.json);\n  const inventario = {};\n  \n  inventarioRaw.forEach(item => {\n    const producto = item.PRODUCTO || item.producto;\n    const stock = parseInt(item.STOCK_ACTUAL_UNIDADES || item.stock_actual_unidades) || 0;\n    \n    if (producto && producto.trim()) {\n      inventario[producto.trim()] = stock;\n    }\n  });\n\n  // ===== EXTRAER CONSUMOS =====\n  const consumosRaw = $('obtener_consumos').all().map(item => item.json);\n  const consumosFiltrados = filtrarPorFecha(consumosRaw, 'FECHA');\n  \n  const consumosResumen = {};\n  let totalConsumos = 0;\n  \n  consumosFiltrados.forEach(consumo => {\n    const producto = consumo.PRODUCTO;\n    const cantidad = parseInt(consumo.CANTIDAD) || 0;\n    \n    if (!consumosResumen[producto]) {\n      consumosResumen[producto] = 0;\n    }\n    \n    consumosResumen[producto] += cantidad;\n    totalConsumos += cantidad;\n  });\n\n  // ===== EXTRAER COMPRAS =====\n  const comprasRaw = $('registroEntradaInventario').all().map(item => item.json);\n  const comprasFiltradas = filtrarPorFecha(comprasRaw, 'FECHA');\n  \n  const comprasResumen = {};\n  let totalCompras = 0;\n  \n  comprasFiltradas.forEach(compra => {\n    const producto = compra.PRODUCTO;\n    const cantidad = parseInt(compra.CANTIDAD) || 0;\n    const factor = compra.FACTOR_UNIDADES || 'unidades';\n    \n    if (!comprasResumen[producto]) {\n      comprasResumen[producto] = { cantidad: 0, factor };\n    }\n    \n    comprasResumen[producto].cantidad += cantidad;\n    totalCompras += cantidad;\n  });\n\n  // ===== BUSCAR STOCK DE PRODUCTOS VENDIDOS =====\n  function buscarStock(nombreProducto) {\n    if (!nombreProducto) return 0;\n    \n    const nombre = nombreProducto.trim().toLowerCase();\n    \n    // Búsqueda exacta\n    for (const [producto, stock] of Object.entries(inventario)) {\n      if (producto.toLowerCase() === nombre) {\n        return stock;\n      }\n    }\n    \n    // Búsqueda parcial\n    for (const [producto, stock] of Object.entries(inventario)) {\n      if (producto.toLowerCase().includes(nombre) || nombre.includes(producto.toLowerCase())) {\n        return stock;\n      }\n    }\n    \n    return 0;\n  }\n\n  // Agregar stock a productos vendidos\n  Object.keys(ventasResumen).forEach(producto => {\n    ventasResumen[producto].stock = buscarStock(producto);\n  });\n\n  // ===== DATOS FINALES SIMPLIFICADOS =====\n  const datosExtraidos = {\n    // Metadatos de consulta\n    fechaInicio: normalizarFecha(fechaInicio),\n    fechaFin: normalizarFecha(fechaFin),\n    tipoConsulta: tipoConsulta,\n    \n    // Datos principales\n    ventas: {\n      productos: ventasResumen,\n      total: totalVentas,\n      cantidad_productos: Object.keys(ventasResumen).length,\n      total_transacciones: ventasFiltradas.length\n    },\n    \n    consumos: {\n      productos: consumosResumen,\n      total_cantidad: totalConsumos,\n      cantidad_productos: Object.keys(consumosResumen).length\n    },\n    \n    compras: {\n      productos: comprasResumen,\n      total_cantidad: totalCompras,\n      cantidad_productos: Object.keys(comprasResumen).length\n    },\n    \n    inventario: {\n      productos: inventario,\n      total_productos: Object.keys(inventario).length\n    },\n    \n    // Flags útiles para el mensaje\n    hay_ventas: Object.keys(ventasResumen).length > 0,\n    hay_consumos: Object.keys(consumosResumen).length > 0,\n    hay_compras: Object.keys(comprasResumen).length > 0,\n    hay_productos_agotados: Object.values(ventasResumen).some(v => v.stock === 0)\n  };\n\n  console.log('✅ Datos extraídos exitosamente:');\n  console.log(`   • Ventas: ${datosExtraidos.ventas.cantidad_productos} productos, $${datosExtraidos.ventas.total.toLocaleString()}`);\n  console.log(`   • Consumos: ${datosExtraidos.consumos.cantidad_productos} productos, ${datosExtraidos.consumos.total_cantidad} unidades`);\n  console.log(`   • Compras: ${datosExtraidos.compras.cantidad_productos} productos, ${datosExtraidos.compras.total_cantidad} items`);\n  console.log(`   • Inventario: ${datosExtraidos.inventario.total_productos} productos`);\n\n  return [{\n    json: datosExtraidos\n  }];\n\n} catch (error) {\n  console.log('❌ ERROR:', error.message);\n  \n  return [{\n    json: {\n      error: true,\n      mensaje: `Error extrayendo datos: ${error.message}`,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        352
      ],
      "id": "f226948b-02d7-4d63-a701-aa0aeb857685",
      "name": "extraeDatos"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "ventas",
          "mode": "list",
          "cachedResultName": "ventas"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1024,
        80
      ],
      "id": "3dce8b45-514c-4b1c-8ddd-b85d9d8fc46f",
      "name": "Guardar_venta_en_Postgres",
      "credentials": {
        "postgres": {
          "id": "QYN0UhXauGwlSaLm",
          "name": "transito"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interpretar_mensaje": {
      "main": [
        [
          {
            "node": "obtener_inventario",
            "type": "main",
            "index": 0
          },
          {
            "node": "obtener_consumos",
            "type": "main",
            "index": 0
          },
          {
            "node": "registroEntradaInventario",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guardar_venta_en_Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener_inventario": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "extraeDatos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener_consumos": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Interpretar_mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "registroEntradaInventario": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "creaMensaje": {
      "main": [
        [
          {
            "node": "Enviar texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extraeDatos": {
      "main": [
        [
          {
            "node": "creaMensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar_venta_en_Postgres": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9ed590e4-8e7d-4cae-ba45-1a4618bc89b7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "07f67ec32baaad4ae3d75f4e22d6ad4d1aa561c2ad8388f49ad7031ee0fe8de1"
  },
  "id": "wrULXZDPO5EmNxd3",
  "tags": []
}