{
  "name": "Venta_Negocio WHATASAPP 2",
  "nodes": [
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1648,
        832
      ],
      "id": "8a598340-b11c-4d42-8b9f-b98f0628fc12",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Transcripcion de archivos\n## imagenes, texto. audio",
        "height": 80,
        "width": 1312,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -160,
        32
      ],
      "id": "062cc1ff-c752-4661-b942-090077f26f98",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.categoria }}",
                    "rightValue": "venta",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "f3933b07-b993-49b3-9bcf-a89073e90911"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "registro_venta"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "60c4819e-7de8-4057-9114-d079bd314c62",
                    "leftValue": "={{ $json.categoria }}",
                    "rightValue": "info_venta",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "informacion de ventas"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "33894fb6-564e-45d8-a821-5786ff3f1661",
                    "leftValue": "={{ $json.categoria }}",
                    "rightValue": "inventario",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "inventario"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bd6aed3a-6c50-4cad-af61-c08747d6cd4d",
                    "leftValue": "={{ $json.categoria }}",
                    "rightValue": "consumo_personal",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "consumo_personal"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "317d967e-167d-49a6-84c1-dc3d6c10af08",
                    "leftValue": "={{ $json.categoria }}",
                    "rightValue": "precios_mod",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "precios_mod"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2336,
        640
      ],
      "id": "77d3b4cc-0a00-4067-a25e-a04df705b3b2",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4df07822-8763-486d-b9f4-8255febbd98e",
              "name": "final_message",
              "value": "={{ $('Code2').item.json.final_message }}",
              "type": "string"
            },
            {
              "id": "42e3e377-78a2-4771-a9db-ca9cc8cc2b94",
              "name": "datetime",
              "value": "={{ $('Code2').item.json.datetime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2624,
        96
      ],
      "id": "44a67ab1-326d-439c-a4b4-2ca29bdcb787",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2992,
        224
      ],
      "id": "caf07a9a-7c99-416e-8e85-03f5c2ed252e",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Capturamos el texto desde la propiedad correcta\nconst texto = String($input.first().json.output || '').trim();\n\n// Regex para extraer \"producto\" cantidad\nconst regex = /\"([^\"]+)\"\\s+(\\d+(?:\\.\\d+)?)/g;\n\nconst filas = [];\nlet match;\n\nwhile ((match = regex.exec(texto)) !== null) {\n  filas.push({\n    PRODUCTO: match[1].replace(/_/g, ' '),\n    CANTIDAD: parseFloat(match[2]),\n    FECHA: new Date().toLocaleString('es-CO', { timeZone: 'America/Bogota' })\n  });\n}\n\nreturn filas;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3264,
        96
      ],
      "id": "6758fb63-4a4c-4f41-923d-c7e1543a6abc",
      "name": "Code_ventas"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 368924617,
          "mode": "list",
          "cachedResultName": "LISTA_PRECIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=368924617"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3488,
        96
      ],
      "id": "bd70aaea-2732-4ea7-9f33-b34e6e9a265a",
      "name": "Obtener_lista_precios",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos todas las ventas desde Code_ventas\nconst ventas = $('Code_ventas').all().map(item => item.json);\n// Obtenemos la lista de precios desde Obtener_lista_precios\nconst precios = $('Obtener_lista_precios').all().map(item => item.json);\n\n// FunciÃ³n para buscar el precio y costo de un producto\nfunction buscarPrecio(nombreProducto) {\n  const nombreVenta = nombreProducto.toLowerCase().replace(/_/g, ' ').trim();\n  for (const p of precios) {\n    const nombrePrecio = p.PRODUCTO.toLowerCase().replace(/_/g, ' ').trim();\n    if (nombrePrecio === nombreVenta) {\n      return {\n        precio: parseFloat(p.PRECIO_UNITARIO),\n        costo: parseFloat(p.COSTO || 0)\n      };\n    }\n  }\n  return { precio: 0, costo: 0 }; // Si no se encuentra, devuelve 0\n}\n\n// Procesamos todas las ventas\nreturn ventas.map(v => {\n  const { precio: precioUnitario, costo: costoUnitario } = buscarPrecio(v.PRODUCTO);\n  const valorTotal = Number(v.CANTIDAD) * precioUnitario;\n  \n  return {\n    json: {\n      PRODUCTO: v.PRODUCTO,\n      CANTIDAD: Number(v.CANTIDAD),\n      VALOR_UNITARIO: precioUnitario,\n      VALOR_TOTAL: valorTotal,\n      COSTO: costoUnitario,\n      FECHA: v.FECHA\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3712,
        96
      ],
      "id": "d0aba8b3-13c0-4fdd-9252-7aaf27fdd662",
      "name": "Cruce_precio_venta"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Ingreso_ventas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "CANTIDAD": "={{ $json.CANTIDAD }}",
            "FECHA": "={{ $json.FECHA }}",
            "VALOR_UNITARIO": "={{ $json.VALOR_UNITARIO }}",
            "VALOR_TOTAL": "={{ $json.VALOR_TOTAL }}",
            "COSTO": "={{ $json.COSTO }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CANTIDAD",
              "displayName": "CANTIDAD",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "VALOR_UNITARIO",
              "displayName": "VALOR_UNITARIO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "VALOR_TOTAL",
              "displayName": "VALOR_TOTAL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "FECHA",
              "displayName": "FECHA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "COSTO",
              "displayName": "COSTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CODIGO",
              "displayName": "CODIGO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3936,
        96
      ],
      "id": "469791b5-a6ef-4107-9cd8-c46a94ec5b73",
      "name": "Guardar_venta_en_hoja",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Clasificacion del mensaje\n",
        "height": 80,
        "width": 1056,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1328,
        128
      ],
      "id": "53b998ea-78a3-4dd2-898f-b155b739fc4a",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.final_message }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# CLASIFICADOR DE MENSAJES PARA NEGOCIO DE AREPAS\n## ROL\nEres un clasificador automÃ¡tico para un negocio que vende gaseosas, aguas, te y demas bebidas en diferentes presentaciones\n\n## OBJETIVO\nAnaliza el mensaje entrante y devuelve **ÃNICAMENTE** una de estas cinco palabras:\n- `venta`\n- `info_venta`  \n- `precios_mod`\n- `inventario`\n- `consumo_personal`\n\n## TÃRMINOS Y CONVERSIONES\n### Productos bÃ¡sicos:\n| Entrada | Salida exacta |\n|---------|---------------|\n| combo/combos | \"Chorizos\" + \"Arepas de queso\" (1 de cada uno) |\n| 2.5 | \"Gaseosas MEGA 2.5\" |\n| 350 | \"Gaseosas 350ml\" |\n| 250 | \"Gaseosas 250ml\" |\n| chorizo/chorizos | \"Chorizos\" |\n| arepa/arepas/arepas con queso | \"Arepas de queso\" |\n\n## REGLAS DE CLASIFICACIÃN\n### CATEGORÃA: venta\n**CuÃ¡ndo usar:** El mensaje registra productos vendidos a clientes\n**Ejemplos:**\n- \"5 arepas y dos chorizos\"\n- \"2 combos y una 350\"\n- \"vendi 3 chorizos\"\n- \"3250\" (3 gaseosas 350ml)\n- \"32.5\" (3 gaseosas 2.5L)\n\n---\n### CATEGORÃA: consumo_personal\n**CuÃ¡ndo usar:** El mensaje indica que el dueÃ±o/propietario del negocio consumiÃ³ productos del inventario\n**Indicadores clave:** \"me tomÃ©\", \"me comÃ­\", \"consumÃ­\", \"tomÃ©\", \"comÃ­\"\n**Ejemplos:**\n- \"me tomÃ© una 350\"\n- \"me tomÃ© 2 250\"\n- \"me comÃ­ un chorizo\"\n- \"tomÃ© una arepa\"\n- \"me consumÃ­ una 2.5\"\n- \"comÃ­ 2 combos\"\n\n---\n### CATEGORÃA: info_venta\n**CuÃ¡ndo usar:** El mensaje pide informaciÃ³n sobre ventas realizadas\n**Ejemplos:**\n- \"cuÃ¡nto se vendiÃ³ hoy\"\n- \"ventas de esta semana\"\n- \"total del dÃ­a\"\n- \"ventas de agosto\"\n- \"reporte de ventas\"\n\n---\n### CATEGORÃA: precios_mod\n**CuÃ¡ndo usar:** El mensaje modifica o crea precios de productos\n**Ejemplos:**\n- \"el chorizo quedÃ³ a 7000\"\n- \"350 a 3500\"\n- \"la 2.5 a 8000\"\n- \"crea los siguientes productos\"\n- \"cambiar precio del tinto\"\n\n---\n### CATEGORÃA: inventario\n**CuÃ¡ndo usar:** El mensaje registra la compra o el ingreso de productos al inventario\n**Ejemplos:**\n- \"entraron 4 cajas de 350\"\n- \"ingresaron 2 cajas de 250\"\n- \"comprÃ© 10 bultos de arepas\"\n- \"llegaron 50 gaseosas de 250ml\"\n\n---\n## GLOSARIO INTERNO\n- **combo** = 1 chorizo + 1 arepa\n- **350** = gaseosa 350ml\n- **2.5** = gaseosa 2.5L\n- **\"3250\"** = 3 gaseosas 350ml\n- **\"32.5\"** = 3 gaseosas 2.5L\n- **\"cuatro, uno punto cinco\"** = 4 gaseosas 1.5L\n\n## INSTRUCCIÃN FINAL\nAnaliza este mensaje: {{ $json.final_message }}\nResponde solo con la categorÃ­a correspondiente (sin comillas, sin explicaciones)."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1632,
        656
      ],
      "id": "2c54e6e3-0f1a-440c-a6fc-117394873cf5",
      "name": "CLASIFICA TIPO DE ENTRADA"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.final_message }}",
        "options": {
          "systemMessage": "=# INSTRUCCIONES PARA TRANSFORMAR VENTAS\nTu labor es transformar el mensaje {{ $json.final_message }} de ventas siguiendo **EXACTAMENTE** el formato especificado.\n\n## TÃRMINOS Y CONVERSIONES\n### Productos bÃ¡sicos:\n| Entrada | Salida exacta |\n|---------|---------------|\n| combo/combos | \"Chorizos\" + \"Arepas de queso\" (1 de cada uno) |\n| 2.5 | \"Gaseosas MEGA 2.5\" |\n| 350 | \"Gaseosas 350ml\" |\n| 250 | \"Gaseosas 250ml\" |\n| chorizo/chorizos | \"Chorizos\" |\n| arepa/arepas/arepas con queso | \"Arepas de queso\" |\n| mustang/lucky/luqui/luki/mosto/musta/mustang/lukis/must/most | \"Cigarrillos\" |\n| tinto/tintos | \"Tintos\" |\n\n### Casos especiales - NÃºmeros unidos:\n- **PatrÃ³n:** Cuando encuentres un nÃºmero de 4 dÃ­gitos donde los primeros dÃ­gitos representan cantidad y los Ãºltimos el tipo de gaseosa:\n  - \"3250\" o \"3 250\" = 3 \"Gaseosas 250ml\"\n  - \"2350\" o \"2 350\" = 2 \"Gaseosas 350ml\" \n  - \"4350\" o \"4 350\" = 4 \"Gaseosas 350ml\"\n  - \"5250\" o \"5 250\" = 5 \"Gaseosas 250ml\"\n  - \"1250\" o \"1 250\" = 1 \"Gaseosas 250ml\"\n\n- **PatrÃ³n con decimales:** Cuando encuentres nÃºmeros con formato X2.5:\n  - \"32.5\" o \"3 2.5\" = 3 \"Gaseosas MEGA 2.5\"\n  - \"22.5\" o \"2 2.5\" = 2 \"Gaseosas MEGA 2.5\"\n  - \"52.5\" o \"5 2.5\" = 5 \"Gaseosas MEGA 2.5\"\n\n### Ejemplos de conversiÃ³n:\n- **Entrada:** \"3 combos\" \n- **Salida:** \"Chorizos\" 3, \"Arepas de queso\" 3\n- **Entrada:** \"2 combos y una 2.5\"\n- **Salida:** \"Chorizos\" 2, \"Arepas de queso\" 2, \"Gaseosa MEGA 2.5\" 1\n- **Entrada:** \"2350\"\n- **Salida:** \"Gaseosas 350ml\" 2\n- **Entrada:** \"32.5\"\n- **Salida:** \"Gaseosas MEGA 2.5\" 3\n\n## FORMATO DE SALIDA OBLIGATORIO\n**ESTRUCTURA:** \"NombreProducto\" cantidad, \"NombreProducto\" cantidad\n\n**REGLAS ESTRICTAS:**\n1. Cada producto entre comillas dobles: \"Chorizos\"\n2. Espacio despuÃ©s de las comillas: \"Chorizos\" 3\n3. Coma y espacio entre productos: , \"\n4. NO agregar saltos de lÃ­nea (\\n)\n5. NO cambiar mayÃºsculas/minÃºsculas de los nombres de productos\n\n## EJEMPLOS COMPLETOS:\n**Entrada:** \"4 combos 2 tintos y una 2.5\"\n**Salida:** \"Chorizos\" 4, \"Arepas de queso\" 4, \"Tintos\" 2, \"Gaseosas MEGA 2.5\" 1\n\n**Entrada:** \"3 arepas y 2 350\"\n**Salida:** \"Arepas de queso\" 3, \"Gaseosas 350ml\" 2\n\n**Entrada:** \"32.5\"\n**Salida:** \"Gaseosas MEGA 2.5\" 3\n\n**Entrada:** \"2350 y un combo\"\n**Salida:** \"Gaseosas 350ml\" 2, \"Chorizos\" 1, \"Arepas de queso\" 1\n\n**Entrada:** \"4250 y 22.5\"\n**Salida:** \"Gaseosas 250ml\" 4, \"Gaseosas MEGA 2.5\" 2\n\n## IMPORTANTE:\n- Devuelve ÃNICAMENTE el formato de salida especificado\n- NO agregues explicaciones\n- NO agregues saltos de lÃ­nea\n- RESPETA exactamente las comillas y espacios"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2912,
        -16
      ],
      "id": "a030dc7b-928e-4066-bd3f-4ecd62ef6e0d",
      "name": "LIMPIA MENSAJE DE VENTA"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Ingreso_ventas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=0"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:E"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        2976,
        400
      ],
      "id": "ed772a07-88e8-4cf9-a6fb-ace9f8205f7d",
      "name": "ventas_solicitadas",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Tomar el mensaje desde Telegram Trigger con manejo de errores\nlet raw = \"\";\ntry {\n  raw = $('Code2').first().json.final_message || \"\";\n} catch (error) {\n  console.log(\"Error obteniendo mensaje de Telegram:\", error.message);\n  return [{ json: { error: \"No se pudo obtener el mensaje de Telegram\" } }];\n}\n\n// Normalizar texto mejorado (minÃºsculas, sin tildes, sin caracteres especiales)\nfunction normalize(str) {\n  return String(str)\n    .toLowerCase()\n    .trim()\n    .replace(/[Ã¡Ã Ã¤Ã¢Ã£]/g, \"a\")\n    .replace(/[Ã©Ã¨Ã«Ãª]/g, \"e\")\n    .replace(/[Ã­Ã¬Ã¯Ã®]/g, \"i\")\n    .replace(/[Ã³Ã²Ã¶Ã´Ãµ]/g, \"o\")\n    .replace(/[ÃºÃ¹Ã¼Ã»]/g, \"u\")\n    .replace(/[Ã±]/g, \"n\")\n    .replace(/[Ã§]/g, \"c\")\n    .replace(/\\s+/g, \" \"); // MÃºltiples espacios a uno solo\n}\n\nconst msg = normalize(raw);\nconsole.log(\"Mensaje normalizado:\", msg);\n\n// Obtener fecha de hoy en zona horaria de BogotÃ¡ optimizada\nfunction todayInTZ(tz = \"America/Bogota\") {\n  const now = new Date();\n  const formatter = new Intl.DateTimeFormat(\"en-CA\", {\n    timeZone: tz,\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n  });\n  \n  const [year, month, day] = formatter.format(now).split('-');\n  return new Date(Number(year), Number(month) - 1, Number(day));\n}\n\n// FunciÃ³n para obtener el lunes de la semana actual\nfunction getMondayOfWeek(date) {\n  const d = new Date(date);\n  const day = d.getDay(); // 0 = domingo, 1 = lunes, ..., 6 = sÃ¡bado\n  const diff = day === 0 ? -6 : 1 - day; // Si es domingo, retroceder 6 dÃ­as\n  d.setDate(d.getDate() + diff);\n  return d;\n}\n\n// FunciÃ³n para obtener el domingo de la semana actual\nfunction getSundayOfWeek(date) {\n  const monday = getMondayOfWeek(date);\n  const sunday = new Date(monday);\n  sunday.setDate(monday.getDate() + 6);\n  return sunday;\n}\n\nfunction addDays(date, delta) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + delta);\n  return result;\n}\n\nfunction formatDDMMYYYY(date) {\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const yyyy = date.getFullYear();\n  return `${dd}-${mm}-${yyyy}`;\n}\n\n// Patrones de consulta mÃ¡s robustos\nconst patterns = {\n  hoy: /\\b(hoy|dia de hoy|ventas de hoy|hoy ventas)\\b/,\n  ayer: /\\b(ayer|dia de ayer|ventas de ayer|ayer ventas)\\b/,\n  semana: /\\b(semana|esta semana|ventas de la semana|semana actual)\\b/,\n  semanaCompleta: /\\b(semana completa|toda la semana|semana entera)\\b/,\n  mes: /\\b(mes|este mes|ventas del mes|mes actual|ultimos 30 dias|30 dias)\\b/,\n  // Nuevos patrones\n  antier: /\\b(antier|anteayer|antes de ayer)\\b/,\n  ultimosDias: /\\b(ultimos (\\d+) dias|(\\d+) dias)\\b/\n};\n\nconst hoy = todayInTZ();\nlet tipo = \"dia\";\nlet inicio = hoy;\nlet fin = hoy;\nlet descripcion = \"Ventas de hoy\";\n\n// LÃ³gica de interpretaciÃ³n mejorada\nif (patterns.ayer.test(msg)) {\n  const ayer = addDays(hoy, -1);\n  inicio = ayer;\n  fin = ayer;\n  tipo = \"dia\";\n  descripcion = \"Ventas de ayer\";\n  \n} else if (patterns.antier.test(msg)) {\n  const antier = addDays(hoy, -2);\n  inicio = antier;\n  fin = antier;\n  tipo = \"dia\";\n  descripcion = \"Ventas de antier\";\n  \n} else if (patterns.semana.test(msg)) {\n  inicio = getMondayOfWeek(hoy); // Desde el lunes de esta semana\n  fin = hoy; // Hasta hoy\n  tipo = \"semana\";\n  descripcion = \"Ventas de esta semana (lunes a hoy)\";\n  \n} else if (patterns.semanaCompleta.test(msg)) {\n  inicio = getMondayOfWeek(hoy); // Desde el lunes\n  fin = getSundayOfWeek(hoy); // Hasta el domingo (puede ser futuro)\n  if (fin > hoy) fin = hoy; // No ir mÃ¡s allÃ¡ de hoy\n  tipo = \"semana\";\n  descripcion = \"Ventas de la semana completa\";\n  \n} else if (patterns.mes.test(msg)) {\n  inicio = new Date(hoy.getFullYear(), hoy.getMonth(), 1);\n  fin = hoy;\n  tipo = \"mes\";\n  descripcion = \"Ventas del mes\";\n  \n} else if (patterns.ultimosDias.test(msg)) {\n  const match = msg.match(/(\\d+)/);\n  if (match) {\n    const dias = parseInt(match[1]);\n    if (dias > 0 && dias <= 365) { // Validar rango razonable\n      inicio = addDays(hoy, -(dias - 1));\n      fin = hoy;\n      tipo = \"rango\";\n      descripcion = `Ventas de los Ãºltimos ${dias} dÃ­as`;\n    }\n  }\n} else if (patterns.hoy.test(msg)) {\n  // ExplÃ­citamente \"hoy\" (ya estÃ¡ configurado por defecto)\n  descripcion = \"Ventas de hoy\";\n}\n\n// Log de depuraciÃ³n\nconsole.log(`InterpretaciÃ³n: ${descripcion}`);\nconsole.log(`PerÃ­odo: ${formatDDMMYYYY(inicio)} al ${formatDDMMYYYY(fin)}`);\n\n// ValidaciÃ³n de fechas\nif (inicio > hoy) {\n  console.log(\"Advertencia: Fecha de inicio en el futuro, ajustando a hoy\");\n  inicio = hoy;\n}\n\nif (fin > hoy) {\n  console.log(\"Advertencia: Fecha de fin en el futuro, ajustando a hoy\");\n  fin = hoy;\n}\n\n// Resultado con mÃ¡s informaciÃ³n\nreturn [{\n  json: {\n    // Datos originales (compatibilidad)\n    queryType: tipo,\n    fechaInicio: formatDDMMYYYY(inicio),\n    fechaFin: formatDDMMYYYY(fin),\n    textoInterpretado: msg,\n    \n    // Nuevos datos\n    mensajeOriginal: raw,\n    descripcion: descripcion,\n    diasIncluidos: Math.ceil((fin - inicio) / (1000 * 60 * 60 * 24)) + 1,\n    fechaConsulta: formatDDMMYYYY(hoy),\n    \n    // Para debugging\n    debug: {\n      patronEncontrado: Object.keys(patterns).find(key => patterns[key].test(msg)) || \"hoy (default)\",\n      fechasCalculadas: {\n        inicio: inicio.toISOString().split('T')[0],\n        fin: fin.toISOString().split('T')[0]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2624,
        400
      ],
      "id": "c25f1530-0947-406d-a8d6-3a2fc482e795",
      "name": "Interpretar_mensaje"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 368924617,
          "mode": "list",
          "cachedResultName": "LISTA_PRECIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=368924617"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "PRECIO_UNITARIO": "={{ $json.PRECIO_UNITARIO }}"
          },
          "matchingColumns": [
            "PRODUCTO"
          ],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PRECIO_UNITARIO",
              "displayName": "PRECIO_UNITARIO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3264,
        992
      ],
      "id": "3ed74985-4832-46b3-a24b-4fde94b90524",
      "name": "crea_o_actualiza_productos",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del nodo de Google Sheets\nconst sheetData = $('crea_o_actualiza_productos').all();\n\n// FunciÃ³n para generar la respuesta\nfunction generateProductResponse(data) {\n    if (!data || data.length === 0) {\n        return {\n            mensaje: \"â No se pudo procesar ningÃºn producto. Por favor, verifica el formato del mensaje.\",\n            tipo: \"error\",\n            productos_procesados: 0\n        };\n    }\n    \n    let productosValidos = [];\n    let productosConError = [];\n    \n    // Procesar cada elemento de respuesta del sheets\n    data.forEach((item, index) => {\n        const json = item.json;\n        \n        // Verificar si hay error en la respuesta\n        if (json.error || json.PRODUCTO === 'ERROR') {\n            productosConError.push({\n                error: json.error || 'Error desconocido',\n                producto: json.PRODUCTO || 'Producto desconocido'\n            });\n            return;\n        }\n        \n        const producto = {\n            nombre: json.PRODUCTO || json.producto || json.name,\n            precio: json.PRECIO_UNITARIO || json.precio || json.price\n        };\n        \n        // Validar que tengamos datos vÃ¡lidos\n        if (producto.nombre && producto.precio) {\n            productosValidos.push(producto);\n        }\n    });\n    \n    // Generar mensaje de respuesta\n    return buildResponseMessage(productosValidos, productosConError);\n}\n\n// FunciÃ³n para construir el mensaje de respuesta simplificado\nfunction buildResponseMessage(productos, errores) {\n    let mensaje = \"\";\n    \n    // Productos procesados exitosamente\n    if (productos.length > 0) {\n        mensaje += \"â *Precio actualizado:*\\n\\n\";\n        \n        productos.forEach((producto, index) => {\n            mensaje += `${index + 1}. ${producto.nombre} - $${formatPrice(producto.precio)}\\n`;\n        });\n    }\n    \n    // Errores si los hay\n    if (errores.length > 0) {\n        if (productos.length > 0) mensaje += \"\\n\";\n        mensaje += \"â ï¸ *Errores:*\\n\";\n        errores.forEach((error, index) => {\n            mensaje += `${index + 1}. ${error.producto}: ${error.error}\\n`;\n        });\n    }\n    \n    // Si no hay productos procesados\n    if (productos.length === 0 && errores.length === 0) {\n        mensaje = \"â No se encontraron productos vÃ¡lidos para procesar.\\n\\n\";\n        mensaje += \"ð¡ *Formato correcto:*\\n\";\n        mensaje += \"â¢ producto a precio\\n\";\n        mensaje += \"â¢ Ejemplo: coca cola 350ml a 3000\\n\";\n        mensaje += \"â¢ Ejemplo: arepa burguer a 7000\";\n    }\n    \n    return {\n        mensaje: mensaje.trim(),\n        tipo: productos.length > 0 ? \"success\" : \"error\",\n        productos_procesados: productos.length,\n        errores: errores.length,\n        detalles: {\n            productos: productos,\n            errores: errores\n        }\n    };\n}\n\n// FunciÃ³n para formatear precios (agregar separadores de miles)\nfunction formatPrice(price) {\n    return new Intl.NumberFormat('es-CO').format(price);\n}\n\n// FunciÃ³n alternativa si el nodo de sheets retorna datos en formato diferente\nfunction generateResponseFromAlternativeFormat(data) {\n    if (!data || data.length === 0) {\n        return generateProductResponse([]);\n    }\n    \n    // Si los datos vienen en formato diferente, adaptarlos\n    const adaptedData = data.map(item => {\n        return {\n            json: {\n                PRODUCTO: item.PRODUCTO || item.producto || item.name,\n                PRECIO_UNITARIO: item.PRECIO_UNITARIO || item.precio || item.price,\n                error: item.error\n            }\n        };\n    });\n    \n    return generateProductResponse(adaptedData);\n}\n\n// Ejecutar la generaciÃ³n de respuesta\nconsole.log('Datos recibidos del nodo sheets:', sheetData);\n\nlet response;\n\n// Intentar con el formato principal\ntry {\n    response = generateProductResponse(sheetData);\n} catch (error) {\n    console.log('Error con formato principal, intentando formato alternativo:', error);\n    \n    // Si falla, intentar con formato alternativo\n    try {\n        response = generateResponseFromAlternativeFormat(sheetData);\n    } catch (altError) {\n        console.log('Error con formato alternativo:', altError);\n        \n        // Respuesta de error genÃ©rica\n        response = {\n            mensaje: \"â Error interno al procesar los datos de los productos.\",\n            tipo: \"error\",\n            productos_procesados: 0,\n            error_tecnico: altError.message\n        };\n    }\n}\n\nconsole.log('Respuesta generada:', response);\n\n// Retornar la respuesta formateada\nreturn [response];\n\n/*\nEJEMPLO DE SALIDA SIMPLIFICADA:\n\nPara productos exitosos:\n{\n  \"mensaje\": \"â *Productos procesados:*\\n\\n1. Coca Cola 350ml - $3,000\\n2. Arepa Burguer - $7,000\",\n  \"tipo\": \"success\",\n  \"productos_procesados\": 2\n}\n\nPara errores:\n{\n  \"mensaje\": \"â No se encontraron productos vÃ¡lidos para procesar.\\n\\nð¡ *Formato correcto:*\\nâ¢ producto a precio\\nâ¢ Ejemplo: coca cola 350ml a 3000\\nâ¢ Ejemplo: arepa burguer a 7000\",\n  \"tipo\": \"error\",\n  \"productos_procesados\": 0\n}\n*/"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3488,
        992
      ],
      "id": "e208e359-5d6f-4887-b6f1-6cfcd5b419bb",
      "name": "crea_mensaje"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Code2').first().json.final_message }}",
        "options": {
          "systemMessage": "=#ROL\nTu funcion es extraer productos y precios, para devolverlos en las variables PRODUCTO y PRECIO_UNITARIO\n\n#TERMINOS\n- Combo es igual a 1 chorizo y 1 Arepas de queso.\nejemplo: si la venta dice 3 combos el output debe ser: \"chorizos\" 3 \"Arepas de queso\" 3.\n\n- 2.5 es igual a 1 Gaseosas MEGA  2.5\n-1 mustang es igual a 1 cigarrillo mustang\n-350 es igual a Gaseosas 350ml\n-chorizo o chorizos es igual a Chorizos\n\n| 2.5 | Gaseosas MEGA 2.5 |\n| 350 | Gaseosas 350ml |\n| 250 | Gaseosas 250ml |\n| arepa/arepas/arepas con queso | Arepas de queso |\n| mustang | Cigarrillo Mustang |\n| tinto | Tintos |\n\n**Casos especiales:**\n- \"3250\" o \"3 250\" = 3 Gaseosas 250ml\n- \"32.5\" o \"3 2.5\" = 3 Gaseosas MEGA  2.5\n\n#FORMATO DE SALIDA\nes para modificar precios de productos entonces, hazlo para que el siguiente nodo los pueda agregar a la hoja de sheets correctamente\n\nEjemplos de formatos vÃ¡lidos:\nUn solo producto:\n\"PRODUCTO: Chorizos\\nPRECIO_UNITARIO: 8500\"\n\nMÃºltiples productos:\n\"PRODUCTO: Chorizos\\nPRECIO_UNITARIO: 8500\\n\\nPRODUCTO: Arepas de queso\\nPRECIO_UNITARIO: 2200\\n\\nPRODUCTO: Tintos\\nPRECIO_UNITARIO: 1500\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2560,
        880
      ],
      "id": "3a2f49f6-e1d9-4939-9596-3b3a5aa21335",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2640,
        1104
      ],
      "id": "40b714c1-2f78-4361-aeda-2d0cf207c5b4",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos de entrada\nconst inputData = $input.all();\n\n// FunciÃ³n para parsear el output y convertirlo al formato requerido\nfunction parseOutputToSheetFormat(data) {\n    const results = [];\n    \n    // Procesar cada item de entrada\n    data.forEach((item, index) => {\n        try {\n            // Obtener el texto del output\n            const outputText = item.json.output;\n            \n            if (!outputText) {\n                console.log(`Item ${index}: No se encontrÃ³ campo 'output'`);\n                return;\n            }\n            \n            // Llama a la nueva funciÃ³n que maneja mÃºltiples productos\n            const parsedItems = parseMultipleProductData(outputText);\n            \n            if (parsedItems.length > 0) {\n                // Agregar cada producto individual a los resultados\n                parsedItems.forEach(product => {\n                    results.push({\n                        PRODUCTO: product.PRODUCTO,\n                        PRECIO_UNITARIO: product.PRECIO_UNITARIO,\n                        item_index: index,\n                        original_output: outputText\n                    });\n                });\n            } else {\n                console.log(`Item ${index}: No se pudieron extraer datos vÃ¡lidos`);\n                // Agregar item con error para tracking\n                results.push({\n                    PRODUCTO: 'ERROR_PARSING',\n                    PRECIO_UNITARIO: 0,\n                    error: 'No se pudieron extraer producto y precio',\n                    original_output: outputText,\n                    item_index: index\n                });\n            }\n            \n        } catch (error) {\n            console.log(`Error procesando item ${index}:`, error.message);\n            results.push({\n                PRODUCTO: 'ERROR',\n                PRECIO_UNITARIO: 0,\n                error: error.message,\n                item_index: index\n            });\n        }\n    });\n    \n    return results;\n}\n\n// ----> FUNCIÃN MODIFICADA <----\n// Ahora esta funciÃ³n procesa mÃºltiples productos en una sola cadena de texto\nfunction parseMultipleProductData(outputText) {\n    const allProducts = [];\n    // Dividir el texto en bloques de productos, cada uno separado por dos saltos de lÃ­nea\n    const productBlocks = outputText.split('\\n\\n');\n\n    productBlocks.forEach(block => {\n        const lines = block.split('\\n');\n        \n        // Asume que el primer elemento es el producto y el segundo el precio\n        if (lines.length >= 2) {\n            const productNameMatch = lines[0].match(/PRODUCTO:\\s*(.*)/i);\n            const productPriceMatch = lines[1].match(/PRECIO_UNITARIO:\\s*(\\d+)/i);\n            \n            if (productNameMatch && productPriceMatch) {\n                const productName = productNameMatch[1].trim();\n                const productPrice = parseInt(productPriceMatch[1], 10);\n\n                if (productName && !isNaN(productPrice)) {\n                    allProducts.push({\n                        PRODUCTO: productName,\n                        PRECIO_UNITARIO: productPrice\n                    });\n                }\n            }\n        }\n    });\n\n    return allProducts;\n}\n\n// FunciÃ³n para limpiar el nombre del producto (ya no necesaria con el nuevo enfoque)\n// function cleanProductName(producto) { ... }\n\n// Ejecutar el procesamiento\nconsole.log('Datos de entrada:', JSON.stringify(inputData, null, 2));\nconst parsedResults = parseOutputToSheetFormat(inputData);\nconsole.log('Resultados parseados:', JSON.stringify(parsedResults, null, 2));\n\n// Retornar los resultados en el formato esperado\nreturn parsedResults;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2976,
        992
      ],
      "id": "7bb8d832-e728-470c-85a1-eb404588bbbc",
      "name": "Code3"
    },
    {
      "parameters": {
        "resource": "audio",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-pro"
        },
        "inputType": "binary",
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        640,
        208
      ],
      "id": "efa3e3c0-f201-4c0f-b9d7-c1a1179b320a",
      "name": "Transcribe a recording1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $json.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n// Diccionario bÃ¡sico de nÃºmeros en palabras a nÃºmeros\nconst numeros = {\n  \"cero\": 0,\n  \"uno\": 1, \"una\": 1, \"un\": 1,\n  \"dos\": 2,\n  \"tres\": 3,\n  \"cuatro\": 4,\n  \"cinco\": 5,\n  \"seis\": 6,\n  \"siete\": 7,\n  \"ocho\": 8,\n  \"nueve\": 9,\n  \"diez\": 10,\n  \"once\": 11,\n  \"doce\": 12,\n  \"trece\": 13,\n  \"catorce\": 14,\n  \"quince\": 15,\n  \"diecisÃ©is\": 16, \"dieciseis\": 16,\n  \"diecisiete\": 17,\n  \"dieciocho\": 18,\n  \"diecinueve\": 19,\n  \"veinte\": 20,\n  \"veintiuno\": 21, \"veintiuna\": 21,\n  \"veintidÃ³s\": 22, \"veintidos\": 22,\n  \"veintitrÃ©s\": 23, \"veintitres\": 23,\n  \"veinticuatro\": 24,\n  \"veinticinco\": 25,\n  \"veintisÃ©is\": 26, \"veintiseis\": 26,\n  \"veintisiete\": 27,\n  \"veintiocho\": 28,\n  \"veintinueve\": 29,\n  \"treinta\": 30,\n  \"cuarenta\": 40,\n  \"cincuenta\": 50,\n  \"sesenta\": 60,\n  \"setenta\": 70,\n  \"ochenta\": 80,\n  \"noventa\": 90\n};\n\n// FunciÃ³n para convertir palabras a nÃºmeros o sÃ­mbolos\nfunction palabraANumero(palabra) {\n  palabra = palabra.toLowerCase();\n\n  // ConversiÃ³n de \"punto\" a \".\"\n  if (palabra === \"punto\") {\n    return \".\";\n  }\n\n  if (numeros.hasOwnProperty(palabra)) {\n    return numeros[palabra];\n  }\n\n  // Manejo de combinaciones como \"treinta y cinco\"\n  if (palabra.includes(\" y \")) {\n    let partes = palabra.split(\" y \").map(p => p.trim());\n    if (numeros[partes[0]] && numeros[partes[1]]) {\n      return numeros[partes[0]] + numeros[partes[1]];\n    }\n  }\n\n  return palabra; // si no se reconoce, se deja igual\n}\n\n// Reemplazar en el texto\ntexto = texto.replace(/\\b([a-zÃ¡Ã©Ã­Ã³ÃºÃ±]+(?:\\s+y\\s+[a-zÃ¡Ã©Ã­Ã³ÃºÃ±]+)?)\\b/gi, (match) => {\n  const convertido = palabraANumero(match);\n  return convertido !== match ? convertido : match;\n});\n\nreturn { texto_convertido: texto };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        208
      ],
      "id": "f3bf4a39-484c-4c17-b5be-29759628c28e",
      "name": "Code5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b65575a3-b476-4c0f-8ce4-a7f93531b7f0",
              "name": "final_message",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            },
            {
              "id": "bf8845d4-5e4e-4596-b9d9-ec7940739e0c",
              "name": "sessionid",
              "value": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "d1aea00f-74e0-4acd-bf3d-5984b8eade6c",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1088,
        208
      ],
      "id": "78a86472-5518-4e4d-bcf5-b1dfe3f39b31",
      "name": "Final_message_audio"
    },
    {
      "parameters": {
        "jsCode": "// Solo para depurar\nconsole.log(\"Contenido de $input.first().json:\", $input.first().json);\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        304
      ],
      "id": "8a774389-9e71-4914-85b4-7e2de78fc837",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// Si sabes que viene en item.json.output especÃ­ficamente\nconst inputData = $input.all();\n\nreturn inputData.map(item => ({\n  json: {\n    categoria: (item.json.output || '').replace(/\\\\n/g, '').trim()\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2016,
        672
      ],
      "id": "84ac9b6d-7111-4863-b88b-429370042144",
      "name": "Code1"
    },
    {
      "parameters": {
        "content": "## GENERACION DE RESPUESTA",
        "height": 80,
        "width": 3136,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2496,
        -176
      ],
      "id": "dff4ab3f-b747-4a2f-aa10-4ef6b8f31584",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "jsCode": "// CÃ³digo para nodo Code de n8n - ConfirmaciÃ³n de Ventas (con STOCK_ACTUAL_UNIDADES)\n\n// Obtener los datos de entrada\nconst inputData = $input.all();\n\n// Arrays para procesar los datos\nconst ventasItems = [];\nlet totalGeneral = 0;\n\n// FunciÃ³n para manejar plurales\nconst manejarPlural = (cantidad, producto) => {\n  const cantidadNum = parseInt(cantidad);\n\n  if (cantidadNum === 1) {\n    const palabras = producto.trim().split(' ');\n    let primeraPalabra = palabras[0];\n\n    if (primeraPalabra.endsWith('s') && primeraPalabra.length > 1) {\n      const excepcionesS = ['lapis', 'virus', 'tesis', 'crisis', 'oasis', 'martes', 'miercoles', 'jueves', 'viernes'];\n      const palabraLower = primeraPalabra.toLowerCase();\n\n      if (!excepcionesS.some(excepcion => palabraLower.includes(excepcion))) {\n        if (primeraPalabra.endsWith('es') && primeraPalabra.length > 2) {\n          const antesDe_es = primeraPalabra[primeraPalabra.length - 3];\n          if (!'aeiouÃ¡Ã©Ã­Ã³Ãº'.includes(antesDe_es.toLowerCase())) {\n            primeraPalabra = primeraPalabra.slice(0, -2);\n          } else {\n            primeraPalabra = primeraPalabra.slice(0, -1);\n          }\n        } else {\n          primeraPalabra = primeraPalabra.slice(0, -1);\n        }\n      }\n    }\n\n    palabras[0] = primeraPalabra;\n    return palabras.join(' ');\n  }\n\n  return producto;\n};\n\n// Procesar cada fila de datos\nfor (const item of inputData) {\n  const { \n    CANTIDAD, \n    PRODUCTO, \n    VALOR_UNITARIO, \n    VALOR_TOTAL,\n    STOCK_ACTUAL_UNIDADES\n  } = item.json;\n\n  // Validar que todos los campos necesarios estÃ©n presentes\n  if (!CANTIDAD || !PRODUCTO || !VALOR_TOTAL || STOCK_ACTUAL_UNIDADES == null) {\n    console.log('Datos incompletos en una fila:', item.json);\n    continue;\n  }\n\n  // Formatear valores monetarios\n  const formatCurrency = (value) => {\n    return Number(value).toLocaleString('es-CO');\n  };\n\n  // Manejar plural/singular del producto\n  const productoFormateado = manejarPlural(CANTIDAD, PRODUCTO);\n\n  // Agregar item con stock actual\n  const itemFormateado = `- ${parseInt(CANTIDAD)} ${productoFormateado} = ${formatCurrency(VALOR_TOTAL)} (Stock actual: ${STOCK_ACTUAL_UNIDADES})`;\n  ventasItems.push(itemFormateado);\n\n  // Sumar al total general\n  totalGeneral += Number(VALOR_TOTAL);\n}\n\n// Formatear el total general\nconst totalFormateado = totalGeneral.toLocaleString('es-CO');\n\n// Crear mensaje con formato HTML para Telegram\nlet mensajeHTML = '<b>â Registro de ventas:</b>\\n\\n';\nventasItems.forEach(item => {\n  mensajeHTML += `<code>${item}</code>\\n`;\n});\nmensajeHTML += `\\n<b>ð° Total de la venta: $ ${totalFormateado}</b>`;\n\n// Crear mensaje de texto plano (backup)\nlet mensajeTexto = 'â Registro de ventas:\\n\\n';\nmensajeTexto += ventasItems.join('\\n');\nmensajeTexto += `\\n\\nð° Total de la venta: $ ${totalFormateado}`;\n\n// Crear objeto de respuesta\nconst resultado = {\n  mensaje_html: mensajeHTML,\n  mensaje_texto: mensajeTexto,\n  parse_mode: 'HTML',\n  total_venta: totalGeneral,\n  cantidad_items: ventasItems.length,\n  items: ventasItems,\n  fecha_registro: new Date().toLocaleDateString('es-CO'),\n  hora_registro: new Date().toLocaleTimeString('es-CO', {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  })\n};\n\n// Retornar resultado en formato n8n\nreturn [{ json: resultado }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5280,
        96
      ],
      "id": "8bb116c5-567a-4b05-9297-2140ae6a17cb",
      "name": "mensaje_confirmacion1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:F"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        4160,
        304
      ],
      "id": "494e6533-cd27-4dfe-a5b4-d31cb02c3d30",
      "name": "Obtener_inventario_actual",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ===== RESTAR VENTAS DEL INVENTARIO - VERSIÃN CORREGIDA CON DEDUPLICACIÃN =====\nconsole.log('=== INICIO: ACTUALIZAR INVENTARIO CON VENTAS ===');\n\ntry {\n  // 1. OBTENER VENTAS DESDE \"Guardar_venta_en_hoja\"\n  console.log('1. Obteniendo ventas...');\n  const ventasData = $('Guardar_venta_en_hoja').all();\n  console.log('â Ventas obtenidas:', ventasData?.length || 0, 'registros');\n  \n  // Debug: Mostrar estructura de ventas\n  if (ventasData.length > 0) {\n    console.log('ð Estructura de venta:', JSON.stringify(ventasData[0].json, null, 2));\n  }\n\n  // 2. OBTENER INVENTARIO DESDE \"Obtener_inventario_actual\"  \n  console.log('2. Obteniendo inventario actual...');\n  const inventarioDataRaw = $('Obtener_inventario_actual').all();\n  console.log('â Inventario obtenido (raw):', inventarioDataRaw?.length || 0, 'registros');\n  \n  // ======= NUEVA SECCIÃN: DEDUPLICAR INVENTARIO =======\n  console.log('3. Deduplicando inventario...');\n  const inventarioMap = new Map();\n  \n  inventarioDataRaw.forEach((item, index) => {\n    const producto = item.json.PRODUCTO;\n    const rowNumber = item.json.row_number;\n    \n    if (producto) {\n      // Usar row_number como clave Ãºnica, o producto si no hay row_number\n      const key = rowNumber ? `${producto}_${rowNumber}` : producto;\n      \n      // Solo agregar si no existe o si este tiene row_number y el anterior no\n      if (!inventarioMap.has(key)) {\n        inventarioMap.set(key, item);\n        console.log(`ð Agregado: ${producto} (row: ${rowNumber})`);\n      } else {\n        console.log(`â ï¸ Duplicado ignorado: ${producto} (row: ${rowNumber})`);\n      }\n    }\n  });\n  \n  // Convertir el Map de vuelta a array\n  const inventarioData = Array.from(inventarioMap.values());\n  console.log('â Inventario deduplicado:', inventarioData.length, 'registros Ãºnicos');\n  // ======= FIN DEDUPLICACIÃN =======\n\n  // 3. VALIDACIONES\n  if (!ventasData || ventasData.length === 0) {\n    console.log('â ï¸ No hay ventas para procesar - RETORNANDO INVENTARIO SIN CAMBIOS');\n    console.log('ð PROBLEMA: El nodo de ventas no estÃ¡ devolviendo datos');\n    console.log('ð¡ SOLUCIÃN: Verificar que el nodo \"Guardar_venta_en_hoja\" se haya ejecutado correctamente');\n    return inventarioData; // Devolver inventario sin cambios\n  }\n\n  if (!inventarioData || inventarioData.length === 0) {\n    console.log('â No hay inventario para actualizar');\n    return [];\n  }\n\n  // 4. CREAR MAPA DE INVENTARIO PARA BÃSQUEDA RÃPIDA (actualizado)\n  console.log('4. Creando mapa de inventario para bÃºsquedas...');\n  const inventarioSearchMap = {};\n  \n  inventarioData.forEach((item, index) => {\n    const producto = item.json.PRODUCTO;\n    if (producto) {\n      inventarioSearchMap[producto] = {\n        data: { ...item.json }, // Copia de los datos\n        index: index // Ãndice original en el array deduplicado\n      };\n    }\n  });\n  \n  console.log('ð Productos Ãºnicos en inventario:', Object.keys(inventarioSearchMap));\n\n  // 5. SUMAR TODAS LAS VENTAS POR PRODUCTO (en caso de productos duplicados en ventas)\n  console.log('5. Consolidando ventas por producto...');\n  const ventasConsolidadas = {};\n  \n  ventasData.forEach((venta, ventaIndex) => {\n    const productoVenta = venta.json.PRODUCTO;\n    const cantidadVenta = parseInt(venta.json.CANTIDAD) || 0;\n    \n    console.log(`ð Venta ${ventaIndex + 1}: ${productoVenta} - ${cantidadVenta} unidades`);\n    \n    if (!ventasConsolidadas[productoVenta]) {\n      ventasConsolidadas[productoVenta] = 0;\n    }\n    ventasConsolidadas[productoVenta] += cantidadVenta;\n  });\n  \n  console.log('ð Ventas consolidadas:', ventasConsolidadas);\n\n  // 6. APLICAR DESCUENTOS AL INVENTARIO\n  console.log('6. Aplicando descuentos al inventario...');\n  const inventarioActualizado = [];\n  const productosActualizados = [];\n  const productosNoEncontrados = [];\n\n  // Procesar cada item del inventario deduplicado\n  inventarioData.forEach((itemInventario, index) => {\n    const productoInventario = itemInventario.json.PRODUCTO;\n    let nuevoItem = { ...itemInventario.json }; // Copia del item original\n    \n    // Si este producto se vendiÃ³, actualizar el stock\n    if (ventasConsolidadas.hasOwnProperty(productoInventario)) {\n      const cantidadTotalVendida = ventasConsolidadas[productoInventario];\n      const stockActual = parseInt(itemInventario.json.STOCK_ACTUAL_UNIDADES) || 0;\n      const nuevoStock = stockActual - cantidadTotalVendida;\n      \n      console.log(`ð ${productoInventario}: ${stockActual} â ${nuevoStock} (vendido: ${cantidadTotalVendida})`);\n      \n      // ACTUALIZAR EL STOCK_ACTUAL_UNIDADES\n      nuevoItem.STOCK_ACTUAL_UNIDADES = nuevoStock;\n      \n      productosActualizados.push({\n        producto: productoInventario,\n        stockAnterior: stockActual,\n        cantidadVendida: cantidadTotalVendida,\n        stockNuevo: nuevoStock,\n        rowNumber: nuevoItem.row_number\n      });\n      \n      // Marcar como procesado\n      delete ventasConsolidadas[productoInventario];\n    }\n    \n    // Agregar el item (actualizado o no) al resultado\n    inventarioActualizado.push({ json: nuevoItem });\n  });\n\n  // 7. IDENTIFICAR PRODUCTOS DE VENTAS NO ENCONTRADOS EN INVENTARIO\n  Object.keys(ventasConsolidadas).forEach(producto => {\n    productosNoEncontrados.push({\n      producto: producto,\n      cantidadVendida: ventasConsolidadas[producto]\n    });\n  });\n\n  // 8. GENERAR REPORTE FINAL\n  console.log(`\\nð RESUMEN DE ACTUALIZACIÃN:`);\n  console.log(`   Total items inventario original: ${inventarioDataRaw.length}`);\n  console.log(`   Total items inventario deduplicado: ${inventarioData.length}`);\n  console.log(`   Productos actualizados: ${productosActualizados.length}`);\n  console.log(`   Productos no encontrados: ${productosNoEncontrados.length}`);\n  \n  if (productosActualizados.length > 0) {\n    console.log('\\nâ PRODUCTOS ACTUALIZADOS:');\n    productosActualizados.forEach(item => {\n      console.log(`   - ${item.producto} (fila ${item.rowNumber}): ${item.stockAnterior} â ${item.stockNuevo} (-${item.cantidadVendida})`);\n    });\n  }\n  \n  if (productosNoEncontrados.length > 0) {\n    console.log('\\nâ PRODUCTOS NO ENCONTRADOS EN INVENTARIO:');\n    productosNoEncontrados.forEach(item => {\n      console.log(`   - ${item.producto}: ${item.cantidadVendida} unidades`);\n    });\n  }\n\n  console.log('\\nð¤ Retornando inventario actualizado...');\n  \n  // Debug: Mostrar primera actualizaciÃ³n\n  if (inventarioActualizado.length > 0) {\n    console.log('ð Primer item actualizado:', JSON.stringify(inventarioActualizado[0].json, null, 2));\n  }\n\n  console.log('=== FIN: ACTUALIZAR INVENTARIO CON VENTAS ===');\n  \n  // 9. RETORNAR INVENTARIO ACTUALIZADO EN EL FORMATO CORRECTO\n  return inventarioActualizado;\n\n} catch (error) {\n  console.log('â ERROR GENERAL:', error.message);\n  console.log('ð Stack:', error.stack);\n  return [{ \n    json: { \n      ERROR: 'Error procesando inventario', \n      detalle: error.message,\n      stack: error.stack\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4384,
        304
      ],
      "id": "d6213bc1-f25f-41ea-998c-4fe4e2e71c07",
      "name": "Procesar_actualizacion_inventario"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "UNIDAD_MEDIDA": "={{ $json.UNIDAD_MEDIDA }}",
            "FACTOR_UNIDADES": "={{ $json.FACTOR_UNIDADES }}",
            "STOCK_ACTUAL_UNIDADES": "={{ $json.STOCK_ACTUAL_UNIDADES }}",
            "PRECIO_ULTIMA_COMPRA": "={{ $json.PRECIO_ULTIMA_COMPRA }}",
            "FECHA_ULTIMA_COMPRA": "={{ $json.FECHA_ULTIMA_COMPRA }}"
          },
          "matchingColumns": [
            "PRODUCTO"
          ],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UNIDAD_MEDIDA",
              "displayName": "UNIDAD_MEDIDA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FACTOR_UNIDADES",
              "displayName": "FACTOR_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "STOCK_ACTUAL_UNIDADES",
              "displayName": "STOCK_ACTUAL_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PRECIO_ULTIMA_COMPRA",
              "displayName": "PRECIO_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FECHA_ULTIMA_COMPRA",
              "displayName": "FECHA_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        4608,
        304
      ],
      "id": "1b0ada5f-d7ee-4438-b3ab-173d023047a7",
      "name": "Update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.final_message }}",
        "options": {
          "systemMessage": "=# Prompt Mejorado para ExtracciÃ³n de Inventario\n## Instrucciones Principales\nAnaliza el siguiente mensaje de compra para inventario y extrae la informaciÃ³n en formato JSON. Usa tu comprensiÃ³n contextual para interpretar mensajes informales o con errores tipogrÃ¡ficos.\n\n## Formato de Respuesta OBLIGATORIO\n```json\n{\n  \"cantidad\": [nÃºmero],\n  \"producto\": \"[nombre normalizado del producto]\",\n  \"unidad_medida\": \"[cajas|pacas|unidades|botellas|litros]\",\n  \"precio\": [nÃºmero total]\n}\n```\n\n## TÃRMINOS Y CONVERSIONES\n### Productos bÃ¡sicos:\n| Entrada | Salida exacta |\n|---------|---------------|\n| combo/combos | \"Chorizos\" + \"Arepas de queso\" (1 de cada uno) |\n| 2.5 | \"Gaseosas MEGA 2.5\" |\n| 350 | \"Gaseosas 350ml\" |\n| 250 | \"Gaseosas 250ml\" |\n| chorizo/chorizos | \"Chorizos\" |\n| arepa/arepas/arepas con queso | \"Arepas de queso\" |\n| mustang/lucky/luqui/luki/mosto/musta/mustang/lukis/must/most | \"Cigarrillos\" |\n| tinto/tintos | \"Tintos\" |\n\n### Casos especiales - NÃºmeros unidos:\n- **PatrÃ³n:** Cuando encuentres un nÃºmero de 4 dÃ­gitos donde los primeros dÃ­gitos representan cantidad y los Ãºltimos el tipo de gaseosa:\n  - \"3250\" o \"3 250\" = 3 \"Gaseosas 250ml\"\n  - \"2350\" o \"2 350\" = 2 \"Gaseosas 350ml\" \n  - \"4350\" o \"4 350\" = 4 \"Gaseosas 350ml\"\n  - \"5250\" o \"5 250\" = 5 \"Gaseosas 250ml\"\n\n- **PatrÃ³n con decimales:** Cuando encuentres nÃºmeros con formato X2.5:\n  - \"32.5\" o \"3 2.5\" = 3 \"Gaseosas MEGA 2.5\"\n  - \"22.5\" o \"2 2.5\" = 2 \"Gaseosas MEGA 2.5\"\n  - \"52.5\" o \"5 2.5\" = 5 \"Gaseosas MEGA 2.5\"\n\n## Reglas de ExtracciÃ³n\n### 1. Cantidad\n- Extrae el nÃºmero de unidades compradas\n- Si no se especifica, asume 1\n- Convierte palabras a nÃºmeros (ej: \"cinco\" â 5)\n\n### 2. Producto\n- Usa SOLO el nombre normalizado del catÃ¡logo (ver secciÃ³n TÃRMINOS Y CONVERSIONES)\n- NO incluyas \"cajas de\", \"pacas de\", etc.\n- Normaliza variaciones y errores tipogrÃ¡ficos\n- **IMPORTANTE**: Para combos, genera DOS entradas separadas: una para \"Chorizos\" y otra para \"Arepas de queso\"\n\n### 3. Unidad de Medida\n- Identifica cÃ³mo se vende: cajas, pacas, unidades, botellas, litros\n- Si no estÃ¡ claro, infiere del contexto del producto\n- Valores permitidos: \"cajas\", \"pacas\", \"unidades\", \"botellas\", \"litros\"\n\n### 4. Precio\n- Extrae el valor total pagado por toda la compra\n- Si hay mÃºltiples formatos de precio, usa el mÃ¡s especÃ­fico\n- Convierte a nÃºmero (sin sÃ­mbolos de moneda)\n\n## CatÃ¡logo de Productos Adicionales (Nombres Normalizados)\n| Variaciones en mensaje | Producto normalizado |\n|------------------------|---------------------|\n| \"coca cola 350\", \"coca 350\" | \"Coca cola 350ml\" |\n| \"4 2.5\", \"42.5\", \"4,2.5\", \"cuatro 2.5\" | \"Gaseosas MEGA 2.5\" |\n| \"4 350\", \"4350\", \"4,350\", \"cuatro 350\" | \"Gaseosas 350ml\" |\n| \"4 250\", \"4250\", \"4,250\", \"cuatro 250\" | \"Gaseosas 250ml\" |\n| \"agua\", \"botella agua\", \"botellas de agua\" | \"Botella Agua 600ml\" |\n\n\n## Ejemplos de Procesamiento\n**Entrada:** \"comprÃ© 3 cajas de 350 y 5 de 250\"\n**Salida (DOS entradas):** \n```json\n[\n  {\n    \"cantidad\": 3,\n    \"producto\": \"Gaseosas 350ml\",\n    \"unidad_medida\": \"cajas\",\n    \"precio\": 7500\n  },\n{\n  \"cantidad\": 5,\n  \"producto\": \"Gaseosas 250ml\",\n  \"unidad_medida\": \"cajas\",\n  \"precio\": 180000\n}\n\n```\n\n**Entrada:** \"5 cajas de 250\"\n**Salida:** \n```json\n{\n  \"cantidad\": 5,\n  \"producto\": \"Gaseosas 250ml\",\n  \"unidad_medida\": \"cajas\",\n  \"precio\": 180000\n}\n```\n\n**Entrada:** \"32.5 por 85000\"\n**Salida:**\n```json\n{\n  \"cantidad\": 3,\n  \"producto\": \"Gaseosas MEGA 2.5\",\n  \"unidad_medida\": \"unidades\",\n  \"precio\": 85000\n}\n```\n\n**Entrada:** \"2 mustang y 3 tintos\"\n**Salida (DOS entradas):**\n```json\n[\n  {\n    \"cantidad\": 2,\n    \"producto\": \"Cigarrillos\",\n    \"unidad_medida\": \"unidades\",\n    \"precio\": 0\n  },\n  {\n    \"cantidad\": 3,\n    \"producto\": \"Tintos\",\n    \"unidad_medida\": \"unidades\",\n    \"precio\": 0\n  }\n]\n```\n\n## Manejo de Casos Especiales\n1. **Combos**: Siempre generar DOS entradas separadas con la cantidad dividida proportionalmente\n2. **Mensajes ambiguos**: Usa la interpretaciÃ³n mÃ¡s lÃ³gica basada en el contexto\n3. **MÃºltiples productos**: Procesa TODOS los productos mencionados\n4. **Errores tipogrÃ¡ficos**: Usa coincidencia aproximada con el catÃ¡logo\n5. **InformaciÃ³n faltante**: \n   - Cantidad faltante â 1\n   - Unidad faltante â \"unidades\"\n   - Precio faltante â 0\n\n## Mensaje a Procesar:\n{{ $json.final_message }}\n\n---\n**IMPORTANTE**: \n- Responde ÃNICAMENTE con el JSON vÃ¡lido, sin explicaciones adicionales\n- Para combos, siempre devolver un array con dos objetos\n- Para mÃºltiples productos, devolver un array con todos los productos\n- Devuelve las variables del json en MAYUSCULAS"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2912,
        592
      ],
      "id": "2ea481cf-e6b8-49af-a086-e858ed167f06",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2992,
        816
      ],
      "id": "9730dd38-941a-4670-bc20-f286c58c7388",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Capturamos la respuesta de Gemini y limpiamos\nlet respuestaGemini = String($input.first().json.output || '').trim();\nrespuestaGemini = respuestaGemini.replace(/```json\\n?/g, '').replace(/\\n?```/g, '').trim();\n\n// Parseamos el JSON\nlet datosExtraidos;\ntry {\n  datosExtraidos = JSON.parse(respuestaGemini);\n} catch (error) {\n  return [{ json: { error: \"No se pudo procesar la respuesta de Gemini\" } }];\n}\n\n// ======= NUEVA LÃGICA: PROCESAR TODOS LOS PRODUCTOS =======\nlet productosAProcesar = [];\n\n// Verificamos si es un array o un objeto Ãºnico\nif (Array.isArray(datosExtraidos)) {\n  // Es un array, procesar todos los elementos\n  productosAProcesar = datosExtraidos;\n  console.log(`ð¦ Procesando ${datosExtraidos.length} productos del array`);\n} else {\n  // Es un objeto Ãºnico, convertir a array\n  productosAProcesar = [datosExtraidos];\n  console.log(`ð¦ Procesando 1 producto Ãºnico`);\n}\n\n// Array para almacenar todos los resultados\nconst resultados = [];\n\n// Procesar cada producto individualmente\nproductosAProcesar.forEach((itemData, index) => {\n  console.log(`ð Procesando producto ${index + 1}: ${itemData.PRODUCTO}`);\n  \n  // Preparamos los datos y validamos\n  const fila = {\n    PRODUCTO: itemData.PRODUCTO,\n    UNIDAD_MEDIDA: itemData.UNIDAD_MEDIDA || \"\",\n    CANTIDAD: parseFloat(itemData.CANTIDAD),\n    PRECIO: parseFloat(itemData.PRECIO || 0),\n    FECHA: new Date().toLocaleString('es-CO', { timeZone: 'America/Bogota' }),\n    errores: []\n  };\n  \n  // Validaciones especÃ­ficas para cada producto\n  if (!fila.PRODUCTO || fila.PRODUCTO === \"\" || fila.PRODUCTO === \"null\") {\n    fila.errores.push(\"â No se pudo identificar el PRODUCTO\");\n  }\n  if (!fila.CANTIDAD || fila.CANTIDAD <= 0 || isNaN(fila.CANTIDAD)) {\n    fila.errores.push(\"â La CANTIDAD debe ser mayor a 0\");\n  }\n  \n  // Agregar este producto al array de resultados\n  resultados.push({ json: fila });\n  \n  // Log del resultado\n  if (fila.errores.length === 0) {\n    console.log(`â Producto ${index + 1} procesado: ${fila.PRODUCTO} - ${fila.CANTIDAD} ${fila.UNIDAD_MEDIDA}`);\n  } else {\n    console.log(`â Producto ${index + 1} con errores: ${fila.errores.join(', ')}`);\n  }\n});\n\n// Log final\nconsole.log(`ð Resumen: ${resultados.length} productos procesados`);\n\n// Retornar TODOS los productos procesados\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3264,
        688
      ],
      "id": "e5ce38a0-68ee-442c-8613-b32b56048cea",
      "name": "Code4"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "UNIDAD_MEDIDA": "={{ $json.UNIDAD_MEDIDA }}",
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "FECHA_ULTIMA_COMPRA": "={{ $json.FECHA_ULTIMA_COMPRA }}",
            "STOCK_ACTUAL_UNIDADES": "={{ $json.STOCK_ACTUAL_UNIDADES }}",
            "PRECIO_ULTIMA_COMPRA": "={{ $json.PRECIO_ULTIMA_COMPRA }}",
            "FACTOR_UNIDADES": "={{ $json.FACTOR_UNIDADES }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UNIDAD_MEDIDA",
              "displayName": "UNIDAD_MEDIDA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FACTOR_UNIDADES",
              "displayName": "FACTOR_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "STOCK_ACTUAL_UNIDADES",
              "displayName": "STOCK_ACTUAL_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PRECIO_ULTIMA_COMPRA",
              "displayName": "PRECIO_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "FECHA_ULTIMA_COMPRA",
              "displayName": "FECHA_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        4384,
        496
      ],
      "id": "04ab049a-ce3e-4555-9a9d-18f754919cb9",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1ea02d28-be6d-4d61-9128-3f99310bc6bb",
              "name": "Body",
              "value": "=â Ingreso de nuevo producto exitoso\nSe ha registrado en el inventario el ingreso de {{ $('Procesar_compra').item.json.CANTIDAD }} {{ $json.UNIDAD_MEDIDA }} de {{ $json.PRODUCTO }}\n ",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4608,
        496
      ],
      "id": "c6d39811-d82a-42fa-ba2e-da2fddf62cb0",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "52ba995c-4cc3-4773-a7d4-ed5791a2feb6",
              "leftValue": "={{ $json.errores }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3488,
        688
      ],
      "id": "721281c1-4bc3-460c-880b-8fee18734900",
      "name": "Procesar_compra"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "PRODUCTO",
              "lookupValue": "={{ $json.PRODUCTO }}"
            }
          ]
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:F"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3712,
        688
      ],
      "id": "feb63824-12bf-44ea-b778-df644e925a14",
      "name": "Consultar_Inventario",
      "alwaysOutputData": true,
      "retryOnFail": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Diccionario de factores por producto (normalizado a minÃºsculas)\nconst factores = {\n  \"cerveza poker en botella 330ml\": 30,\n  \"cerveza aguila en botella 330ml\": 30,\n  \"gaseosa manzana postobon 350ml\": 24,\n  \"botella agua 600ml\": 20,\n  \"coca cola 350ml\": 24,\n  \"gaseosa quatro 2.5 lts\": 8,\n  \"gaseosa quatro 350ml\": 24,\n  \"gaseosa quatro 250ml\": 24,\n  \"de todito\": 15,\n  \"aguardiente llanero por botella\": 12,\n  \"aguardiente llanero por 1/2\": 12\n};\n\ntry {\n  // ======= OBTENER DATOS DE MÃLTIPLES COMPRAS =======\n  const comprasData = $(\"Procesar_compra\").all();\n  console.log(`ð¦ Procesando ${comprasData.length} compras`);\n  \n  // ValidaciÃ³n inicial\n  if (!comprasData || comprasData.length === 0) {\n    throw new Error(\"No hay datos de compras para procesar\");\n  }\n  \n  // ======= OBTENER INVENTARIO ACTUAL =======\n  const inventarioItems = $input.all(); // Todos los items del inventario\n  console.log(`ð Items de inventario disponibles: ${inventarioItems.length}`);\n  \n  // Crear un mapa del inventario por producto para bÃºsqueda rÃ¡pida\n  const inventarioMap = {};\n  inventarioItems.forEach(item => {\n    if (item.json && item.json.PRODUCTO) {\n      const producto = item.json.PRODUCTO.trim();\n      inventarioMap[producto] = item.json;\n    }\n  });\n  \n  console.log(`ð Productos en inventario:`, Object.keys(inventarioMap));\n  \n  // ======= PROCESAR CADA COMPRA INDIVIDUALMENTE =======\n  const resultados = [];\n  \n  comprasData.forEach((compraItem, index) => {\n    try {\n      const compra = compraItem.json;\n      console.log(`\\nð Procesando compra ${index + 1}: ${compra.PRODUCTO}`);\n      \n      // ValidaciÃ³n de datos de compra\n      if (!compra || !compra.PRODUCTO) {\n        throw new Error(`Compra ${index + 1}: Datos invÃ¡lidos - falta informaciÃ³n del producto`);\n      }\n      \n      // Buscar este producto especÃ­fico en el inventario\n      const producto = compra.PRODUCTO.trim();\n      const inventario = inventarioMap[producto] || {}; // Buscar por nombre exacto\n      const productoExiste = inventario.PRODUCTO ? true : false;\n      \n      console.log(`   ð Producto: ${producto}`);\n      console.log(`   ð Existe en inventario: ${productoExiste}`);\n      \n      // Procesar datos del producto\n      const productoLower = producto.toLowerCase();\n      const cantidadCompra = Number(compra.CANTIDAD) || 0;\n      const precioCompra = Number(compra.PRECIO) || 0;\n      \n      // Validaciones adicionales\n      if (cantidadCompra <= 0) {\n        throw new Error(`${producto}: La cantidad debe ser mayor a 0`);\n      }\n      \n      if (precioCompra < 0) {\n        throw new Error(`${producto}: El precio no puede ser negativo`);\n      }\n      \n      // Factor de unidades (primero buscar en diccionario, luego en inventario)\n      const factorUnidades = factores[productoLower] || Number(inventario.FACTOR_UNIDADES) || 1;\n      \n      // Stock actual\n      const stockActual = Number(inventario.STOCK_ACTUAL_UNIDADES) || 0;\n      \n      // Calcular unidades ingresadas\n      const unidadesIngresadas = cantidadCompra * factorUnidades;\n      \n      // Calcular nuevo stock\n      const nuevoStock = stockActual + unidadesIngresadas;\n      \n      // Fecha actual en zona horaria de Colombia\n      const fechaActual = new Date().toLocaleString('es-CO', { \n        timeZone: 'America/Bogota',\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n      \n      // Determinar acciÃ³n\n      const accion = stockActual === 0 ? \"crear\" : \"actualizar\";\n      \n      // Log del procesamiento\n      console.log(`   ð Stock: ${stockActual} â ${nuevoStock} (+${unidadesIngresadas})`);\n      console.log(`   ð§ Factor: ${factorUnidades} | AcciÃ³n: ${accion}`);\n      \n      // Crear resultado para este producto\n      const resultado = {\n        json: {\n          PRODUCTO: producto,\n          UNIDAD_MEDIDA: compra.UNIDAD_MEDIDA || \"cajas\",\n          FACTOR_UNIDADES: factorUnidades,\n          CANTIDAD: cantidadCompra,\n          STOCK_ACTUAL_UNIDADES: nuevoStock,\n          PRECIO_ULTIMA_COMPRA: precioCompra,\n          FECHA_ULTIMA_COMPRA: fechaActual,\n          UNIDADES_INGRESADAS: unidadesIngresadas,\n          STOCK_ANTERIOR: stockActual,\n          accion: accion,\n          // Campos adicionales para tracking\n          row_number: inventario.row_number || null,\n          procesado_en_lote: true,\n          indice_compra: index + 1\n        }\n      };\n      \n      resultados.push(resultado);\n      console.log(`   â Producto procesado exitosamente`);\n      \n    } catch (error) {\n      console.error(`   â Error procesando compra ${index + 1}:`, error.message);\n      \n      // Agregar resultado de error para este producto especÃ­fico\n      resultados.push({\n        json: {\n          error: true,\n          mensaje: error.message,\n          producto_con_error: compraItem.json?.PRODUCTO || 'Desconocido',\n          indice_compra: index + 1,\n          timestamp: new Date().toISOString()\n        }\n      });\n    }\n  });\n  \n  // ======= RESUMEN FINAL =======\n  const exitosos = resultados.filter(r => !r.json.error).length;\n  const conError = resultados.filter(r => r.json.error).length;\n  \n  console.log(`\\nð RESUMEN FINAL:`);\n  console.log(`   Total compras: ${comprasData.length}`);\n  console.log(`   Procesadas exitosamente: ${exitosos}`);\n  console.log(`   Con errores: ${conError}`);\n  \n  // Retornar TODOS los resultados\n  return resultados;\n  \n} catch (error) {\n  console.error(\"â Error general procesando compras:\", error.message);\n  \n  // Retornar error estructurado general\n  return [{\n    json: {\n      error: true,\n      mensaje: `Error general: ${error.message}`,\n      tipo_error: \"error_general\",\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3936,
        688
      ],
      "id": "c1443ae6-6e08-45c8-a401-f29cfe1c4347",
      "name": "Calcular_Stock",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.accion }}",
                    "rightValue": "crear",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "83998a57-c5a0-4498-b92a-823c9730b6a0"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "crear_producto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cc08f081-51a5-4153-8c7a-711502a7a88b",
                    "leftValue": "={{ $json.accion }}",
                    "rightValue": "actualizar",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "actualizar"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        4160,
        688
      ],
      "id": "b857c698-d125-4a6d-93ac-36edbd8dc636",
      "name": "Decidir_Accion"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "UNIDAD_MEDIDA": "={{ $json.UNIDAD_MEDIDA }}",
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "FECHA_ULTIMA_COMPRA": "={{ $json.FECHA_ULTIMA_COMPRA }}",
            "STOCK_ACTUAL_UNIDADES": "={{ $json.STOCK_ACTUAL_UNIDADES }}",
            "PRECIO_ULTIMA_COMPRA": "={{ $json.PRECIO_ULTIMA_COMPRA }}",
            "FACTOR_UNIDADES": "={{ $json.FACTOR_UNIDADES }}"
          },
          "matchingColumns": [
            "PRODUCTO"
          ],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UNIDAD_MEDIDA",
              "displayName": "UNIDAD_MEDIDA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FACTOR_UNIDADES",
              "displayName": "FACTOR_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "STOCK_ACTUAL_UNIDADES",
              "displayName": "STOCK_ACTUAL_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PRECIO_ULTIMA_COMPRA",
              "displayName": "PRECIO_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "FECHA_ULTIMA_COMPRA",
              "displayName": "FECHA_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        4384,
        944
      ],
      "id": "5b50b2fd-b0f9-434f-98b4-c36d8ad7ad08",
      "name": "Update row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a43847d7-9c88-495e-b01a-9dc87dac721e",
              "name": "final_message",
              "value": "={{ $('Code2').item.json.final_message }}",
              "type": "string"
            },
            {
              "id": "2655e097-412c-4299-9410-7ca616088ba0",
              "name": "sessionid",
              "value": "={{ $('Code2').item.json.sessionid }}",
              "type": "string"
            },
            {
              "id": "f29ed700-e3b7-42c0-a963-78aa19163346",
              "name": "datetime",
              "value": "={{ $('Code2').item.json.datetime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2624,
        688
      ],
      "id": "e39b08da-2f8b-42db-b464-8387b6b8795d",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "759449937248855",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').first().json.contacts[0].wa_id }}",
        "textBody": "={{ $json.mensaje }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        4832,
        496
      ],
      "id": "a1c3a409-504e-4a7d-aab2-23c257dce841",
      "name": "Send message4",
      "webhookId": "e13ce16f-101b-400c-a117-3bb8f7cd46de",
      "credentials": {
        "whatsAppApi": {
          "id": "4Gtz5w2nlTfskWBb",
          "name": "WhatsApp account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// CÃ³digo para generar mensaje de confirmaciÃ³n de inventario\n// USAR DATOS DE CALCULAR_STOCK (que estÃ¡n completos)\nconst inputData = $('Calcular_Stock').all();\n\n// FunciÃ³n para formatear nÃºmeros con separadores de miles\nfunction formatearNumero(numero) {\n  return new Intl.NumberFormat('es-CO').format(numero);\n}\n\n// FunciÃ³n para formatear precios\nfunction formatearPrecio(precio) {\n  if (precio === 0 || precio === null || precio === undefined) {\n    return \"No registrado\";\n  }\n  return \"$\" + formatearNumero(precio);\n}\n\n// FunciÃ³n para manejar singular/plural de unidades de medida\nfunction pluralizar(cantidad, unidad) {\n  const cantidadNum = parseInt(cantidad);\n  \n  if (cantidadNum === 1) {\n    // Convertir a singular\n    if (unidad === \"cajas\") return \"caja\";\n    if (unidad === \"pacas\") return \"paca\";\n    if (unidad === \"unidades\") return \"unidad\";\n    if (unidad === \"botellas\") return \"botella\";\n    if (unidad === \"litros\") return \"litro\";\n    return unidad; // Si no coincide, devolver original\n  }\n  \n  return unidad; // Plural (original)\n}\n\n// Procesar los datos\nconst productos = [];\nlet totalProductosActualizados = 0;\nlet totalUnidadesIngresadas = 0;\n\ninputData.forEach((item, index) => {\n  // Los datos vienen directamente en item.json desde Calcular_Stock\n  const data = item.json;\n  \n  // Verificar si hay errores\n  if (data.error) {\n    productos.push({\n      nombre: data.producto_con_error || \"Producto desconocido\",\n      error: data.mensaje,\n      esError: true\n    });\n    return;\n  }\n  \n  // Extraer valores (ahora directamente, ya que sabemos que estÃ¡n disponibles)\n  const cantidad = parseInt(data.CANTIDAD);\n  const stockAnterior = parseInt(data.STOCK_ANTERIOR);\n  const stockNuevo = parseInt(data.STOCK_ACTUAL_UNIDADES);\n  const unidadesIngresadas = parseInt(data.UNIDADES_INGRESADAS);\n  const precio = parseFloat(data.PRECIO_ULTIMA_COMPRA) || 0;\n  const producto = data.PRODUCTO;\n  const unidadMedida = data.UNIDAD_MEDIDA;\n  \n  // Procesar producto exitoso\n  const unidadFormateada = pluralizar(cantidad, unidadMedida);\n  \n  productos.push({\n    nombre: producto,\n    cantidad: cantidad,\n    unidad: unidadFormateada,\n    stockAnterior: stockAnterior,\n    stockNuevo: stockNuevo,\n    unidadesIngresadas: unidadesIngresadas,\n    factor: parseInt(data.FACTOR_UNIDADES),\n    precio: precio,\n    accion: data.accion,\n    esError: false\n  });\n  \n  totalProductosActualizados++;\n  totalUnidadesIngresadas += unidadesIngresadas;\n});\n\n// Generar mensaje de confirmaciÃ³n\nlet mensaje = \"\";\n\n// --- INICIO DE LOS CAMBIOS ---\n// Mensaje para cuando no hay productos que procesar\nif (productos.length === 0) {\n  mensaje = \"â ï¸ El inventario no tiene productos para procesar.\";\n} else {\n  // Encabezado con nuevo formato\n  mensaje += \"â *Informe de actualizaciÃ³n de inventario*\\n\";\n  mensaje += `ð ${new Date().toLocaleDateString('es-CO', { \n    timeZone: 'America/Bogota',\n    weekday: 'long',\n    year: 'numeric', \n    month: 'long', \n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  })}`.replace(/^\\w/, c => c.toUpperCase()) + \"\\n\\n\";\n  \n  // Listar productos en formato mÃ¡s detallado\n  mensaje += \"*Detalles de los productos procesados:*\\n\\n\";\n  \n  productos.forEach((producto, index) => {\n    if (producto.esError) {\n      mensaje += `â *${producto.nombre}* - Error: ${producto.error}\\n`;\n    } else {\n      mensaje += `ð¦ *${producto.nombre}*:\\n`;\n      mensaje += `- Cantidad: ${producto.cantidad} ${producto.unidad}\\n`;\n      mensaje += `- Nuevo stock: ${formatearNumero(producto.stockNuevo)} unidades\\n\\n`;\n    }\n  });\n}\n// --- FIN DE LOS CAMBIOS ---\n\n// Crear versiÃ³n de texto plano (sin markdown)\nlet mensajeTextoPlano = mensaje\n  .replace(/\\*/g, \"\") // Quitar asteriscos de markdown\n  .replace(/â/g, \"-\"); // Reemplazar caracteres especiales\n\n// Retornar resultado\nconst resultado = {\n  json: {\n    mensaje_html: mensaje, // Con formato markdown para Telegram\n    mensaje_texto: mensajeTextoPlano, // Texto plano\n    parse_mode: \"Markdown\", // Para Telegram\n    total_productos: productos.length,\n    productos_exitosos: totalProductosActualizados,\n    productos_con_error: productos.filter(p => p.esError).length,\n    total_unidades_ingresadas: totalUnidadesIngresadas,\n    fecha_procesamiento: new Date().toISOString(),\n    resumen_productos: productos,\n    tipo_operacion: \"actualizacion_inventario\"\n  }\n};\n\nconsole.log(`ð Mensaje de confirmaciÃ³n generado:`);\nconsole.log(`   - Productos procesados: ${productos.length}`);\nconsole.log(`   - Productos exitosos: ${totalProductosActualizados}`);\nconsole.log(`   - Total unidades: ${totalUnidadesIngresadas}`);\n\nreturn [resultado];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4608,
        944
      ],
      "id": "580639d1-6ab5-4bb5-b594-cd59774c3e01",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// ===== MENSAJE MEJORADO CON UNIDADES VENDIDAS Y STOCK ACTUAL =====\nconsole.log('=== GENERANDO REPORTE DE VENTAS CON INVENTARIO ===');\n\ntry {\nÂ  // Obtener datos de ventas\nÂ  const fechaObjetivo = $('Interpretar_mensaje').item.json.fechaInicio;\nÂ  const todasLasVentas = $('ventas_solicitadas').all();\nÂ Â \nÂ  console.log(\"Generando resumen para fecha: \" + fechaObjetivo);\nÂ  console.log(\"Total ventas obtenidas:\", todasLasVentas.length);\n\nÂ  // ===== OBTENER INVENTARIO ACTUAL (SIN DUPLICADOS) =====\nÂ  let inventarioActual = {};\nÂ  try {\nÂ  Â  console.log(\"Obteniendo inventario desde nodo 'obtener_inventario' (ya sin duplicados)...\");\nÂ  Â Â \nÂ  Â  // Obtener datos desde el nodo Remove Duplicates\nÂ  Â  const inventarioData = $('obtener_inventario').all();\nÂ  Â  console.log(\"Datos de inventario Ãºnicos obtenidos:\", inventarioData.length, \"registros\");\nÂ  Â Â \nÂ  Â  // Procesar cada registro de inventario (ahora sin duplicados)\nÂ  Â  inventarioData.forEach((item, index) => {\nÂ  Â  Â  try {\nÂ  Â  Â  Â  // Extraer datos del item\nÂ  Â  Â  Â  const registro = item.json || item;\nÂ  Â  Â  Â Â \nÂ  Â  Â  Â  const producto = registro.PRODUCTO || registro.producto;\nÂ  Â  Â  Â  const stockRaw = registro.STOCK_ACTUAL_UNIDADES || registro.stock_actual_unidades;\nÂ  Â  Â  Â  const stock = parseInt(stockRaw) || 0;\nÂ  Â  Â  Â Â \nÂ  Â  Â  Â  if (producto && producto.trim() !== '') {\nÂ  Â  Â  Â  Â  inventarioActual[producto.trim()] = stock;\nÂ  Â  Â  Â  Â  console.log(`â Inventario: ${producto} = ${stock} unidades`);\nÂ  Â  Â  Â  } else {\nÂ  Â  Â  Â  Â  console.log(`â ï¸ Registro ${index} sin nombre de producto vÃ¡lido:`, registro);\nÂ  Â  Â  Â  }\nÂ  Â  Â  } catch (itemError) {\nÂ  Â  Â  Â  console.log(`â Error procesando registro ${index}:`, itemError.message);\nÂ  Â  Â  }\nÂ  Â  });\nÂ  Â Â \nÂ  Â  console.log(\"ð Inventario procesado exitosamente:\");\nÂ  Â  console.log(`Â  Â â¢ Productos Ãºnicos: ${Object.keys(inventarioActual).length}`);\nÂ  Â  console.log(`Â  Â â¢ Productos con stock > 0: ${Object.values(inventarioActual).filter(stock => stock > 0).length}`);\nÂ  Â  console.log(`Â  Â â¢ Productos sin stock: ${Object.values(inventarioActual).filter(stock => stock === 0).length}`);\nÂ  Â Â \nÂ  } catch (error) {\nÂ  Â  console.log(\"â Error obteniendo inventario desde nodo:\", error.message);\nÂ  Â  console.log(\"ð Continuando sin datos de inventario...\");\nÂ  }\n\nÂ  // ===== FUNCIONES AUXILIARES =====\nÂ Â \nÂ  // FunciÃ³n para normalizar fechas a formato DD-MM-YYYY\nÂ  function normalizarFecha(fecha) {\nÂ  Â  if (!fecha) return null;\nÂ  Â Â \nÂ  Â  // Si ya estÃ¡ en formato DD-MM-YYYY\nÂ  Â  if (typeof fecha === 'string' && fecha.match(/^\\d{1,2}-\\d{1,2}-\\d{4}$/)) {\nÂ  Â  Â  const partes = fecha.split('-');\nÂ  Â  Â  const dia = partes[0];\nÂ  Â  Â  const mes = partes[1];\nÂ  Â  Â  const aÃ±o = partes[2];\nÂ  Â  Â  return dia.padStart(2, '0') + '-' + mes.padStart(2, '0') + '-' + aÃ±o;\nÂ  Â  }\nÂ  Â Â \nÂ  Â  // Si viene en formato \"24/8/2025, 8:27:04 p. m.\"\nÂ  Â  if (typeof fecha === 'string' && fecha.includes('/')) {\nÂ  Â  Â  try {\nÂ  Â  Â  Â  const partesFecha = fecha.split(',')[0].trim();\nÂ  Â  Â  Â  const partes = partesFecha.split('/');\nÂ  Â  Â  Â  const dia = partes[0];\nÂ  Â  Â  Â  const mes = partes[1];\nÂ  Â  Â  Â  const aÃ±o = partes[2];\nÂ  Â  Â  Â  return dia.padStart(2, '0') + '-' + mes.padStart(2, '0') + '-' + aÃ±o;\nÂ  Â  Â  } catch (error) {\nÂ  Â  Â  Â  return null;\nÂ  Â  Â  }\nÂ  Â  }\nÂ  Â Â \nÂ  Â  return null;\nÂ  }\n\nÂ  // FunciÃ³n para formatear nÃºmeros con separadores de miles\nÂ  function formatearNumero(valor) {\nÂ  Â  return new Intl.NumberFormat('es-CO').format(valor);\nÂ  }\n\nÂ  function formatearPeso(valor) {\nÂ  Â  return '$' + formatearNumero(valor);\nÂ  }\n\nÂ  // FunciÃ³n para obtener dÃ­a de la semana en espaÃ±ol\nÂ  function obtenerDiaSemana(fecha) {\nÂ  Â  const partes = fecha.split('-');\nÂ  Â  const dia = partes[0];\nÂ  Â  const mes = partes[1];\nÂ  Â  const aÃ±o = partes[2];\nÂ  Â  const fechaObj = new Date(aÃ±o, mes - 1, dia);\nÂ  Â  const dias = ['Domingo', 'Lunes', 'Martes', 'MiÃ©rcoles', 'Jueves', 'Viernes', 'SÃ¡bado'];\nÂ  Â  return dias[fechaObj.getDay()];\nÂ  }\n\nÂ  // FunciÃ³n para fecha legible corta\nÂ  function fechaLegibleCorta(fecha) {\nÂ  Â  const partes = fecha.split('-');\nÂ  Â  const dia = partes[0];\nÂ  Â  const mes = partes[1];\nÂ  Â  return dia + '/' + mes;\nÂ  }\n\nÂ  // FunciÃ³n para convertir fecha a formato legible\nÂ  function fechaLegible(fecha) {\nÂ  Â  const partes = fecha.split('-');\nÂ  Â  const dia = partes[0];\nÂ  Â  const mes = partes[1];\nÂ  Â  const aÃ±o = partes[2];\nÂ  Â  const meses = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',\nÂ  Â  Â  Â  Â  Â  Â  Â  Â  Â 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];\nÂ  Â  const diaSemana = obtenerDiaSemana(fecha);\nÂ  Â  const diaCapitalizado = diaSemana.charAt(0).toUpperCase() + diaSemana.slice(1);\nÂ  Â  return diaCapitalizado + ', ' + parseInt(dia) + ' de ' + meses[parseInt(mes)-1] + ' de ' + aÃ±o;\nÂ  }\n\nÂ  // ===== PROCESAMIENTO DE VENTAS =====\nÂ Â \nÂ  // Obtener el tipo de consulta y fechas\nÂ  const tipoConsulta = $('Interpretar_mensaje').item.json.queryType;\nÂ  const fechaInicio = $('Interpretar_mensaje').item.json.fechaInicio;\nÂ  const fechaFin = $('Interpretar_mensaje').item.json.fechaFin;\n\nÂ  // Filtrar ventas por fecha\nÂ  const fechaInicioNormalizada = normalizarFecha(fechaInicio);\nÂ  const fechaFinNormalizada = normalizarFecha(fechaFin);\n\nÂ  console.log(\"ðï¸ Filtrando ventas desde: \" + fechaInicioNormalizada + \" hasta: \" + fechaFinNormalizada);\nÂ Â \nÂ  let ventasFiltradas = [];\n\nÂ  for (let i = 0; i < todasLasVentas.length; i++) {\nÂ  Â  const venta = todasLasVentas[i].json;\nÂ  Â  const fechaVenta = venta.FECHA;\nÂ  Â Â \nÂ  Â  if (fechaVenta) {\nÂ  Â  Â  const fechaVentaNormalizada = normalizarFecha(fechaVenta);\nÂ  Â  Â Â \nÂ  Â  Â  // Comparar si la fecha estÃ¡ en el rango\nÂ  Â  Â  if (fechaVentaNormalizada >= fechaInicioNormalizada && fechaVentaNormalizada <= fechaFinNormalizada) {\nÂ  Â  Â  Â  ventasFiltradas.push(venta);\nÂ  Â  Â  }\nÂ  Â  }\nÂ  }\n\nÂ  console.log(\"ð Ventas filtradas:\", ventasFiltradas.length);\n\nÂ  // ===== FUNCIÃN MEJORADA PARA BUSCAR STOCK =====\nÂ  function buscarStockProducto(nombreProducto) {\nÂ  Â  if (!nombreProducto) return 0;\nÂ  Â Â \nÂ  Â  const nombreLimpio = nombreProducto.trim().toLowerCase();\nÂ  Â Â \nÂ  Â  // 1. BÃºsqueda exacta (mÃ¡s eficiente)\nÂ  Â  for (const [producto, stock] of Object.entries(inventarioActual)) {\nÂ  Â  Â  if (producto.toLowerCase() === nombreLimpio) {\nÂ  Â  Â  Â  console.log(`ð¯ Coincidencia exacta: \"${nombreProducto}\" = ${stock} unidades`);\nÂ  Â  Â  Â  return stock;\nÂ  Â  Â  }\nÂ  Â  }\nÂ  Â Â \nÂ  Â  // 2. BÃºsqueda por coincidencia parcial\nÂ  Â  for (const [producto, stock] of Object.entries(inventarioActual)) {\nÂ  Â  Â  const productoLimpio = producto.toLowerCase();\nÂ  Â  Â Â \nÂ  Â  Â  // Buscar coincidencias de palabras\nÂ  Â  Â  const palabrasInventario = productoLimpio.split(' ');\nÂ  Â  Â  const palabrasVenta = nombreLimpio.split(' ');\nÂ  Â  Â Â \nÂ  Â  Â  const coincidencias = palabrasInventario.filter(palabra =>Â \nÂ  Â  Â  Â  palabrasVenta.some(palabraVenta =>Â \nÂ  Â  Â  Â  Â  palabraVenta.includes(palabra) || palabra.includes(palabraVenta)\nÂ  Â  Â  Â  )\nÂ  Â  Â  );\nÂ  Â  Â Â \nÂ  Â  Â  if (coincidencias.length > 0) {\nÂ  Â  Â  Â  console.log(`ð Coincidencia parcial: \"${nombreProducto}\" -> \"${producto}\" (${stock} unidades)`);\nÂ  Â  Â  Â  return stock;\nÂ  Â  Â  }\nÂ  Â  }\nÂ  Â Â \nÂ  Â  console.log(`â Sin coincidencia de stock para: \"${nombreProducto}\"`);\nÂ  Â  return 0; // No se encontrÃ³ coincidencia\nÂ  }\n\nÂ  // ===== PROCESAR DATOS CON INVENTARIO =====\nÂ  let resumenProductos = {};\nÂ  let resumenPorDia = {};Â \nÂ  let valorTotalGeneral = 0;\nÂ  let costoTotalGeneral = 0;\nÂ  let utilidadTotalGeneral = 0;\nÂ  let cantidadTotalProductos = 0;\n\nÂ  ventasFiltradas.forEach(function(venta) {\nÂ  Â  const producto = venta.PRODUCTO;\nÂ  Â  const cantidad = parseInt(venta.CANTIDAD) || 0;\nÂ  Â  const valorUnitario = parseFloat(venta.VALOR_UNITARIO) || 0;\nÂ  Â  const costo = parseFloat(venta.COSTO) || 0;\nÂ  Â  const valorTotal = parseFloat(venta.VALOR_TOTAL) || 0;\nÂ  Â  const fechaVenta = normalizarFecha(venta.FECHA);\nÂ  Â Â \nÂ  Â  // Calcular costo total y utilidad total del item\nÂ  Â  const costoTotal = cantidad * costo;\nÂ  Â  const utilidadTotal = cantidad * (valorUnitario - costo);\nÂ  Â Â \nÂ  Â  // Agrupar por productos\nÂ  Â  if (!resumenProductos[producto]) {\nÂ  Â  Â  const stockActual = buscarStockProducto(producto);\nÂ  Â  Â Â \nÂ  Â  Â  resumenProductos[producto] = {\nÂ  Â  Â  Â  cantidad: 0,\nÂ  Â  Â  Â  valorTotal: 0,\nÂ  Â  Â  Â  costoTotal: 0,\nÂ  Â  Â  Â  utilidadTotal: 0,\nÂ  Â  Â  Â  stockActual: stockActual\nÂ  Â  Â  };\nÂ  Â  }\nÂ  Â Â \nÂ  Â  resumenProductos[producto].cantidad += cantidad;\nÂ  Â  resumenProductos[producto].valorTotal += valorTotal;\nÂ  Â  resumenProductos[producto].costoTotal += costoTotal;\nÂ  Â  resumenProductos[producto].utilidadTotal += utilidadTotal;\nÂ  Â Â \nÂ  Â  // Agrupar por dÃ­a para reporte semanal\nÂ  Â  if (!resumenPorDia[fechaVenta]) {\nÂ  Â  Â  resumenPorDia[fechaVenta] = {\nÂ  Â  Â  Â  valorTotal: 0,\nÂ  Â  Â  Â  costoTotal: 0,\nÂ  Â  Â  Â  utilidadTotal: 0\nÂ  Â  Â  };\nÂ  Â  }\nÂ  Â  resumenPorDia[fechaVenta].valorTotal += valorTotal;\nÂ  Â  resumenPorDia[fechaVenta].costoTotal += costoTotal;\nÂ  Â  resumenPorDia[fechaVenta].utilidadTotal += utilidadTotal;\nÂ  Â Â \nÂ  Â  valorTotalGeneral += valorTotal;\nÂ  Â  costoTotalGeneral += costoTotal;\nÂ  Â  utilidadTotalGeneral += utilidadTotal;\nÂ  Â  cantidadTotalProductos += cantidad;\nÂ  });\n\nÂ  // ===== GENERAR MENSAJE FINAL CON INVENTARIO COMPLETO =====\nÂ  let mensajeTexto = '';\n\nÂ  if (ventasFiltradas.length === 0) {\nÂ  Â  // Sin ventas - INCLUIR INVENTARIO COMPLETO\nÂ  Â  const tituloTexto = tipoConsulta === 'semana' ?Â \nÂ  Â  Â  'ð RESUMEN SEMANAL\\nð ' + fechaLegibleCorta(fechaInicioNormalizada) + ' al ' + fechaLegibleCorta(fechaFinNormalizada) :\nÂ  Â  Â  'ð RESUMEN DE VENTAS\\nð ' + fechaLegible(fechaInicioNormalizada);\nÂ  Â  Â Â \nÂ  Â  mensajeTexto = tituloTexto + '\\nâââââââââââââââââââââââââ\\n\\n';\nÂ  Â  mensajeTexto += 'â ï¸ No se registraron ventas para este perÃ­odo\\n\\n';\nÂ  Â Â \nÂ  Â  // MOSTRAR TODO EL INVENTARIO CUANDO NO HAY VENTAS\nÂ  Â  if (Object.keys(inventarioActual).length > 0) {\nÂ  Â  Â  // Separar productos por disponibilidad\nÂ  Â  Â  const productosConStock = Object.entries(inventarioActual)\nÂ  Â  Â  Â  .filter(item => item[1] > 0)\nÂ  Â  Â  Â  .sort((a, b) => b[1] - a[1]); // Ordenar por stock descendente\nÂ  Â  Â  Â Â \nÂ  Â  Â  const productosAgotados = Object.entries(inventarioActual)\nÂ  Â  Â  Â  .filter(item => item[1] === 0)\nÂ  Â  Â  Â  .sort((a, b) => a[0].localeCompare(b[0])); // Ordenar alfabÃ©ticamente\nÂ  Â  Â Â \nÂ  Â  Â  mensajeTexto += 'ð *INVENTARIO COMPLETO:*\\n\\n';\nÂ  Â  Â Â \nÂ  Â  Â  if (productosConStock.length > 0) {\nÂ  Â  Â  Â  mensajeTexto += 'â *Productos disponibles:*\\n';\nÂ  Â  Â  Â  productosConStock.forEach(function(item) {\nÂ  Â  Â  Â  Â  const producto = item[0];\nÂ  Â  Â  Â  Â  const stock = item[1];\nÂ  Â  Â  Â  Â  mensajeTexto += `â¢ ${producto}: ${formatearNumero(stock)} und\\n`;\nÂ  Â  Â  Â  });\nÂ  Â  Â  }\nÂ  Â  Â Â \nÂ  Â  Â  if (productosAgotados.length > 0) {\nÂ  Â  Â  Â  mensajeTexto += '\\nâ ï¸ *Productos agotados:*\\n';\nÂ  Â  Â  Â  productosAgotados.forEach(function(item) {\nÂ  Â  Â  Â  Â  const producto = item[0];\nÂ  Â  Â  Â  Â  mensajeTexto += `â¢ ${producto}: Sin stock\\n`;\nÂ  Â  Â  Â  });\nÂ  Â  Â  }\nÂ  Â  Â Â \nÂ  Â  Â  // Resumen de inventario\nÂ  Â  Â  mensajeTexto += `\\nð *Resumen de inventario:*\\n`;\nÂ  Â  Â  mensajeTexto += `â¢ Total productos: ${Object.keys(inventarioActual).length}\\n`;\nÂ  Â  Â  mensajeTexto += `â¢ Con stock: ${productosConStock.length}\\n`;\nÂ  Â  Â  mensajeTexto += `â¢ Agotados: ${productosAgotados.length}`;\nÂ  Â  }\nÂ  Â Â \nÂ  } else if (tipoConsulta === 'semana' || tipoConsulta === 'mes') {\nÂ  Â  // FORMATO PARA SEMANA/MES CON INVENTARIO\nÂ  Â  mensajeTexto = 'ð RESUMEN SEMANAL\\n';\nÂ  Â  mensajeTexto += 'ð ' + fechaLegibleCorta(fechaInicioNormalizada) + ' al ' + fechaLegibleCorta(fechaFinNormalizada) + '\\n';\nÂ  Â  mensajeTexto += 'âââââââââââââââââââââââââ\\n\\n';\nÂ  Â Â \nÂ  Â  // Ordenar dÃ­as por fecha\nÂ  Â  const diasOrdenados = Object.keys(resumenPorDia).sort();\nÂ  Â Â \nÂ  Â  diasOrdenados.forEach(function(fecha) {\nÂ  Â  Â  const diaSemana = obtenerDiaSemana(fecha);\nÂ  Â  Â  const datos = resumenPorDia[fecha];\nÂ  Â  Â Â \nÂ  Â  Â  mensajeTexto += 'ð ' + diaSemana + ' â ' + formatearPeso(datos.costoTotal) + ' / ' + formatearPeso(datos.utilidadTotal) + '\\n';\nÂ  Â  });\nÂ  Â Â \nÂ  Â  // Totales de ventas\nÂ  Â  mensajeTexto += '\\nâââââââââââââââââââââââââ\\n';\nÂ  Â  mensajeTexto += 'ð° COSTO TOTAL: ' + formatearPeso(costoTotalGeneral) + '\\n';\nÂ  Â  mensajeTexto += 'ð¸ UTILIDAD TOTAL: ' + formatearPeso(utilidadTotalGeneral) + '\\n';\nÂ  Â  mensajeTexto += 'ð TOTAL VENTAS: ' + formatearPeso(valorTotalGeneral) + '\\n';\nÂ  Â Â \nÂ  Â  // AGREGAR INVENTARIO COMPLETO TAMBIÃN EN REPORTES SEMANALES\nÂ  Â  if (Object.keys(inventarioActual).length > 0) {\nÂ  Â  Â  const productosConStock = Object.entries(inventarioActual)\nÂ  Â  Â  Â  .filter(item => item[1] > 0)\nÂ  Â  Â  Â  .sort((a, b) => b[1] - a[1]);\nÂ  Â  Â  Â Â \nÂ  Â  Â  const productosAgotados = Object.entries(inventarioActual)\nÂ  Â  Â  Â  .filter(item => item[1] === 0);\nÂ  Â  Â Â \nÂ  Â  Â  mensajeTexto += '\\nð *INVENTARIO ACTUAL:*\\n';\nÂ  Â  Â Â \nÂ  Â  Â  if (productosConStock.length > 0) {\nÂ  Â  Â  Â  mensajeTexto += '\\nâ *Con stock disponible:*\\n';\nÂ  Â  Â  Â  productosConStock.forEach(function(item) {\nÂ  Â  Â  Â  Â  const producto = item[0];\nÂ  Â  Â  Â  Â  const stock = item[1];\nÂ  Â  Â  Â  Â  mensajeTexto += `â¢ ${producto}: ${formatearNumero(stock)} und\\n`;\nÂ  Â  Â  Â  });\nÂ  Â  Â  }\nÂ  Â  Â Â \nÂ  Â  Â  if (productosAgotados.length > 0 && productosAgotados.length <= 10) {\nÂ  Â  Â  Â  mensajeTexto += '\\nâ ï¸ *Sin stock:*\\n';\nÂ  Â  Â  Â  productosAgotados.forEach(function(item) {\nÂ  Â  Â  Â  Â  const producto = item[0];\nÂ  Â  Â  Â  Â  mensajeTexto += `â¢ ${producto}\\n`;\nÂ  Â  Â  Â  });\nÂ  Â  Â  } else if (productosAgotados.length > 10) {\nÂ  Â  Â  Â  mensajeTexto += `\\nâ ï¸ *${productosAgotados.length} productos sin stock*`;\nÂ  Â  Â  }\nÂ  Â  }\nÂ  Â Â \nÂ  } else {\nÂ  Â  // FORMATO DETALLADO PARA DÃAS ESPECÃFICOS SIN RESUMEN FINANCIERO NI INVENTARIO COMPLETO\nÂ  Â  mensajeTexto = 'ð RESUMEN DE VENTAS\\n';\nÂ  Â  mensajeTexto += 'ð ' + fechaLegible(fechaInicioNormalizada) + '\\n';\nÂ  Â  mensajeTexto += 'âââââââââââââââââââââââââ\\n\\n';\nÂ  Â Â \nÂ  Â  // Ordenar productos por cantidad vendida (mayor a menor)\nÂ  Â  const productosArray = Object.entries(resumenProductos);\nÂ  Â  productosArray.sort(function(a, b) {\nÂ  Â  Â  return b[1].cantidad - a[1].cantidad;\nÂ  Â  });\nÂ  Â Â \nÂ  Â  // SECCIÃN DE PRODUCTOS VENDIDOS CON STOCK\nÂ  Â  mensajeTexto += 'ð¦ *PRODUCTOS VENDIDOS:*\\n';\nÂ  Â  productosArray.forEach(function(item) {\nÂ  Â  Â  const producto = item[0];\nÂ  Â  Â  const datos = item[1];\nÂ  Â  Â Â \nÂ  Â  Â  mensajeTexto += `â¢ ${producto} â ${formatearNumero(datos.cantidad)} und | ${formatearPeso(datos.valorTotal)}`;\nÂ  Â  Â Â \nÂ  Â  Â  if (datos.stockActual > 0) {\nÂ  Â  Â  Â  mensajeTexto += ` | Stock: ${formatearNumero(datos.stockActual)} und\\n`;\nÂ  Â  Â  } else if (datos.stockActual === 0) {\nÂ  Â  Â  Â  mensajeTexto += ` | Stock: Agotado â ï¸\\n`;\nÂ  Â  Â  } else {\nÂ  Â  Â  Â  mensajeTexto += ` | Stock: Sin datos\\n`;\nÂ  Â  Â  }\nÂ  Â  });\nÂ  Â Â \nÂ  }\n\nÂ  console.log(\"â Procesamiento completado:\");\nÂ  console.log(`Â  Â â¢ Ventas procesadas: ${ventasFiltradas.length}`);\nÂ  console.log(`Â  Â â¢ Productos Ãºnicos en inventario: ${Object.keys(inventarioActual).length}`);\nÂ  console.log(`Â  Â â¢ Productos vendidos: ${Object.keys(resumenProductos).length}`);\n\nÂ  // ===== RETORNAR RESULTADO FINAL =====\nÂ  return [{\nÂ  Â  json: {\nÂ  Â  Â  mensaje_texto: mensajeTexto,\nÂ  Â  Â  tipo_consulta: tipoConsulta,\nÂ  Â  Â  fecha_inicio: fechaInicioNormalizada,\nÂ  Â  Â  fecha_fin: fechaFinNormalizada,\nÂ  Â  Â  total_ventas: valorTotalGeneral,\nÂ  Â  Â  total_costos: costoTotalGeneral,\nÂ  Â  Â  total_utilidades: utilidadTotalGeneral,\nÂ  Â  Â  total_productos: cantidadTotalProductos,\nÂ  Â  Â  total_transacciones: ventasFiltradas.length,\nÂ  Â  Â  resumen_productos: resumenProductos,\nÂ  Â  Â  inventario_incluido: Object.keys(inventarioActual).length > 0,\nÂ  Â  Â  productos_con_stock: inventarioActual,\nÂ  Â  Â  resumen_por_dia: resumenPorDia,\nÂ  Â  Â  inventario_stats: {\nÂ  Â  Â  Â  productos_inventario: Object.keys(inventarioActual).length,\nÂ  Â  Â  Â  fuente_inventario: 'obtener_inventario',\nÂ  Â  Â  Â  productos_con_stock: Object.values(inventarioActual).filter(stock => stock > 0).length,\nÂ  Â  Â  Â  productos_agotados: Object.values(inventarioActual).filter(stock => stock === 0).length,\nÂ  Â  Â  Â  duplicados_removidos: true,\nÂ  Â  Â  Â  stock_total: Object.values(inventarioActual).reduce((suma, stock) => suma + stock, 0)\nÂ  Â  Â  }\nÂ  Â  }\nÂ  }];\nÂ Â \n} catch (error) {\nÂ  console.log('â ERROR GENERAL:', error.message);\nÂ  console.log('Stack trace:', error.stack);\nÂ Â \nÂ  return [{\nÂ  Â  json: {\nÂ  Â  Â  error: true,\nÂ  Â  Â  mensaje_texto: `â Error generando reporte: ${error.message}`,\nÂ  Â  Â  timestamp: new Date().toISOString(),\nÂ  Â  Â  error_details: error.stack\nÂ  Â  }\nÂ  }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3616,
        400
      ],
      "id": "36bf587c-484c-4424-a2ca-6d932acdf8bb",
      "name": "Code7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b355a1d1-f888-4ce4-b12b-03a9644fb07e",
              "name": "final_message",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            },
            {
              "id": "aa4f659e-93fd-458f-8cb0-d6b2bd655160",
              "name": "sessionid",
              "value": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "0f0f416c-ed04-4b77-bb03-23a469d40113",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1088,
        400
      ],
      "id": "3e480cc0-2723-415e-9668-9cb50fe6a53b",
      "name": "FInal_message_text"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $input.first().json.body.data.message.conversation || \"\";\n\n// Diccionario bÃ¡sico de nÃºmeros en palabras a nÃºmeros\nconst numeros = {\n  \"cero\": 0,\n  \"uno\": 1, \"una\": 1, \"un\": 1,\n  \"dos\": 2,\n  \"tres\": 3,\n  \"cuatro\": 4,\n  \"cinco\": 5,\n  \"seis\": 6,\n  \"siete\": 7,\n  \"ocho\": 8,\n  \"nueve\": 9,\n  \"diez\": 10,\n  \"once\": 11,\n  \"doce\": 12,\n  \"trece\": 13,\n  \"catorce\": 14,\n  \"quince\": 15,\n  \"diecisÃ©is\": 16, \"dieciseis\": 16,\n  \"diecisiete\": 17,\n  \"dieciocho\": 18,\n  \"diecinueve\": 19,\n  \"veinte\": 20,\n  \"veintiuno\": 21, \"veintiuna\": 21,\n  \"veintidÃ³s\": 22, \"veintidos\": 22,\n  \"veintitrÃ©s\": 23, \"veintitres\": 23,\n  \"veinticuatro\": 24,\n  \"veinticinco\": 25,\n  \"veintisÃ©is\": 26, \"veintiseis\": 26,\n  \"veintisiete\": 27,\n  \"veintiocho\": 28,\n  \"veintinueve\": 29,\n  \"treinta\": 30,\n  \"cuarenta\": 40,\n  \"cincuenta\": 50,\n  \"sesenta\": 60,\n  \"setenta\": 70,\n  \"ochenta\": 80,\n  \"noventa\": 90\n};\n\n// FunciÃ³n para convertir palabras a nÃºmeros o sÃ­mbolos\nfunction palabraANumero(palabra) {\n  palabra = palabra.toLowerCase();\n  // ConversiÃ³n de \"punto\" a \".\"\n  if (palabra === \"punto\") {\n    return \".\";\n  }\n  if (numeros.hasOwnProperty(palabra)) {\n    return numeros[palabra];\n  }\n  // Manejo de combinaciones como \"treinta y cinco\"\n  if (palabra.includes(\" y \")) {\n    let partes = palabra.split(\" y \").map(p => p.trim());\n    if (numeros[partes[0]] && numeros[partes[1]]) {\n      return numeros[partes[0]] + numeros[partes[1]];\n    }\n  }\n  return palabra; // si no se reconoce, se deja igual\n}\n\n// Reemplazar en el texto\ntexto = texto.replace(/\\b([a-zÃ¡Ã©Ã­Ã³ÃºÃ±]+(?:\\s+y\\s+[a-zÃ¡Ã©Ã­Ã³ÃºÃ±]+)?)\\b/gi, (match) => {\n  const convertido = palabraANumero(match);\n  return convertido !== match ? convertido : match;\n});\n\nreturn { texto_convertido: texto };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        400
      ],
      "id": "0fb2abab-8076-403d-8a97-6c5cb696f5ae",
      "name": "Code8"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Code2').item.json.final_message }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# INSTRUCCIONES PARA TRANSFORMAR VENTAS\nTu labor es transformar el mensaje {{ $('Code2').item.json.final_message }} de ventas siguiendo **EXACTAMENTE** el formato especificado.\n\n## TÃRMINOS Y CONVERSIONES\n### Productos bÃ¡sicos:\n| Entrada | Salida exacta |\n|---------|---------------|\n| combo/combos | \"Chorizos\" + \"Arepas de queso\" (1 de cada uno) |\n| 2.5 | \"Gaseosas MEGA 2.5\" |\n| 350 | \"Gaseosas 350ml\" |\n| 250 | \"Gaseosas 250ml\" |\n| chorizo/chorizos | \"Chorizos\" |\n| arepa/arepas/arepas con queso | \"Arepas de queso\" |\n| mustang/lucky/luqui/luki/mosto/musta/mustang/lukis/must/most | \"Cigarrillos\" |\n| tinto/tintos | \"Tintos\" |\n\n### Casos especiales - NÃºmeros unidos:\n- **PatrÃ³n:** Cuando encuentres un nÃºmero de 4 dÃ­gitos donde los primeros dÃ­gitos representan cantidad y los Ãºltimos el tipo de gaseosa:\n  - \"3250\" o \"3 250\" = 3 \"Gaseosas 250ml\"\n  - \"2350\" o \"2 350\" = 2 \"Gaseosas 350ml\" \n  - \"4350\" o \"4 350\" = 4 \"Gaseosas 350ml\"\n  - \"5250\" o \"5 250\" = 5 \"Gaseosas 250ml\"\n\n- **PatrÃ³n con decimales:** Cuando encuentres nÃºmeros con formato X2.5:\n  - \"32.5\" o \"3 2.5\" = 3 \"Gaseosas MEGA 2.5\"\n  - \"22.5\" o \"2 2.5\" = 2 \"Gaseosas MEGA 2.5\"\n  - \"52.5\" o \"5 2.5\" = 5 \"Gaseosas MEGA 2.5\"\n\n### Ejemplos de conversiÃ³n:\n- **Entrada:** \"3 combos\" \n- **Salida:** \"Chorizos\" 3, \"Arepas de queso\" 3\n- **Entrada:** \"2 combos y una 2.5\"\n- **Salida:** \"Chorizos\" 2, \"Arepas de queso\" 2, \"Gaseosa MEGA 2.5\" 1\n- **Entrada:** \"2350\"\n- **Salida:** \"Gaseosas 350ml\" 2\n- **Entrada:** \"32.5\"\n- **Salida:** \"Gaseosas MEGA 2.5\" 3\n\n## FORMATO DE SALIDA OBLIGATORIO\n**ESTRUCTURA:** \"NombreProducto\" cantidad, \"NombreProducto\" cantidad\n\n**REGLAS ESTRICTAS:**\n1. Cada producto entre comillas dobles: \"Chorizos\"\n2. Espacio despuÃ©s de las comillas: \"Chorizos\" 3\n3. Coma y espacio entre productos: , \"\n4. NO agregar saltos de lÃ­nea (\\n)\n5. NO cambiar mayÃºsculas/minÃºsculas de los nombres de productos\n\n## EJEMPLOS COMPLETOS:\n**Entrada:** \"4 combos 2 tintos y una 2.5\"\n**Salida:** \"Chorizos\" 4, \"Arepas de queso\" 4, \"Tintos\" 2, \"Gaseosas MEGA 2.5\" 1\n\n**Entrada:** \"3 arepas y 2 350\"\n**Salida:** \"Arepas de queso\" 3, \"Gaseosas 350ml\" 2\n\n**Entrada:** \"32.5\"\n**Salida:** \"Gaseosas MEGA 2.5\" 3\n\n**Entrada:** \"2350 y un combo\"\n**Salida:** \"Gaseosas 350ml\" 2, \"Chorizos\" 1, \"Arepas de queso\" 1\n\n**Entrada:** \"4250 y 22.5\"\n**Salida:** \"Gaseosas 250ml\" 4, \"Gaseosas MEGA 2.5\" 2\n\n## IMPORTANTE:\n- Devuelve ÃNICAMENTE el formato de salida especificado\n- NO agregues explicaciones\n- NO agregues saltos de lÃ­nea\n- RESPETA exactamente las comillas y espacios"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2560,
        1392
      ],
      "id": "b681971e-1c6b-4c42-9094-f57f62800688",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2640,
        1616
      ],
      "id": "a3ef8314-8a08-4eee-ab7d-eddf5ac77f48",
      "name": "Google Gemini Chat Model4",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Capturamos el texto desde la propiedad correcta\nconst texto = String($input.first().json.output || '').trim();\n\n// Regex para extraer \"producto\" cantidad\nconst regex = /\"([^\"]+)\"\\s+(\\d+(?:\\.\\d+)?)/g;\n\nconst filas = [];\nlet match;\n\nwhile ((match = regex.exec(texto)) !== null) {\n  filas.push({\n    PRODUCTO: match[1].replace(/_/g, ' '),\n    CANTIDAD: parseFloat(match[2]),\n    FECHA: new Date().toLocaleString('es-CO', { timeZone: 'America/Bogota' })\n  });\n}\n\nreturn filas;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2976,
        1392
      ],
      "id": "ffb6e9a4-142a-4f7c-99a3-b25301cb4e1c",
      "name": "Code_ventas1"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 556520416,
          "mode": "list",
          "cachedResultName": "consumo_personal",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=556520416"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "CANTIDAD": "={{ $json.CANTIDAD }}",
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "FECHA": "={{ $json.FECHA }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "CANTIDAD",
              "displayName": "CANTIDAD",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FECHA",
              "displayName": "FECHA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3264,
        1392
      ],
      "id": "2e1fb2e3-8e8e-44ec-9b71-339a3e7e70ce",
      "name": "ingresa_consumos_personales",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:F"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3488,
        1456
      ],
      "id": "044c53e0-3825-4385-b6c9-36276deb2818",
      "name": "obtener_inventario1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Acceder a TODOS los items del nodo de consumos\nlet consumosPersonales = [];\n\n// Usar $items para obtener todos los items del nodo especÃ­fico\ntry {\n  const todosLosConsumos = $items(\"ingresa_consumos_personales\");\n  if (todosLosConsumos && Array.isArray(todosLosConsumos)) {\n    consumosPersonales = todosLosConsumos.map(item => item.json);\n  }\n} catch (error) {\n  // MÃ©todo fallback si $items no funciona\n  const consumosDirectos = $node[\"ingresa_consumos_personales\"];\n  if (consumosDirectos && consumosDirectos.json) {\n    consumosPersonales = [consumosDirectos.json];\n  }\n}\n\n// Procesar inventario (extraer datos json)\nconst inventarioData = $input.all();\nconst inventarioItems = [];\n\ninventarioData.forEach(item => {\n  if (item.json && item.json.STOCK_ACTUAL_UNIDADES !== undefined) {\n    inventarioItems.push(item.json);\n  }\n});\n\n// Verificar que tenemos datos vÃ¡lidos - mejorar el manejo de errores\nif (consumosPersonales.length === 0) {\n  // Si no hay consumos, no hacer nada y retornar vacÃ­o (no error)\n  return [];\n}\n\nif (inventarioItems.length === 0) {\n  // Si no hay inventario aÃºn, no hacer nada y retornar vacÃ­o (no error)\n  return [];\n}\n\n// Eliminar duplicados del inventario basÃ¡ndose en PRODUCTO y row_number\nconst inventarioSinDuplicados = inventarioItems.filter((item, index, self) => \n  index === self.findIndex(i => i.PRODUCTO === item.PRODUCTO && i.row_number === item.row_number)\n);\n\n// Crear un mapa de consumos por producto\nconst consumosPorProducto = {};\nconsumosPersonales.forEach(consumo => {\n  const producto = consumo.PRODUCTO;\n  const cantidad = consumo.CANTIDAD;\n  \n  if (consumosPorProducto[producto]) {\n    consumosPorProducto[producto] += cantidad;\n  } else {\n    consumosPorProducto[producto] = cantidad;\n  }\n});\n\n// Procesar el inventario y descontar los consumos\nconst inventarioActualizado = inventarioSinDuplicados.map(item => {\n  const producto = item.PRODUCTO;\n  const stockActual = item.STOCK_ACTUAL_UNIDADES;\n  \n  // Verificar si este producto fue consumido\n  if (consumosPorProducto[producto]) {\n    const cantidadConsumida = consumosPorProducto[producto];\n    const nuevoStock = Math.max(0, stockActual - cantidadConsumida);\n    \n    return {\n      ...item,\n      STOCK_ACTUAL_UNIDADES: nuevoStock\n    };\n  }\n  \n  // Si no fue consumido, mantener el stock actual\n  return item;\n});\n\n// Retornar solo el inventario actualizado\nreturn inventarioActualizado;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3712,
        1392
      ],
      "id": "bf6e62dd-42b2-4efe-b80e-e24b00a39f8a",
      "name": "Procesar_actualizacion_inventario1"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "UNIDAD_MEDIDA": "={{ $json.UNIDAD_MEDIDA }}",
            "FACTOR_UNIDADES": "={{ $json.FACTOR_UNIDADES }}",
            "STOCK_ACTUAL_UNIDADES": "={{ $json.STOCK_ACTUAL_UNIDADES }}",
            "PRECIO_ULTIMA_COMPRA": "={{ $json.PRECIO_ULTIMA_COMPRA }}",
            "FECHA_ULTIMA_COMPRA": "={{ $json.FECHA_ULTIMA_COMPRA }}"
          },
          "matchingColumns": [
            "PRODUCTO"
          ],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UNIDAD_MEDIDA",
              "displayName": "UNIDAD_MEDIDA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FACTOR_UNIDADES",
              "displayName": "FACTOR_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "STOCK_ACTUAL_UNIDADES",
              "displayName": "STOCK_ACTUAL_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PRECIO_ULTIMA_COMPRA",
              "displayName": "PRECIO_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FECHA_ULTIMA_COMPRA",
              "displayName": "FECHA_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3936,
        1392
      ],
      "id": "28855b3e-43d0-48e2-949b-1cbf1ef9da53",
      "name": "Update row in sheet2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos de los consumos y el inventario actualizado\nconst consumosData = $items(\"ingresa_consumos_personales\");\nconst inventarioActualizado = $input.all();\n\n// Obtener fecha y hora actual\nconst fechaHora = new Date().toLocaleString('es-ES', {\n  day: '2-digit',\n  month: '2-digit', \n  year: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: true\n});\n\n// Crear mapa del inventario actualizado por producto\nconst stockActualizado = {};\ninventarioActualizado.forEach(item => {\n  if (item.json) {\n    stockActualizado[item.json.PRODUCTO] = item.json.STOCK_ACTUAL_UNIDADES;\n  }\n});\n\n// Generar lÃ­neas de confirmaciÃ³n para cada consumo\nconst lineasConfirmacion = consumosData.map(consumo => {\n  const producto = consumo.json.PRODUCTO;\n  const cantidad = consumo.json.CANTIDAD;\n  const nuevoStock = stockActualizado[producto] || 'N/A';\n  \n  return `${cantidad} ${producto} / nuevoStock : ${nuevoStock}`;\n});\n\n// Construir el mensaje completo\nconst mensaje = [\n  \"â Registro de consumo personal\",\n  fechaHora,\n  \"\",  // LÃ­nea vacÃ­a para agregar espacio\n  ...lineasConfirmacion\n].join('\\n');\n\n// Retornar el mensaje\nreturn [{ \n  mensaje: mensaje,\n  timestamp: fechaHora,\n  consumosRegistrados: lineasConfirmacion.length\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4160,
        1392
      ],
      "id": "5d6e864c-6d8b-471f-b881-9d3086b401d5",
      "name": "Code6"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        3408,
        400
      ],
      "id": "ddd21d1b-55aa-4b12-9f7d-a70b6e0510cc",
      "name": "Remove_Duplicates"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a828ca09-630b-424c-bad3-a391a10d3695",
              "leftValue": "={{ $json.final_message }}",
              "rightValue": "inventario",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1504,
        304
      ],
      "id": "c9e39109-eff0-4bc2-9097-a1b185a94dfe",
      "name": "If"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:F"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1712,
        288
      ],
      "id": "0a2ae4ed-9594-4853-825b-070cdca7fd9c",
      "name": "obtener_inventario2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        1936,
        288
      ],
      "id": "e0ef7470-6a4d-4daa-9dba-7a4fd2c33a72",
      "name": "Remove_Duplicates1"
    },
    {
      "parameters": {
        "jsCode": "// La variable 'items' contiene los datos del nodo anterior.\nif (!Array.isArray(items) || items.length === 0) {\n    return [{\n        json: {\n            informe: \"No hay productos en stock para generar el informe.\"\n        }\n    }];\n}\n\n// Filtra solo los productos con stock disponible.\nconst productosConStock = items.filter(item => {\n    return item.json && typeof item.json.STOCK_ACTUAL_UNIDADES === 'number' && item.json.STOCK_ACTUAL_UNIDADES > 0;\n});\n\n// Si no hay productos con stock despuÃ©s del filtro, devuelve un mensaje.\nif (productosConStock.length === 0) {\n    return [{\n        json: {\n            informe: \"No hay productos en stock disponibles.\"\n        }\n    }];\n}\n\n// Construye el mensaje con el formato deseado.\nlet informe = \"ð INVENTARIO COMPLETO:\\n\\n\";\ninforme += \"â **Productos con stock disponible:**\\n\\n\";\n\nproductosConStock.forEach(item => {\n    const producto = item.json;\n    informe += `â¢ ${producto.PRODUCTO}: ${producto.STOCK_ACTUAL_UNIDADES} und\\n`;\n});\n\n// Devuelve un solo Ã­tem con el informe en la propiedad 'json'.\nreturn [{\n    json: {\n        informe: informe.trim()\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2144,
        304
      ],
      "id": "0dbe17f0-e2c8-4bc8-b5fa-b7bd721f5873",
      "name": "Code9"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "PRODUCTO",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        5056,
        96
      ],
      "id": "ab1ebded-6b25-49fb-98e6-b2b6b89326fb",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8582deaa-2a78-421a-980e-a35e73d07916",
              "name": "PRODUCTO",
              "value": "={{ $json.PRODUCTO }}",
              "type": "string"
            },
            {
              "id": "56b5ef83-cf55-4b64-9578-0d5a819ce511",
              "name": "CANTIDAD",
              "value": "={{ $json.CANTIDAD }}",
              "type": "number"
            },
            {
              "id": "84ed84b3-af6a-4dea-8bb1-ff992752ed42",
              "name": "VALOR_UNITARIO",
              "value": "={{ $json.VALOR_UNITARIO }}",
              "type": "number"
            },
            {
              "id": "e9297a2f-1812-4832-a7e6-0dafd8e7ebd9",
              "name": "VALOR_TOTAL",
              "value": "={{ $json.VALOR_TOTAL }}",
              "type": "number"
            },
            {
              "id": "7efaf158-9f0b-43ec-b3b1-223aeea0f776",
              "name": "FECHA",
              "value": "={{ $json.FECHA }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4832,
        0
      ],
      "id": "b9490b9a-1508-40f0-a0ed-2723c7fdc903",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8c3c14b8-5953-4e33-a111-44d6e0c7f7d6",
              "name": "PRODUCTO",
              "value": "={{ $json.PRODUCTO }}",
              "type": "string"
            },
            {
              "id": "c02899c8-cb13-4751-8864-9fb81d66474e",
              "name": "STOCK_ACTUAL_UNIDADES",
              "value": "={{ $json.STOCK_ACTUAL_UNIDADES }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4832,
        304
      ],
      "id": "17006371-896c-4551-95be-e9729e74c13a",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "0ebc283e-1a2a-4e30-8649-a42413095db8",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -256,
        304
      ],
      "id": "b04cbbcd-ddb8-44c2-b61a-92145d24cdb4",
      "name": "Webhook",
      "webhookId": "0ebc283e-1a2a-4e30-8649-a42413095db8"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "26462d57-8abb-4e95-88ae-0f74d2362787",
                    "leftValue": "={{ $json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.data.messageType }}",
                    "rightValue": "=conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "1066c446-0129-4619-8eff-ec1b00093dda"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "415e59c9-d453-4f90-968b-99a6a54d827a",
                    "leftValue": "={{ $json.body.data.messageType }}",
                    "rightValue": "=audioMessage\nconversation",
                    "operator": {
                      "type": "string",
                      "operation": "notContains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "otro"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -32,
        288
      ],
      "id": "25c06faa-ebe5-452c-8942-c774d438b44e",
      "name": "Switch2"
    },
    {
      "parameters": {
        "resource": "chat-api",
        "operation": "get-media-base64",
        "instanceName": "={{ $json.body.instance }}",
        "messageId": "={{ $json.body.data.key.id }}"
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        192,
        208
      ],
      "id": "1032883f-8f5c-4557-bb2f-51309f6f373f",
      "name": "Obter m dia em base64",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data.base64",
        "options": {
          "fileName": "audio.mp3"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        416,
        208
      ],
      "id": "490011f6-a40d-4742-8018-efd36dea55c2",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $json.mensaje_texto }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        5504,
        96
      ],
      "id": "d1bc5b41-b8eb-43c0-993d-a1f77a2eb229",
      "name": "Enviar texto1",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $json.informe }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2304,
        320
      ],
      "id": "cc850b66-d783-4737-bddc-4b0f9f5dc3bb",
      "name": "Enviar texto2",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $json.mensaje_texto }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        3856,
        384
      ],
      "id": "0e5123e2-4835-4321-8da3-2b5ec8afa716",
      "name": "Enviar texto",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $json.mensaje_texto }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        4832,
        944
      ],
      "id": "f4763f4a-1609-4a7b-bd17-8a6e247eea66",
      "name": "Enviar texto3",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $json.mensaje }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        4384,
        1392
      ],
      "id": "8245e10b-3a92-4103-8f0c-8198ef52f22d",
      "name": "Enviar texto4",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $json.mensaje }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        3712,
        992
      ],
      "id": "17e4c551-8faa-4df1-9ea9-67ab8a82d86e",
      "name": "Enviar texto5",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3232,
        400
      ],
      "id": "9e3b039c-16b7-4ef3-a52b-cf3379c6f0c0",
      "name": "obtener_inventario",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "CLASIFICA TIPO DE ENTRADA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Interpretar_mensaje",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "LIMPIA MENSAJE DE VENTA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "LIMPIA MENSAJE DE VENTA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code_ventas": {
      "main": [
        [
          {
            "node": "Obtener_lista_precios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener_lista_precios": {
      "main": [
        [
          {
            "node": "Cruce_precio_venta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cruce_precio_venta": {
      "main": [
        [
          {
            "node": "Guardar_venta_en_hoja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar_venta_en_hoja": {
      "main": [
        [
          {
            "node": "Obtener_inventario_actual",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CLASIFICA TIPO DE ENTRADA": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LIMPIA MENSAJE DE VENTA": {
      "main": [
        [
          {
            "node": "Code_ventas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ventas_solicitadas": {
      "main": [
        [
          {
            "node": "obtener_inventario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interpretar_mensaje": {
      "main": [
        [
          {
            "node": "ventas_solicitadas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crea_o_actualiza_productos": {
      "main": [
        [
          {
            "node": "crea_mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crea_mensaje": {
      "main": [
        [
          {
            "node": "Enviar texto5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "crea_o_actualiza_productos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe a recording1": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Final_message_audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final_message_audio": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mensaje_confirmacion1": {
      "main": [
        [
          {
            "node": "Enviar texto1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener_inventario_actual": {
      "main": [
        [
          {
            "node": "Procesar_actualizacion_inventario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar_actualizacion_inventario": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Procesar_compra",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Send message4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar_compra": {
      "main": [
        [
          {
            "node": "Consultar_Inventario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar_Inventario": {
      "main": [
        [
          {
            "node": "Calcular_Stock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcular_Stock": {
      "main": [
        [
          {
            "node": "Decidir_Accion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decidir_Accion": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Enviar texto3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "Enviar texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FInal_message_text": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "FInal_message_text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Code_ventas1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code_ventas1": {
      "main": [
        [
          {
            "node": "ingresa_consumos_personales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ingresa_consumos_personales": {
      "main": [
        [
          {
            "node": "obtener_inventario1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Procesar_actualizacion_inventario1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener_inventario1": {
      "main": [
        [
          {
            "node": "Procesar_actualizacion_inventario1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar_actualizacion_inventario1": {
      "main": [
        [
          {
            "node": "Update row in sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet2": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Enviar texto4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove_Duplicates": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "obtener_inventario2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "CLASIFICA TIPO DE ENTRADA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener_inventario2": {
      "main": [
        [
          {
            "node": "Remove_Duplicates1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove_Duplicates1": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "Enviar texto2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "mensaje_confirmacion1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Obter m dia em base64",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Obter m dia em base64": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Transcribe a recording1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener_inventario": {
      "main": [
        [
          {
            "node": "Remove_Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Bogota",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "APs2yNeX1kNL3e1L"
  },
  "versionId": "64fede56-edf9-402b-baf1-804eb4f76c5f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "07f67ec32baaad4ae3d75f4e22d6ad4d1aa561c2ad8388f49ad7031ee0fe8de1"
  },
  "id": "L1TByIhLW8H0ge2x",
  "tags": []
}