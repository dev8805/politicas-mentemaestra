{
  "name": "flujo_WHATSAPP3",
  "nodes": [
    {
      "parameters": {
        "resource": "audio",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-pro"
        },
        "inputType": "binary",
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -2080,
        -144
      ],
      "id": "766ea732-0ba6-4717-ba08-3dddf5691b91",
      "name": "Transcribe a recording1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $json.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n// Diccionario básico de números en palabras a números\nconst numeros = {\n  \"cero\": \"0\",\n  \"uno\": \"1\", \"una\": \"1\", \"un\": \"1\",\n  \"dos\": \"2\",\n  \"tres\": \"3\",\n  \"cuatro\": \"4\",\n  \"cinco\": \"5\",\n  \"seis\": \"6\",\n  \"siete\": \"7\",\n  \"ocho\": \"8\",\n  \"nueve\": \"9\",\n  \"diez\": \"10\",\n  \"once\": \"11\",\n  \"doce\": \"12\",\n  \"trece\": \"13\",\n  \"catorce\": \"14\",\n  \"quince\": \"15\",\n  \"dieciséis\": \"16\", \"dieciseis\": \"16\",\n  \"diecisiete\": \"17\",\n  \"dieciocho\": \"18\",\n  \"diecinueve\": \"19\",\n  \"veinte\": \"20\",\n  \"veintiuno\": \"21\", \"veintiuna\": \"21\",\n  \"veintidós\": \"22\", \"veintidos\": \"22\",\n  \"veintitrés\": \"23\", \"veintitres\": \"23\",\n  \"veinticuatro\": \"24\",\n  \"veinticinco\": \"25\",\n  \"veintiséis\": \"26\", \"veintiseis\": \"26\",\n  \"veintisiete\": \"27\",\n  \"veintiocho\": \"28\",\n  \"veintinueve\": \"29\",\n  \"treinta\": \"30\",\n  \"cuarenta\": \"40\",\n  \"cincuenta\": \"50\",\n  \"sesenta\": \"60\",\n  \"setenta\": \"70\",\n  \"ochenta\": \"80\",\n  \"noventa\": \"90\",\n  \"cien\": \"100\",\n  \"ciento\": \"100\",\n  \"mil\": \"1000\",\n  \"punto\": \".\"\n};\n\n// Convertir solo las palabras que están en el diccionario\nlet resultado = texto;\n\n// Reemplazar cada palabra del diccionario con su número correspondiente\nfor (let palabra in numeros) {\n  let regex = new RegExp('\\\\b' + palabra + '\\\\b', 'gi');\n  resultado = resultado.replace(regex, numeros[palabra]);\n}\n\nreturn { texto_convertido: resultado };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1872,
        -144
      ],
      "id": "f5fbf3ae-3ad9-4adb-884d-599bc4a95e93",
      "name": "Code5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b65575a3-b476-4c0f-8ce4-a7f93531b7f0",
              "name": "final_message",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            },
            {
              "id": "bf8845d4-5e4e-4596-b9d9-ec7940739e0c",
              "name": "sessionid",
              "value": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "d1aea00f-74e0-4acd-bf3d-5984b8eade6c",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1632,
        -144
      ],
      "id": "89bd467d-8a1a-4ef3-aed6-398c225e96e4",
      "name": "Final_message_audio"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aa4f659e-93fd-458f-8cb0-d6b2bd655160",
              "name": "sessionid",
              "value": "={{ $('Switch2').first().json.sessionid }}",
              "type": "string"
            },
            {
              "id": "b355a1d1-f888-4ce4-b12b-03a9644fb07e",
              "name": "estado",
              "value": "={\n  \"mensaje_original\": \"{{ $json.texto_convertido }}\",\n  \"requiere_confirmacion\": false,\n  \"items\": []\n}\n",
              "type": "object"
            },
            {
              "id": "1e088d66-819f-4e4d-ad34-9ca8e437290d",
              "name": "texto_convertido",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            },
            {
              "id": "24d4ebcf-1ef4-4bc1-abe8-04419ac1cf23",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1456,
        64
      ],
      "id": "669f384b-867b-424f-aca4-f725172bf489",
      "name": "FInal_message_text"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $input.first().json.estado.mensaje_original || \"\";\n\n// Diccionario básico de números en palabras a números\nconst numeros = {\n  \"cero\": \"0\",\n  \"uno\": \"1\", \"una\": \"1\", \"un\": \"1\",\n  \"dos\": \"2\",\n  \"tres\": \"3\",\n  \"cuatro\": \"4\",\n  \"cinco\": \"5\",\n  \"seis\": \"6\",\n  \"siete\": \"7\",\n  \"ocho\": \"8\",\n  \"nueve\": \"9\",\n  \"diez\": \"10\",\n  \"once\": \"11\",\n  \"doce\": \"12\",\n  \"trece\": \"13\",\n  \"catorce\": \"14\",\n  \"quince\": \"15\",\n  \"dieciséis\": \"16\", \"dieciseis\": \"16\",\n  \"diecisiete\": \"17\",\n  \"dieciocho\": \"18\",\n  \"diecinueve\": \"19\",\n  \"veinte\": \"20\",\n  \"veintiuno\": \"21\", \"veintiuna\": \"21\",\n  \"veintidós\": \"22\", \"veintidos\": \"22\",\n  \"veintitrés\": \"23\", \"veintitres\": \"23\",\n  \"veinticuatro\": \"24\",\n  \"veinticinco\": \"25\",\n  \"veintiséis\": \"26\", \"veintiseis\": \"26\",\n  \"veintisiete\": \"27\",\n  \"veintiocho\": \"28\",\n  \"veintinueve\": \"29\",\n  \"treinta\": \"30\",\n  \"cuarenta\": \"40\",\n  \"cincuenta\": \"50\",\n  \"sesenta\": \"60\",\n  \"setenta\": \"70\",\n  \"ochenta\": \"80\",\n  \"noventa\": \"90\",\n\n};\n\n// Función para convertir palabras a números o símbolos\nfunction palabraANumero(palabra) {\n  palabra = palabra.toLowerCase().trim();\n  \n  // Conversión de \"punto\" a \".\"\n  if (palabra === \"punto\") {\n    return \".\";\n  }\n  \n  if (numeros.hasOwnProperty(palabra)) {\n    return numeros[palabra];\n  }\n  \n  // Manejo de combinaciones como \"treinta y cinco\"\n  if (palabra.includes(\" y \")) {\n    let partes = palabra.split(\" y \").map(p => p.trim());\n    if (numeros[partes[0]] && numeros[partes[1]]) {\n      return (parseInt(numeros[partes[0]]) + parseInt(numeros[partes[1]])).toString();\n    }\n  }\n  \n  return palabra; // si no se reconoce, se deja igual\n}\n\n// Procesar el texto palabra por palabra\nlet palabras = texto.split(/(\\s+)/); // Mantiene los espacios\nlet resultado = palabras.map(palabra => {\n  // Solo procesar si no es un espacio y contiene letras\n  if (palabra.trim() && /[a-záéíóúñ]/i.test(palabra)) {\n    return palabraANumero(palabra);\n  }\n  return palabra;\n}).join('');\n\nreturn { texto_convertido: resultado };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1680,
        64
      ],
      "id": "16289a1c-219c-49b2-adc5-0efda50375bb",
      "name": "Code8"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "0ebc283e-1a2a-4e30-8649-a42413095db8",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2304,
        48
      ],
      "id": "5dad4fd4-97cf-4f71-b199-935290d68d30",
      "name": "Webhook",
      "webhookId": "0ebc283e-1a2a-4e30-8649-a42413095db8"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cccb067b-4dd7-4efc-8b4f-70a2e8f0fcc3",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "=conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "1066c446-0129-4619-8eff-ec1b00093dda"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "texto"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1856,
        48
      ],
      "id": "938ad423-44a4-43fa-a634-fae87e2c3eb9",
      "name": "Switch2"
    },
    {
      "parameters": {
        "resource": "chat-api",
        "operation": "get-media-base64",
        "instanceName": "={{ $('Webhook').item.json.body.instance }}",
        "messageId": "={{ $('Webhook').item.json.body.data.key.id }}"
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -2528,
        -144
      ],
      "id": "68a88e3f-565b-40c8-982e-95041c6a61ab",
      "name": "Obter m dia em base64",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data.base64",
        "options": {
          "fileName": "audio.mp3"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2304,
        -144
      ],
      "id": "bf514331-6434-4837-b63d-a0986808ea0a",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3440,
        80
      ],
      "id": "56bb1434-9a4a-4bfb-bcaf-ef270396cc7a",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "1xCDK2DGnsJt4GD0",
          "mode": "list",
          "cachedResultName": "obtener_inventario"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $json.final_message }}",
            "telefono": "={{ $json.sessionid }}",
            "fecha": "={{ $json.datetime }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        672,
        -160
      ],
      "id": "aafcd26b-f29a-44c5-93a7-ded9809ca0c2",
      "name": "Execute Workflow1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b8711675-481a-47a5-b7fc-7fb78291914c",
              "leftValue": "={{ $json.final_message }}",
              "rightValue": "=inventario",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        496,
        16
      ],
      "id": "afa99b17-ddee-428b-b5e2-343e6590e703",
      "name": "IF1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "venta",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "4073be86-ac3d-4341-82e7-b7088b96fa02"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "venta"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b6189def-f795-4403-8763-be0074e7c569",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "actualizarPrecio",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Actualizar precios"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6643239a-a644-411c-8d18-62571cd67c50",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "Registrar consumo",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "consumoPersonal"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "eab13bf9-e889-461d-903e-897b9dad78d9",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "=informeVentas",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "informeVentas"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f6d4b305-0c05-464e-8bdf-f29027df2858",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "ingresarProductosAbodega",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ingresoProductos Inventario"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bd7c9184-c623-444b-b561-fdfc2a53fcf6",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "envio_link",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "crear producto"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3872,
        -336
      ],
      "id": "a21a3972-08b8-437b-a342-164586e987a3",
      "name": "Switch"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "3EC1nfxk6lvqjhjz",
          "mode": "list",
          "cachedResultName": "Registra_ventas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('mensajeListo').item.json.texto_para_administrador }}",
            "numero_telefono": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
            "date_time": "={{ $('¿Es respuesta a sugerencia?').first().json.datetime }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "numero_telefono",
              "displayName": "numero_telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "date_time",
              "displayName": "date_time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4496,
        -784
      ],
      "id": "3a4f8b0f-53b9-4f51-855b-815b744d5f0b",
      "name": "registroVentas"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "eEPLO5jaUFJzMEZq",
          "mode": "list",
          "cachedResultName": "ingresar_consumo"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('mensajeListo').item.json.texto_para_administrador }}",
            "telefono": "={{ $('¿Es respuesta a sugerencia?').first().json.sessionid }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}",
            "fecha": "={{ $('¿Es respuesta a sugerencia?').first().json.datetime }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4496,
        -432
      ],
      "id": "b0e5628b-4b9b-40d1-af9f-27104a1e504c",
      "name": "consumoPersonal"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "wrULXZDPO5EmNxd3",
          "mode": "list",
          "cachedResultName": "informe_ventas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('mensajeListo').item.json.texto_para_administrador }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}",
            "fecha": "={{ $('¿Es respuesta a sugerencia?').first().json.datetime }}",
            "wa_id": "={{ $('¿Es respuesta a sugerencia?').first().json.sessionid }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "wa_id",
              "displayName": "wa_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4512,
        -240
      ],
      "id": "a582144b-b4c3-4c60-a1a8-7b808864bf78",
      "name": "informeVentas"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "HbXMEziTLEdBjon5",
          "mode": "list",
          "cachedResultName": "ingresan Productos A Inventario"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('mensajeListo').item.json.texto_para_administrador }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}",
            "fecha": "={{ $('¿Es respuesta a sugerencia?').first().json.datetime }}",
            "wa_id": "={{ $('¿Es respuesta a sugerencia?').first().json.sessionid }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "wa_id",
              "displayName": "wa_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4288,
        -32
      ],
      "id": "5766b39a-765c-4ad4-b92f-46829a7a3d6e",
      "name": "ingresarProductoInventario"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.texto_para_administrador }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# SISTEMA DE DETECCIÓN DE INTENCIONES - AGENTE IA\n\nEres un agente especializado en identificar la intención del usuario y devolver el output correspondiente. Analiza cada mensaje y determina qué acción tomar. \n\n## 🚨 REGLA FUNDAMENTAL - OBLIGATORIA:\n\n**CUANDO LLAMES UNA HERRAMIENTA:**\n- ❌ NO agregues saludos, comentarios, explicaciones ni texto adicional\n- ❌ NO modifiques, reformules o interpretes la respuesta\n- ❌ NO añadas tu propio estilo de escritura\n- ❌ NO incluyas frases como \"Aquí tienes...\", \"El resultado es...\", etc.\n\n\n---\n\n## 🛒 DETECCIÓN DE VENTAS - PRIORIDAD MÁXIMA\n\n### 💡 EJEMPLOS DE VENTAS:\n\n- \"2 Agua 600ml sin gas y 1 Gaseosas MEGA 2.5\"\n- \"1 Gaseosas 350ml\"\n- \"2 Gaseosas 250ml\" \n- \"50 Arepas de QUESO\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `venta`\n\n---\n\n## 💰 ACTUALIZAR PRECIO DE PRODUCTOS\n\n### 📝 PALABRAS CLAVE:\n- **quedo a/quedó a**\n- **quedo/quedó**\n- **actualizar precio**\n- **cambiar el precio**\n- **modificar precio**\n- **nuevo precio**\n- **precio ahora es**\n- **ahora cuesta**\n- **ahora vale**\n\n### 💡 EJEMPLOS:\n- \"la 350 quedó a 3000\"\n- \"la cerveza ahora cuesta $5000\"\n- \"cambia el precio del combo a $8000\"\n- \"actualiza la gaseosa a $3500\"\n- \"el tinto ahora está a $1000\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `actualizarPrecio`\n\n---\n\n## 🍽️ CONSUMO DE PRODUCTOS POR PARTE DEL DUEÑO\n\n### 📝 PALABRAS CLAVE:\n- **me tomé/me tome**\n- **me comí/me comi**\n- **consumí/consumi**\n\n### 💡 EJEMPLOS:\n- \"me tomé 1 Gaseosas 350ml\"\n- \"me tomé 2 Gaseosas 250ml\"\n- \"me comí 1 chorizo\"\n- \"me comi una arepa\"\n- \"me comí 2 combos\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `Registrar consumo`\n\n---\n\n📊 INFORMES DE VENTAS\n📝 PALABRAS CLAVE:\n\nventa/ventas\ninforme/informes\nreporte de ventas\nventas de hoy/ayer/antier\nventas de esta semana/mes\ncuánto vendimos\ntotal de ventas\n\n🎯 ACCIÓN:\nDevuelve output: informeVentas\n\n---\n\n## 📦 INGRESO DE PRODUCTOS AL INVENTARIO\n\n### 📝 PALABRAS CLAVE:\n-ingresaron\n-llegaron\n-entraron\n-cajas\n-pacas\n-bolsas\n- **cajas de/pacas de**\n- **unidades**\n- **entraron/ingresaron**\n- **llegó mercancía**\n- **recibí/recibimos**\n- **compré/compramos**\n- **me trajeron**\n\n### 💡 EJEMPLOS:\n- \"entraron 5 cajas de Gaseosa 250ml\"\n- \"llegaron 3 pacas de Gaseosas MEGA 2.5\"\n- \"recibí 10 unidades de...\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `ingresarProductosAbodega`\n\n---\n\n## 🆕 CREAR NUEVOS PRODUCTOS\n\n### 📝 PALABRAS CLAVE:\n- **crear/creando**\n- **nuevo/nueva/nuevos**\n- **agregar producto**\n- **registrar producto**\n- **añadir al inventario**\n\n### 💡 EJEMPLOS:\n- \"crear nuevo producto\"\n- \"necesito agregar un producto\"\n- \"registrar nueva cerveza\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `envio_link` \n\n---\n\n## ⚠️ REGLAS IMPORTANTES:\n\n1. **PRIORIDAD:** Las ventas tienen máxima prioridad\n2. **TOLERANCIA:** Ignora mayúsculas, minúsculas y errores ortográficos\n3. **FLEXIBILIDAD:** No importan palabras adicionales en el mensaje\n4. **DECISIÓN RÁPIDA:** Una sola coincidencia = llamar herramienta\n5. **MENSAJE COMPLETO:** Siempre pasa el mensaje original completo a la herramienta\n6. **RESPUESTA ÚNICA:** Para TODAS las herramientas: devuelve ÚNICAMENTE ok\n\n## 🚨 RECORDATORIOS CRÍTICOS:\n\n### OBLIGATORIO AL USAR HERRAMIENTAS:\n\n- ❌ **NO INTERPRETES** la respuesta de la herramienta\n- ❌ **NO REFORMULES** el mensaje\n- ❌ **NO AGREGUES** tu propio texto\n- ❌ **NO USES** frases como \"Aquí está...\", \"El resultado es...\", etc.\n\n### EJEMPLO DE RESPUESTA CORRECTA:\n```\nUsuario: \"3 combos\"\nAgente llama herramienta → Herramienta responde: {\"message\": \"✅ Venta registrada correctamente\"}\nRespuesta del agente: ok\n```\n\n### EJEMPLO DE RESPUESTA INCORRECTA:\n```\nUsuario: \"3 combos\"  \nAgente llama herramienta → Herramienta responde: {\"message\": \"✅ Venta registrada correctamente\"}\nRespuesta del agente: \"Perfecto, he registrado tu venta de 3 combos. ✅ Venta registrada correctamente\"\n```\n\n**¡NUNCA olvides llamar la herramienta correspondiente cuando detectes una intención!**"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3520,
        -256
      ],
      "id": "7175c6f4-ae03-45c9-a990-a236ec31d441",
      "name": "Administrador1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "ZreAVVrz07RDx1dx",
          "mode": "list",
          "cachedResultName": "envio_link_nuevoProducto"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('mensajeListo').item.json.texto_para_administrador }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}",
            "fecha": "={{ $('¿Es respuesta a sugerencia?').first().json.datetime }}",
            "telefono": "={{ $('¿Es respuesta a sugerencia?').first().json.sessionid }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4160,
        208
      ],
      "id": "dd938a5f-a666-4d3d-ae39-be84d33b14f2",
      "name": "crearProducto"
    },
    {
      "parameters": {
        "jsCode": "// Entrada esperada: puede venir como string o como array\n// Ejemplo 1: \"qrpa\"\n// Ejemplo 2: [\"qrpa\", \"arepa\"]\n\nlet entrada = $json.productos_detectados || $json.final_message || \"\";\n\n// Si es string, lo convertimos en array de una sola palabra\nif (typeof entrada === \"string\") {\n  entrada = [entrada.trim()];\n}\n\n// Si no es array, lo forzamos a array\nif (!Array.isArray(entrada)) {\n  entrada = [String(entrada)];\n}\n\n// Normalizamos: quitamos vacíos\nentrada = entrada.filter(p => p && p.trim() !== \"\");\n\n// Ahora devolvemos un array de objetos, uno por producto\nreturn entrada.map(p => ({\n  json: { producto_detectado: p }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        -96
      ],
      "id": "69ee1f08-5794-482e-8876-690eb303378f",
      "name": "producto_detectado"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2048,
        32
      ],
      "id": "5f617d80-4680-4a93-b4f7-8f9cbe68c713",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "function normalizar(s) {\n  if (s === undefined || s === null) return \"\";\n  return String(s)\n    .trim()\n    .toLowerCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/\\s+/g, \" \");\n}\n\nfunction levenshtein(a, b) {\n  const m = a.length, n = b.length;\n  if (m === 0) return n;\n  if (n === 0) return m;\n  const dp = Array.from({ length: m + 1 }, () => new Array(n + 1).fill(0));\n  for (let i = 0; i <= m; i++) dp[i][0] = i;\n  for (let j = 0; j <= n; j++) dp[0][j] = j;\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      dp[i][j] = Math.min(\n        dp[i - 1][j] + 1,\n        dp[i][j - 1] + 1,\n        dp[i - 1][j - 1] + cost\n      );\n    }\n  }\n  return dp[m][n];\n}\n\nfunction similitud(a, b) {\n  if (!a && !b) return 1;\n  if (!a || !b) return 0;\n  const dist = levenshtein(a, b);\n  return 1 - dist / Math.max(a.length, b.length);\n}\n\nfunction extraerMarcados(texto) {\n  if (!texto) return [];\n  const matches = String(texto).match(/\"([^\"]+)\"/g);\n  if (!matches) return [];\n  return matches.map(m => m.replace(/\"/g, \"\"));\n}\n\nconst UMBRAL_ACEPTAR = 0.85;\nconst UMBRAL_SUGERIR = 0.60;\n\nconst itemProducto = $input.first();\nconst mensajeOriginal = itemProducto.json.producto_detectado || \"\";\nconst apodos = $input.all().filter(item => item.json.APODO !== undefined);\nconst detectados = extraerMarcados(mensajeOriginal);\n\nif (detectados.length === 0) {\n  return [{\n    json: {\n      mensaje_original: mensajeOriginal,\n      estado: {\n        requiere_confirmacion: false,\n        mensaje_procesado: mensajeOriginal,\n        productos_resueltos: [],\n        reemplazos_realizados: [],\n        sugerencias: [],\n        productos_no_encontrados: []\n      },\n      mensaje_final: mensajeOriginal,\n      sin_productos: true\n    }\n  }];\n}\n\nlet mensajeProcesado = mensajeOriginal;\nlet todosLosReemplazos = [];\nlet productosNoEncontrados = [];\nlet sugerenciasAcumuladas = [];\nlet productosResueltos = []; // NUEVO: Lista de productos ya resueltos\n\n// 🔥 PROCESAR CADA PRODUCTO DETECTADO\nfor (const detectado of detectados) {\n  const entrada = normalizar(detectado);\n\n  if (!entrada) continue;\n\n  // 1) Coincidencia exacta\n  let exacto = apodos.find(f => normalizar(f.json.APODO) === entrada);\n  if (exacto) {\n    const regex = new RegExp(`\"${detectado}\"`, 'g');\n    mensajeProcesado = mensajeProcesado.replace(regex, exacto.json.PRODUCTO);\n    todosLosReemplazos.push({\n      original: detectado,\n      reemplazado: exacto.json.PRODUCTO,\n      tipo: \"exacto\"\n    });\n    \n    // NUEVO: Extraer la parte resuelta del mensaje\n    const parteResuelta = mensajeOriginal.match(new RegExp(`\\\\d+\\\\s+\"${detectado}\"`, 'g'));\n    if (parteResuelta) {\n      const cantidadYProducto = parteResuelta[0].replace(`\"${detectado}\"`, exacto.json.PRODUCTO);\n      productosResueltos.push(cantidadYProducto);\n    }\n    \n    continue;\n  }\n\n  // 2) Calcular similitud\n  let comparaciones = [];\n  for (const fila of apodos) {\n    const apodo = normalizar(fila.json.APODO);\n    const score = similitud(entrada, apodo);\n    comparaciones.push({\n      producto: fila.json.PRODUCTO,\n      apodo,\n      score\n    });\n  }\n\n  comparaciones.sort((a, b) => b.score - a.score);\n  const top3 = comparaciones.slice(0, 3);\n\n  // 3) Decisión por producto\n  if (top3[0] && top3[0].score >= UMBRAL_ACEPTAR) {\n    const regex = new RegExp(`\"${detectado}\"`, 'g');\n    mensajeProcesado = mensajeProcesado.replace(regex, top3[0].producto);\n    todosLosReemplazos.push({\n      original: detectado,\n      reemplazado: top3[0].producto,\n      tipo: \"similitud_alta\",\n      confianza: top3[0].score\n    });\n    \n    // NUEVO: Extraer la parte resuelta del mensaje\n    const parteResuelta = mensajeOriginal.match(new RegExp(`\\\\d+\\\\s+\"${detectado}\"`, 'g'));\n    if (parteResuelta) {\n      const cantidadYProducto = parteResuelta[0].replace(`\"${detectado}\"`, top3[0].producto);\n      productosResueltos.push(cantidadYProducto);\n    }\n    \n  } else if (top3[0] && top3[0].score >= UMBRAL_SUGERIR) {\n    const productosUnicos = [];\n    const productosVistos = new Set();\n    \n    for (const comparacion of top3) {\n      if (!productosVistos.has(comparacion.producto)) {\n        productosVistos.add(comparacion.producto);\n        productosUnicos.push(comparacion);\n      }\n    }\n    \n    sugerenciasAcumuladas.push({\n      apodo_usado: detectado,\n      opciones: productosUnicos.map((r, i) => ({\n        opcion: i + 1,\n        producto: r.producto,\n        apodo: r.apodo,\n        confianza: Number(r.score.toFixed(3))\n      }))\n    });\n  } else {\n    productosNoEncontrados.push(detectado);\n  }\n}\n\n// 🎯 DECIDIR QUE RESPUESTA DAR\n\n// 1) Si hay productos no encontrados\nif (productosNoEncontrados.length > 0) {\n  const listaNoEncontrados = productosNoEncontrados.map(p => `\"${p}\"`).join(\", \");\n  return [{\n    json: {\n      mensaje_original: mensajeOriginal,\n      estado: {\n        requiere_confirmacion: false,\n        mensaje_procesado: mensajeOriginal,\n        productos_resueltos: productosResueltos,\n        reemplazos_realizados: todosLosReemplazos,\n        sugerencias: [],\n        productos_no_encontrados: productosNoEncontrados\n      },\n      mensaje_final: `❌ No encontré ${listaNoEncontrados} en la base de datos.\\n¿Podrías verificar el nombre de estos productos?`,\n      sin_coincidencia: true\n    }\n  }];\n}\n\n// 2) Si hay sugerencias pendientes\nif (sugerenciasAcumuladas.length > 0) {\n  const primeraSugerencia = sugerenciasAcumuladas[0];\n  \n  let opciones = primeraSugerencia.opciones.map(s => {\n    let numEmoji = [\"1️⃣\",\"2️⃣\",\"3️⃣\",\"4️⃣\",\"5️⃣\"][s.opcion - 1] || `${s.opcion})`;\n    return `${numEmoji} ${s.producto}`;\n  }).join(\"\\n\");\n  \n// NUEVO: Mensaje que muestra productos ya resueltos PRIMERO\nlet mensajeConContexto = \"\";\nif (productosResueltos.length > 0) {\n  mensajeConContexto = `✅ Ya confirmé: ${productosResueltos.join(\", \")}\\n\\n`;\n}\nmensajeConContexto += `🤔 No estuve 100% seguro con \"${primeraSugerencia.apodo_usado}\".\\n\\n¿Te refieres a alguna de estas opciones?\\n\\n${opciones}\\n\\n💬 Responde con el número`;\n  \n  return [{\n    json: {\n      mensaje_original: mensajeOriginal,\n      estado: {\n        requiere_confirmacion: true,\n        mensaje_procesado: mensajeProcesado,\n        productos_resueltos: productosResueltos, // NUEVO: Productos ya confirmados\n        reemplazos_realizados: todosLosReemplazos,\n        sugerencias: primeraSugerencia.opciones,\n        productos_no_encontrados: [],\n        apodo_usado: primeraSugerencia.apodo_usado // NUEVO: Para reemplazar después\n      },\n      mensaje_final: mensajeConContexto,\n      requiere_confirmacion: true,\n      apodo_usado: primeraSugerencia.apodo_usado,\n      productos_restantes: sugerenciasAcumuladas.slice(1)\n    }\n  }];\n}\n\n// 3) Todos los productos fueron procesados exitosamente\nreturn [{\n  json: {\n    mensaje_original: mensajeOriginal,\n    estado: {\n      requiere_confirmacion: false,\n      mensaje_procesado: mensajeProcesado,\n      productos_resueltos: productosResueltos,\n      reemplazos_realizados: todosLosReemplazos,\n      sugerencias: [],\n      productos_no_encontrados: []\n    },\n    mensaje_final: mensajeProcesado,\n    productos_reemplazados: todosLosReemplazos.length > 0,\n    total_productos_procesados: detectados.length\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2256,
        32
      ],
      "id": "a4a149f7-2f67-4f19-9107-f5a6c1a23d1b",
      "name": "calcularSimilitud1"
    },
    {
      "parameters": {
        "jsCode": "const mensaje = String($json.texto_convertido || \"\").trim();\nconst sessionid = $json.sessionid;\nconst esNumero = /^[1-9]\\d*$/.test(mensaje);\n\n// Si hay estado en Postgres, lo obtenemos del Merge\nconst estadoItems = $items(\"Verificar estado pendiente\");\nconst tieneEstadoPendiente = estadoItems.length > 0 && estadoItems[0].json.estado;\n\nif (esNumero && tieneEstadoPendiente) {\n  const estado = estadoItems[0].json.estado;\n  \n  if (estado.requiere_confirmacion && estado.sugerencias) {\n    const indice = parseInt(mensaje, 10) - 1;\n    const sugerencia = estado.sugerencias[indice];\n    \n    if (!sugerencia) {\n      return [{\n        json: {\n          mensaje_final: \"❌ Opción inválida. Responde con un número de la lista.\",\n          enviar_directo: true,\n          mantener_estado: true,\n          sessionid: sessionid,\n          accion: \"error_opcion\"\n        }\n      }];\n    }\n    \n    // NUEVO: Reconstruir mensaje completo\n    let mensajeFinal = \"\";\n    \n    // 1. Agregar productos ya resueltos\n    if (estado.productos_resueltos && estado.productos_resueltos.length > 0) {\n      mensajeFinal = estado.productos_resueltos.join(\" y \");\n    }\n    \n    // 2. Agregar producto confirmado\n    const mensajeOriginal = estado.mensaje_procesado || \"\";\n    const regex = new RegExp(`\"${estado.apodo_usado}\"`, 'g');\n    const parteConfirmada = mensajeOriginal.match(new RegExp(`\\\\d+\\\\s+\"${estado.apodo_usado}\"`, 'g'));\n    \n    if (parteConfirmada) {\n      const cantidadYProducto = parteConfirmada[0].replace(`\"${estado.apodo_usado}\"`, sugerencia.producto);\n      if (mensajeFinal) {\n        mensajeFinal += \" y \" + cantidadYProducto;\n      } else {\n        mensajeFinal = cantidadYProducto;\n      }\n    }\n    \n    return [{\n      json: {\n        final_message: mensajeFinal,\n        sessionid: sessionid,\n        datetime: $json.datetime,\n        es_respuesta_sugerencia: true,\n        producto_confirmado: true,\n        eliminar_estado: true,\n        accion: \"confirmar_sugerencia\",\n        // NUEVOS CAMPOS PARA SHEETS:\n        apodo_confirmado: estado.apodo_usado,        // \"qrepa\"\n        producto_seleccionado: sugerencia.producto  // \"Arepas de QUESO\"\n      }\n    }];\n  }\n}\n\n// Si el usuario envía algo diferente mientras tiene sugerencias pendientes\nif (tieneEstadoPendiente) {\n  return [{\n    json: {\n      final_message: $json.texto_convertido,\n      sessionid: sessionid,\n      datetime: $json.datetime,\n      es_respuesta_sugerencia: false,\n      eliminar_estado: true,\n      procesar_nuevo_mensaje: true,\n      accion: \"limpiar_y_procesar\"\n    }\n  }];\n}\n\n// Flujo normal - no hay estado pendiente\nreturn [{\n  json: {\n    final_message: $json.texto_convertido,\n    sessionid: sessionid,\n    datetime: $json.datetime,\n    es_respuesta_sugerencia: false,\n    accion: \"flujo_normal\"\n  }\n}];"
      },
      "id": "3139636d-af71-4c3f-b46b-150d1013a2c8",
      "name": "¿Es respuesta a sugerencia?",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -512,
        0
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-pro"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $('¿Es respuesta a sugerencia?').item.json.final_message }} {{ $('Merge final').first().json.final_message }}"
            }
          ]
        },
        "options": {
          "systemMessage": "=Analiza el siguiente mensaje de un cliente y marca entre comillas (\"\") SOLO los nombres de productos o apodos que aparecen.\n\nREGLAS IMPORTANTES:\n- NO marques números de cantidad (1, 2, 3, etc.)\n- NO marques palabras como \"quiero\", \"dame\", \"vendo\", etc.\n- SOLO marca lo que parezca nombre de un producto alimenticio\n- Si hay \"1 arepa\", marca solo \"arepa\"\n- Si hay \"2 gaseosas cola\", marca solo \"gaseosas cola\"\n- si recibes en el mensaje 3 numeros seguidos, es porque pertenecen a un apodo o un producto.\n- Si recibes en el mensaje dos numeros separados por un punto, es porque pertenecen a un apodo o un producto\n- Si recibes en el mensaje la palabra \"producto\" no la marques entre comillas.\n- Si recibes en el mensaje la palabra \"combo\" o \"combos\" significa 1 arepa de queso y 1 chorizo\n- Si recibes en el mensaje palabras como \"pacas de\" \"cajas de\" \"bolsas de\" \"unidades de\" no los marques entre comillas.\n- Si recibes en el mensaje por ejemplo \"botellas de agua\" marca como producto.\n\nEjemplos:\n- Input: \"1 combo\" → Output: 1 \"arepa de queso\" 1 \"chorizo\"\n- Input: \"3 combo\" y una 350 → Output: 3 \"arepa de queso\" 3 \"chorizo\" y 1 \"350\"\n- Input: \"3, 2.5\" → Output: 3 \"2.5\"\n- Input: \"1, 3 50\" → Output: 1 \"350\"\n- Input: \"1 3 50\" → Output: 1 \"350\"\n- Input: \"1 350\" → Output: 1 \"350\"\n- input: \"2 2.5\" → Output: 2 \"2.5\"\n- Input: \"1 arepa\" → Output: 1 \"arepa\"\n- Input: \"quiero 2 gaseosas\" → Output: quiero 2 \"gaseosas\"\n- Input: \"dame qrpa\" → Output: dame \"qrpa\"\n\nDevuelve la frase original con SOLO los productos marcados entre comillas."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        768,
        32
      ],
      "id": "d75fec25-f7c3-4eef-9c91-e9a057466eb5",
      "name": "Message a model1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b312d7b6-e979-4e5a-a0a1-bef82730196e",
              "name": "sessionid",
              "value": "={{ $json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "d0338f07-19d6-4a5c-a1fc-da38909ba858",
              "name": "estado",
              "value": "={\n  \"mensaje_original\": \"{{$json.body.data.message.conversation}}\",\n  \"requiere_confirmacion\": false,\n  \"items\": []\n}\n",
              "type": "object"
            },
            {
              "id": "86953061-57dd-4c4a-958f-cf6d1151a0ed",
              "name": "texto",
              "value": "={{ $json.body.data.messageType }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2096,
        48
      ],
      "id": "bd84d269-ccc9-40f8-a98d-8eb0abd6db1b",
      "name": "prepararEstado"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ed4a047a-26b3-444d-9f46-129708b6c95c",
              "name": "final_message",
              "value": "={{ $json.content.parts[0].text }}",
              "type": "string"
            },
            {
              "id": "e54889f0-01ca-4a0d-a8e5-3beb8d152d81",
              "name": "sessionid",
              "value": "={{ $('IF1').item.json.sessionid }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1152,
        -96
      ],
      "id": "5dfa0e89-b17a-4bff-b5f4-0eb5ee4ad8dd",
      "name": "campos"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT estado FROM conversaciones_pendientes \nWHERE sessionid = '{{ $json.sessionid }}' \nAND expires_at > now()",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1008,
        112
      ],
      "id": "d08a7999-d57e-4991-a7fa-77807d949766",
      "name": "Verificar estado pendiente",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "QYN0UhXauGwlSaLm",
          "name": "transito"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "04b937d7-cccc-4b3a-947b-9e9ac4b73517",
                    "leftValue": "={{ $json.accion }}",
                    "rightValue": "confirmar_sugerencia",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "confirmar_sugerencia"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "50c8e025-9b71-4083-a021-4400931830da",
                    "leftValue": "={{ $json.accion }}",
                    "rightValue": "limpiar_y_procesar",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "limpiar_y_procesar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "229c9958-6639-4c19-8634-3f7d93de7623",
                    "leftValue": "={{ $json.accion }}",
                    "rightValue": "flujo_normal",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "flujo_normal"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.accion }}",
                    "rightValue": "=error_opcion",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "6d7e1e82-029d-49f2-a57b-9c6c85677a0e"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "error_opcion"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -192,
        -32
      ],
      "id": "dafc6d8c-bb86-444e-817d-d4afd19b37a2",
      "name": "Switch Router de acciones"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c9d48364-8878-4fd8-92af-6eea5758a905",
                    "leftValue": "={{ $json.estado.requiere_confirmacion === false && $json.productos_reemplazados === true }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Productos encontrados"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "081fc36a-bd9a-429b-958b-f6000c3dd8c2",
                    "leftValue": "={{ $json.sin_productos }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "sin productos"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9a1a6b49-c172-43dc-8e62-71895aa81f67",
                    "leftValue": "={{ $json.sin_coincidencia }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Productos no encontrados"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.estado.requiere_confirmacion }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "equals"
                    },
                    "id": "668c1461-783b-4b99-b507-37c98115ff20"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "requiere_sugerencias"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2528,
        16
      ],
      "id": "833fec9a-8d6f-42c1-9e2d-c156961a4460",
      "name": "Switch Requiere confirmación"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO conversaciones_pendientes (sessionid, estado)\nVALUES (\n  '{{ $(\"¿Es respuesta a sugerencia?\").first().json.sessionid }}',\n  '{{ JSON.stringify($json.estado) }}'::jsonb\n)\nON CONFLICT (sessionid) DO UPDATE\nSET estado = EXCLUDED.estado,\n    expires_at = now() + interval '10 minutes';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2736,
        496
      ],
      "id": "96cbe049-9643-407e-8da9-ccbf299e9c49",
      "name": "Guardar sugerencias en Postgres",
      "credentials": {
        "postgres": {
          "id": "QYN0UhXauGwlSaLm",
          "name": "transito"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $('Switch Requiere confirmación').item.json.mensaje_final }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2928,
        496
      ],
      "id": "a7abb075-688b-4eec-b469-98cc4cdc621e",
      "name": "Enviar sugerencias WhatsApp",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM conversaciones_pendientes \nWHERE sessionid = '{{ $json.sessionid }}'",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        208,
        -336
      ],
      "id": "771b1a01-e2fc-4e5a-901f-fe4c5037452f",
      "name": "Eliminar estado confirmado",
      "credentials": {
        "postgres": {
          "id": "QYN0UhXauGwlSaLm",
          "name": "transito"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $json.mensaje_final }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2768,
        272
      ],
      "id": "55ba925f-259a-4d83-a6f8-e99050dc3b5a",
      "name": "Enviar sugerencias WhatsApp1",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $json.mensaje_final }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        112,
        176
      ],
      "id": "b8e817f1-c866-4997-a96e-6a8909883e53",
      "name": "Enviar sugerencias WhatsApp2",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1216,
        0
      ],
      "id": "37451a71-e50e-471a-b474-c5570ec06390",
      "name": "Merge Audio/Texto"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -752,
        16
      ],
      "id": "e0e53dc0-2fdb-4335-90ed-7628cd5d2c66",
      "name": "Merge final"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM conversaciones_pendientes \nWHERE sessionid = '{{ $json.sessionid }}'",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        144,
        -112
      ],
      "id": "d3e13376-b02c-4a75-b7f8-4706c2998c6f",
      "name": "Eliminar estado confirmado1",
      "credentials": {
        "postgres": {
          "id": "QYN0UhXauGwlSaLm",
          "name": "transito"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// En lugar de referenciar otros nodos, usar el input directo\nreturn [{\n  json: {\n    texto_para_administrador: $json.mensaje_final || $json.final_message || \"Error\"\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3120,
        -272
      ],
      "id": "31642f1d-85ee-4276-a50a-5da481b88626",
      "name": "mensajeListo"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5b107e9d-1bce-43c0-8423-f1bd63235a3f",
              "name": "final_message",
              "value": "={{ $('¿Es respuesta a sugerencia?').item.json.final_message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        576,
        -336
      ],
      "id": "2fb67a46-e742-43c4-80de-add8cede7bd9",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "VEIIikYeRQYjWSgu",
          "mode": "list",
          "cachedResultName": "actualizar_precio"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('mensajeListo').item.json.texto_para_administrador }}",
            "telefono": "={{ $('¿Es respuesta a sugerencia?').first().json.sessionid }}",
            "fecha": "={{ $('¿Es respuesta a sugerencia?').first().json.datetime }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4496,
        -608
      ],
      "id": "2ed89449-c876-4239-bf50-67b5e3117406",
      "name": "actualizarPrecios"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    producto AS \"PRODUCTO\",\n    apodo AS \"APODO\"\nFROM apodos_productos\nWHERE activo = true\nORDER BY producto, apodo",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1568,
        64
      ],
      "id": "e5786eb0-79be-49e4-9c4e-814b732af911",
      "name": "obtenerApodos1",
      "credentials": {
        "postgres": {
          "id": "QYN0UhXauGwlSaLm",
          "name": "transito"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO apodos_productos (producto, apodo, fuente)\nVALUES (\n    '{{ $(\"¿Es respuesta a sugerencia?\").item.json.producto_seleccionado }}',\n    '{{ $(\"¿Es respuesta a sugerencia?\").item.json.apodo_confirmado }}',\n    'confirmacion_usuario'\n)\nON CONFLICT (producto, apodo) \nDO UPDATE SET \n    fecha_creacion = CURRENT_TIMESTAMP,\n    activo = true\nRETURNING *;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        816,
        -464
      ],
      "id": "b3f33d5c-ed02-4736-82eb-b0b1db5eaec8",
      "name": "Guardar apodo aprendido",
      "credentials": {
        "postgres": {
          "id": "QYN0UhXauGwlSaLm",
          "name": "transito"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "ZreAVVrz07RDx1dx",
          "mode": "list",
          "cachedResultName": "envio_link_nuevoProducto"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('mensajeListo').item.json.texto_para_administrador }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}",
            "fecha": "={{ $('¿Es respuesta a sugerencia?').first().json.datetime }}",
            "telefono": "={{ $('¿Es respuesta a sugerencia?').first().json.sessionid }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4128,
        416
      ],
      "id": "dbe218b2-914a-467e-befb-87cf66a3f998",
      "name": "crearProducto1"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n-n8n.jac8tn.easypanel.host",
            "user-agent": "axios/1.7.9",
            "content-length": "1004",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n-n8n.jac8tn.easypanel.host",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "9c2ac7b198e2",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "Gerson_cuentas",
            "data": {
              "key": {
                "remoteJid": "573103015865@s.whatsapp.net",
                "fromMe": false,
                "id": "3F2D0C4879C044B566EE"
              },
              "pushName": "Alejandro",
              "status": "DELIVERY_ACK",
              "message": {
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "e3GnwCc3oAo36g==",
                    "senderTimestamp": "1758433967",
                    "recipientKeyHash": "Ri9rRGFEO65E1g==",
                    "recipientTimestamp": "1757636125"
                  },
                  "deviceListMetadataVersion": 2
                },
                "conversation": "una botella de agua"
              },
              "contextInfo": {
                "expiration": 0,
                "ephemeralSettingTimestamp": "0",
                "disappearingMode": {
                  "initiator": "CHANGED_IN_CHAT"
                }
              },
              "messageType": "conversation",
              "messageTimestamp": 1758489405,
              "instanceId": "058bae9c-0346-42da-8811-6c7aad5dbf0c",
              "source": "unknown"
            },
            "destination": "https://n8n-n8n.jac8tn.easypanel.host/webhook/0ebc283e-1a2a-4e30-8649-a42413095db8",
            "date_time": "2025-09-21T18:16:45.292Z",
            "sender": "573102304801@s.whatsapp.net",
            "server_url": "https://evolution-evolution-api.jac8tn.easypanel.host",
            "apikey": "630D35671CDD-4961-B1E5-09E0B5145173"
          },
          "webhookUrl": "https://n8n-n8n.jac8tn.easypanel.host/webhook/0ebc283e-1a2a-4e30-8649-a42413095db8",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Transcribe a recording1": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Final_message_audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final_message_audio": {
      "main": [
        [
          {
            "node": "Merge Audio/Texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FInal_message_text": {
      "main": [
        [
          {
            "node": "Merge Audio/Texto",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "FInal_message_text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "prepararEstado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Obter m dia em base64",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obter m dia em base64": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Transcribe a recording1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Administrador1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Execute Workflow1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Message a model1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "registroVentas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "actualizarPrecios",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "consumoPersonal",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "informeVentas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ingresarProductoInventario",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "crearProducto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Administrador1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "producto_detectado": {
      "main": [
        [
          {
            "node": "obtenerApodos1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "calcularSimilitud1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calcularSimilitud1": {
      "main": [
        [
          {
            "node": "Switch Requiere confirmación",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Es respuesta a sugerencia?": {
      "main": [
        [
          {
            "node": "Switch Router de acciones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model1": {
      "main": [
        [
          {
            "node": "campos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepararEstado": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "campos": {
      "main": [
        [
          {
            "node": "producto_detectado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar estado pendiente": {
      "main": [
        [
          {
            "node": "Merge final",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Switch Router de acciones": {
      "main": [
        [
          {
            "node": "Eliminar estado confirmado",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Eliminar estado confirmado1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Enviar sugerencias WhatsApp2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Requiere confirmación": {
      "main": [
        [
          {
            "node": "mensajeListo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "mensajeListo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Enviar sugerencias WhatsApp1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Guardar sugerencias en Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar sugerencias en Postgres": {
      "main": [
        [
          {
            "node": "Enviar sugerencias WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar sugerencias WhatsApp": {
      "main": [
        []
      ]
    },
    "Eliminar estado confirmado": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Audio/Texto": {
      "main": [
        [
          {
            "node": "Merge final",
            "type": "main",
            "index": 0
          },
          {
            "node": "Verificar estado pendiente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge final": {
      "main": [
        [
          {
            "node": "¿Es respuesta a sugerencia?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Eliminar estado confirmado1": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mensajeListo": {
      "main": [
        [
          {
            "node": "Administrador1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "mensajeListo",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guardar apodo aprendido",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtenerApodos1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "394e5063-cd7b-46b8-9bbc-5a7d1befbecf",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "07f67ec32baaad4ae3d75f4e22d6ad4d1aa561c2ad8388f49ad7031ee0fe8de1"
  },
  "id": "A6O5AP9ePlWwaaY9",
  "tags": []
}