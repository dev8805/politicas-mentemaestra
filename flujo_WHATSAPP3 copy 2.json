{
  "name": "flujo_WHATSAPP3 copy 2",
  "nodes": [
    {
      "parameters": {
        "resource": "audio",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-pro"
        },
        "inputType": "binary",
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -896,
        -224
      ],
      "id": "28e8396f-7731-4a1a-9175-5c1e8e251521",
      "name": "Transcribe a recording1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $json.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n// Diccionario básico de números en palabras a números\nconst numeros = {\n  \"cero\": 0,\n  \"uno\": 1, \"una\": 1, \"un\": 1,\n  \"dos\": 2,\n  \"tres\": 3,\n  \"cuatro\": 4,\n  \"cinco\": 5,\n  \"seis\": 6,\n  \"siete\": 7,\n  \"ocho\": 8,\n  \"nueve\": 9,\n  \"diez\": 10,\n  \"once\": 11,\n  \"doce\": 12,\n  \"trece\": 13,\n  \"catorce\": 14,\n  \"quince\": 15,\n  \"dieciséis\": 16, \"dieciseis\": 16,\n  \"diecisiete\": 17,\n  \"dieciocho\": 18,\n  \"diecinueve\": 19,\n  \"veinte\": 20,\n  \"veintiuno\": 21, \"veintiuna\": 21,\n  \"veintidós\": 22, \"veintidos\": 22,\n  \"veintitrés\": 23, \"veintitres\": 23,\n  \"veinticuatro\": 24,\n  \"veinticinco\": 25,\n  \"veintiséis\": 26, \"veintiseis\": 26,\n  \"veintisiete\": 27,\n  \"veintiocho\": 28,\n  \"veintinueve\": 29,\n  \"treinta\": 30,\n  \"cuarenta\": 40,\n  \"cincuenta\": 50,\n  \"sesenta\": 60,\n  \"setenta\": 70,\n  \"ochenta\": 80,\n  \"noventa\": 90\n};\n\n// Función para convertir palabras a números o símbolos\nfunction palabraANumero(palabra) {\n  palabra = palabra.toLowerCase();\n\n  // Conversión de \"punto\" a \".\"\n  if (palabra === \"punto\") {\n    return \".\";\n  }\n\n  if (numeros.hasOwnProperty(palabra)) {\n    return numeros[palabra];\n  }\n\n  // Manejo de combinaciones como \"treinta y cinco\"\n  if (palabra.includes(\" y \")) {\n    let partes = palabra.split(\" y \").map(p => p.trim());\n    if (numeros[partes[0]] && numeros[partes[1]]) {\n      return numeros[partes[0]] + numeros[partes[1]];\n    }\n  }\n\n  return palabra; // si no se reconoce, se deja igual\n}\n\n// Reemplazar en el texto\ntexto = texto.replace(/\\b([a-záéíóúñ]+(?:\\s+y\\s+[a-záéíóúñ]+)?)\\b/gi, (match) => {\n  const convertido = palabraANumero(match);\n  return convertido !== match ? convertido : match;\n});\n\nreturn { texto_convertido: texto };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -672,
        -224
      ],
      "id": "38ce7dfd-db4d-4c3f-8ffc-12edc50fcf3d",
      "name": "Code5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b65575a3-b476-4c0f-8ce4-a7f93531b7f0",
              "name": "final_message",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            },
            {
              "id": "bf8845d4-5e4e-4596-b9d9-ec7940739e0c",
              "name": "sessionid",
              "value": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "d1aea00f-74e0-4acd-bf3d-5984b8eade6c",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -448,
        -224
      ],
      "id": "cee0d2a5-1899-4eba-ba9f-84cd2b5ea280",
      "name": "Final_message_audio"
    },
    {
      "parameters": {
        "jsCode": "// Solo para depurar\nconsole.log(\"Contenido de $input.first().json:\", $input.first().json);\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        -128
      ],
      "id": "0942591e-4f60-4938-b660-133ec355f33c",
      "name": "Code2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b355a1d1-f888-4ce4-b12b-03a9644fb07e",
              "name": "final_message",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            },
            {
              "id": "aa4f659e-93fd-458f-8cb0-d6b2bd655160",
              "name": "sessionid",
              "value": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "0f0f416c-ed04-4b77-bb03-23a469d40113",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -432,
        -16
      ],
      "id": "188dc711-6a2e-4b13-a45e-53898a4d544c",
      "name": "FInal_message_text"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $input.first().json.body.data.message.conversation || \"\";\n\n// Diccionario básico de números en palabras a números\nconst numeros = {\n  \"cero\": \"0\",\n  \"uno\": \"1\", \"una\": \"1\", \"un\": \"1\",\n  \"dos\": \"2\",\n  \"tres\": \"3\",\n  \"cuatro\": \"4\",\n  \"cinco\": \"5\",\n  \"seis\": \"6\",\n  \"siete\": \"7\",\n  \"ocho\": \"8\",\n  \"nueve\": \"9\",\n  \"diez\": \"10\",\n  \"once\": \"11\",\n  \"doce\": \"12\",\n  \"trece\": \"13\",\n  \"catorce\": \"14\",\n  \"quince\": \"15\",\n  \"dieciséis\": \"16\", \"dieciseis\": \"16\",\n  \"diecisiete\": \"17\",\n  \"dieciocho\": \"18\",\n  \"diecinueve\": \"19\",\n  \"veinte\": \"20\",\n  \"veintiuno\": \"21\", \"veintiuna\": \"21\",\n  \"veintidós\": \"22\", \"veintidos\": \"22\",\n  \"veintitrés\": \"23\", \"veintitres\": \"23\",\n  \"veinticuatro\": \"24\",\n  \"veinticinco\": \"25\",\n  \"veintiséis\": \"26\", \"veintiseis\": \"26\",\n  \"veintisiete\": \"27\",\n  \"veintiocho\": \"28\",\n  \"veintinueve\": \"29\",\n  \"treinta\": \"30\",\n  \"cuarenta\": \"40\",\n  \"cincuenta\": \"50\",\n  \"sesenta\": \"60\",\n  \"setenta\": \"70\",\n  \"ochenta\": \"80\",\n  \"noventa\": \"90\",\n\n};\n\n// Función para convertir palabras a números o símbolos\nfunction palabraANumero(palabra) {\n  palabra = palabra.toLowerCase().trim();\n  \n  // Conversión de \"punto\" a \".\"\n  if (palabra === \"punto\") {\n    return \".\";\n  }\n  \n  if (numeros.hasOwnProperty(palabra)) {\n    return numeros[palabra];\n  }\n  \n  // Manejo de combinaciones como \"treinta y cinco\"\n  if (palabra.includes(\" y \")) {\n    let partes = palabra.split(\" y \").map(p => p.trim());\n    if (numeros[partes[0]] && numeros[partes[1]]) {\n      return (parseInt(numeros[partes[0]]) + parseInt(numeros[partes[1]])).toString();\n    }\n  }\n  \n  return palabra; // si no se reconoce, se deja igual\n}\n\n// Procesar el texto palabra por palabra\nlet palabras = texto.split(/(\\s+)/); // Mantiene los espacios\nlet resultado = palabras.map(palabra => {\n  // Solo procesar si no es un espacio y contiene letras\n  if (palabra.trim() && /[a-záéíóúñ]/i.test(palabra)) {\n    return palabraANumero(palabra);\n  }\n  return palabra;\n}).join('');\n\nreturn { texto_convertido: resultado };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        -16
      ],
      "id": "1e2ada38-3a47-40e3-b84a-df948b6b9fb0",
      "name": "Code8"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "4ee1df92-7f87-454e-be06-e3ad837a105e",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1776,
        -16
      ],
      "id": "5a2caa4a-bb16-47aa-9594-6b2e0de007a0",
      "name": "Webhook",
      "webhookId": "4ee1df92-7f87-454e-be06-e3ad837a105e"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "26462d57-8abb-4e95-88ae-0f74d2362787",
                    "leftValue": "={{ $json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.data.messageType }}",
                    "rightValue": "=conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "1066c446-0129-4619-8eff-ec1b00093dda"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "texto"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1552,
        -16
      ],
      "id": "909e985c-b686-437d-9321-62b5ee72ed4d",
      "name": "Switch2"
    },
    {
      "parameters": {
        "resource": "chat-api",
        "operation": "get-media-base64",
        "instanceName": "={{ $json.body.instance }}",
        "messageId": "={{ $json.body.data.key.id }}"
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -1344,
        -224
      ],
      "id": "752840aa-d613-4d7b-a271-13d6dae9502c",
      "name": "Obter m dia em base64",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data.base64",
        "options": {
          "fileName": "audio.mp3"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1120,
        -224
      ],
      "id": "12d4b85e-395c-47b7-8c69-0584d783eed2",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "1xCDK2DGnsJt4GD0",
          "mode": "list",
          "cachedResultName": "obtener_inventario"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $json.final_message }}",
            "telefono": "={{ $json.sessionid }}",
            "fecha": "={{ $json.datetime }}",
            "instancia": "={{ $('Webhook').item.json.body.instance }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        208,
        -256
      ],
      "id": "2c8fc319-1a4d-485b-a6c8-6140ed3415bd",
      "name": "Execute Workflow1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b8711675-481a-47a5-b7fc-7fb78291914c",
              "leftValue": "={{ $json.final_message }}",
              "rightValue": "=inventario",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        0,
        -128
      ],
      "id": "8a289040-378e-44c5-8d76-5c3ca0d5e4f6",
      "name": "IF1"
    },
    {
      "parameters": {
        "jsCode": "// Entrada esperada: puede venir como string o como array\n// Ejemplo 1: \"qrpa\"\n// Ejemplo 2: [\"qrpa\", \"arepa\"]\n\nlet entrada = $json.productos_detectados || $json.final_message || \"\";\n\n// Si es string, lo convertimos en array de una sola palabra\nif (typeof entrada === \"string\") {\n  entrada = [entrada.trim()];\n}\n\n// Si no es array, lo forzamos a array\nif (!Array.isArray(entrada)) {\n  entrada = [String(entrada)];\n}\n\n// Normalizamos: quitamos vacíos\nentrada = entrada.filter(p => p && p.trim() !== \"\");\n\n// Ahora devolvemos un array de objetos, uno por producto\nreturn entrada.map(p => ({\n  json: { producto_detectado: p }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        16
      ],
      "id": "3a42920e-474f-4603-a398-8c8a731d4ded",
      "name": "producto_detectado"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vkj-0XG2xG8AixToCz2oy_e6dbo8a7Nf500tXRg7W2A",
          "mode": "list",
          "cachedResultName": "APODOS Y REFERENCIAS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vkj-0XG2xG8AixToCz2oy_e6dbo8a7Nf500tXRg7W2A/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Hoja 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vkj-0XG2xG8AixToCz2oy_e6dbo8a7Nf500tXRg7W2A/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        992,
        160
      ],
      "id": "d1ac0a2a-b727-4107-8978-349860a75f7e",
      "name": "obtenerApodos",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1248,
        32
      ],
      "id": "4d5a7b1b-6641-4958-99ca-e34eb4d4d3fe",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "function normalizar(s) {\n  if (s === undefined || s === null) return \"\";\n  return String(s)\n    .trim()\n    .toLowerCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/\\s+/g, \" \");\n}\n\nfunction levenshtein(a, b) {\n  const m = a.length, n = b.length;\n  if (m === 0) return n;\n  if (n === 0) return m;\n  const dp = Array.from({ length: m + 1 }, () => new Array(n + 1).fill(0));\n  for (let i = 0; i <= m; i++) dp[i][0] = i;\n  for (let j = 0; j <= n; j++) dp[0][j] = j;\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      dp[i][j] = Math.min(\n        dp[i - 1][j] + 1,\n        dp[i][j - 1] + 1,\n        dp[i - 1][j - 1] + cost\n      );\n    }\n  }\n  return dp[m][n];\n}\n\nfunction similitud(a, b) {\n  if (!a && !b) return 1;\n  if (!a || !b) return 0;\n  const dist = levenshtein(a, b);\n  return 1 - dist / Math.max(a.length, b.length);\n}\n\n// Extraer todas las palabras entre comillas\nfunction extraerMarcados(texto) {\n  if (!texto) return [];\n  const matches = String(texto).match(/\"([^\"]+)\"/g);\n  if (!matches) return [];\n  return matches.map(m => m.replace(/\"/g, \"\"));\n}\n\nconst UMBRAL_ACEPTAR = 0.85;\nconst UMBRAL_SUGERIR = 0.60;\n\nlet resultados = [];\n\n// Traemos todos los apodos desde el nodo obtenerApodos\nconst apodos = $items(\"obtenerApodos\");\n\nfor (const item of items) {\n  // 👇 Ahora usamos producto_detectado como la frase marcada por la IA\n  const frase = item.json.producto_detectado || \"\";\n  const detectados = extraerMarcados(frase);\n\n  for (const detectado of detectados) {\n    const entrada = normalizar(detectado);\n\n    if (!entrada) {\n      resultados.push({\n        json: {\n          apodo_usado: detectado || \"\",\n          requiere_confirmacion: true,\n          sin_coincidencia: true,\n          razon: \"producto_detectado_vacio\"\n        }\n      });\n      continue;\n    }\n\n    // 1) Coincidencia exacta\n    let exacto = apodos.find(f => normalizar(f.json.APODO) === entrada);\n    if (exacto) {\n      resultados.push({\n        json: {\n          producto: exacto.json.PRODUCTO,\n          apodo_usado: entrada,\n          confianza: 1,\n          requiere_confirmacion: false,\n          razon: \"match_exacto\"\n        }\n      });\n      continue;\n    }\n\n    // 2) Calcular similitud con todos los apodos\n    let comparaciones = [];\n    for (const fila of apodos) {\n      const apodo = normalizar(fila.json.APODO);\n      const score = similitud(entrada, apodo);\n      comparaciones.push({\n        producto: fila.json.PRODUCTO,\n        apodo,\n        score\n      });\n    }\n\n    comparaciones.sort((a, b) => b.score - a.score);\n    const top3 = comparaciones.slice(0, 3);\n\n    // 3) Decisión\n    if (top3[0] && top3[0].score >= UMBRAL_ACEPTAR) {\n      resultados.push({\n        json: {\n          producto: top3[0].producto,\n          apodo_usado: entrada,\n          confianza: Number(top3[0].score.toFixed(3)),\n          requiere_confirmacion: false,\n          razon: \"match_fuzzy_aceptado\"\n        }\n      });\n    } else if (top3[0] && top3[0].score >= UMBRAL_SUGERIR) {\n      resultados.push({\n        json: {\n          apodo_usado: entrada,\n          sugerencias: top3.map((r, i) => ({\n            opcion: i + 1,\n            producto: r.producto,\n            apodo: r.apodo,\n            confianza: Number(r.score.toFixed(3))\n          })),\n          requiere_confirmacion: true,\n          razon: \"match_fuzzy_sugerir_top3\"\n        }\n      });\n    } else {\n      resultados.push({\n        json: {\n          apodo_usado: entrada,\n          requiere_confirmacion: true,\n          sin_coincidencia: true,\n          razon: \"sin_match\"\n        }\n      });\n    }\n  }\n}\n\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        32
      ],
      "id": "c6cdae31-4c66-4150-bf59-7b009f587dbf",
      "name": "calcularSimilitud1"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-pro"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $json.final_message }}"
            }
          ]
        },
        "options": {
          "systemMessage": "=Analiza el siguiente {{ $json.final_message }} mensaje de un cliente y marca entre comillas (\"\") los posibles productos o apodos que aparecen. \nNo inventes productos, solo marca lo que parezca un producto o apodo. \nDevuelve la frase original con las marcas.\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        208,
        -32
      ],
      "id": "a55d2332-c89e-4ee9-ba7a-57b0ebc29168",
      "name": "Message a model",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ed4a047a-26b3-444d-9f46-129708b6c95c",
              "name": "final_message",
              "value": "={{ $json.content.parts[0].text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        560,
        -32
      ],
      "id": "dd523419-0157-4934-b9f7-167a12997bed",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "let confirmados = [];\nlet sugerencias = [];\nlet sinMatch = [];\n\nfor (const r of items) {\n  if (r.json.requiere_confirmacion === false && !r.json.sin_coincidencia) {\n    // Confirmados\n    confirmados.push(`- ${r.json.producto} (apodo: ${r.json.apodo_usado})`);\n  } else if (r.json.sugerencias) {\n    // Sugerencias\n    let opciones = r.json.sugerencias.map(s => {\n      let numEmoji = [\"1️⃣\",\"2️⃣\",\"3️⃣\",\"4️⃣\",\"5️⃣\"][s.opcion - 1] || `${s.opcion})`;\n      return `${numEmoji} ${s.producto} (apodo: ${s.apodo})`;\n    }).join(\"\\n\");\n    sugerencias.push(\n      `🤔 No estuve 100% seguro con \"${r.json.apodo_usado}\".\\n¿Te refieres a alguna de estas opciones?\\n\\n${opciones}`\n    );\n  } else if (r.json.sin_coincidencia) {\n    // Sin coincidencia\n    sinMatch.push(\n      `❌ No encontré coincidencias para: \"${r.json.apodo_usado}\".\\n` +\n      `¿Podrías aclarar o escribirlo de otra forma?\\n\\n` +\n      `Si lo prefieres, puedes crear este producto aquí:\\n👉 https://n8n-n8n.jac8tn.easypanel.host/form/084c7fb5-5b09-462b-bbc7-8378fe372e60`\n    );\n  }\n}\n\n// Construcción del mensaje final\nlet mensaje = \"✅ He entendido tu pedido:\\n\\n\";\n\nif (confirmados.length > 0) {\n  mensaje += \"Productos confirmados:\\n\" + confirmados.join(\"\\n\") + \"\\n\\n\";\n}\n\nif (sugerencias.length > 0) {\n  mensaje += sugerencias.join(\"\\n\\n\") + \"\\n\\n\";\n}\n\nif (sinMatch.length > 0) {\n  mensaje += sinMatch.join(\"\\n\\n\") + \"\\n\\n\";\n}\n\nreturn [{ json: { mensaje } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1728,
        32
      ],
      "id": "8fc8fd67-f429-4be5-b818-31df39537081",
      "name": "armaMensaje"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $json.mensaje }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        1936,
        32
      ],
      "id": "6264a2af-74fa-407d-857e-2be7a9c10a2f",
      "name": "Enviar texto",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n-n8n.jac8tn.easypanel.host",
            "user-agent": "axios/1.7.9",
            "content-length": "989",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n-n8n.jac8tn.easypanel.host",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "9c2ac7b198e2",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "Gerson_cuentas",
            "data": {
              "key": {
                "remoteJid": "573103015865@s.whatsapp.net",
                "fromMe": false,
                "id": "3F189082A05122D0B723"
              },
              "pushName": "Alejandro",
              "status": "DELIVERY_ACK",
              "message": {
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "e3GnwCc3oAo36g==",
                    "senderTimestamp": "1757137861",
                    "recipientKeyHash": "Ri9rRGFEO65E1g==",
                    "recipientTimestamp": "1757636125"
                  },
                  "deviceListMetadataVersion": 2
                },
                "conversation": "qrpa"
              },
              "contextInfo": {
                "expiration": 0,
                "ephemeralSettingTimestamp": "0",
                "disappearingMode": {
                  "initiator": "CHANGED_IN_CHAT"
                }
              },
              "messageType": "conversation",
              "messageTimestamp": 1758086200,
              "instanceId": "058bae9c-0346-42da-8811-6c7aad5dbf0c",
              "source": "unknown"
            },
            "destination": "https://n8n-n8n.jac8tn.easypanel.host/webhook/0ebc283e-1a2a-4e30-8649-a42413095db8",
            "date_time": "2025-09-17T02:16:40.899Z",
            "sender": "573102304801@s.whatsapp.net",
            "server_url": "https://evolution-evolution-api.jac8tn.easypanel.host",
            "apikey": "630D35671CDD-4961-B1E5-09E0B5145173"
          },
          "webhookUrl": "https://n8n-n8n.jac8tn.easypanel.host/webhook/0ebc283e-1a2a-4e30-8649-a42413095db8",
          "executionMode": "production"
        }
      }
    ],
    "Code2": [
      {
        "json": {
          "final_message": "qrpa",
          "sessionid": "573103015865@s.whatsapp.net",
          "datetime": "17/09/2025"
        }
      }
    ]
  },
  "connections": {
    "Transcribe a recording1": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Final_message_audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final_message_audio": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FInal_message_text": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "FInal_message_text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Obter m dia em base64",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obter m dia em base64": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Transcribe a recording1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Execute Workflow1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "producto_detectado": {
      "main": [
        [
          {
            "node": "obtenerApodos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtenerApodos": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "calcularSimilitud1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "producto_detectado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calcularSimilitud1": {
      "main": [
        [
          {
            "node": "armaMensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "armaMensaje": {
      "main": [
        [
          {
            "node": "Enviar texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar texto": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "45c62acb-1b0f-4dc0-8abd-cd5d821911d9",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "07f67ec32baaad4ae3d75f4e22d6ad4d1aa561c2ad8388f49ad7031ee0fe8de1"
  },
  "id": "FlBtuwubtMjaZ6ak",
  "tags": []
}