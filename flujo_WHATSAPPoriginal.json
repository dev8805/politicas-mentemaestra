{
  "name": "flujo_WHATSAPP3",
  "nodes": [
    {
      "parameters": {
        "resource": "audio",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-pro"
        },
        "inputType": "binary",
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -944,
        -256
      ],
      "id": "766ea732-0ba6-4717-ba08-3dddf5691b91",
      "name": "Transcribe a recording1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $json.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n// Diccionario básico de números en palabras a números\nconst numeros = {\n  \"cero\": 0,\n  \"uno\": 1, \"una\": 1, \"un\": 1,\n  \"dos\": 2,\n  \"tres\": 3,\n  \"cuatro\": 4,\n  \"cinco\": 5,\n  \"seis\": 6,\n  \"siete\": 7,\n  \"ocho\": 8,\n  \"nueve\": 9,\n  \"diez\": 10,\n  \"once\": 11,\n  \"doce\": 12,\n  \"trece\": 13,\n  \"catorce\": 14,\n  \"quince\": 15,\n  \"dieciséis\": 16, \"dieciseis\": 16,\n  \"diecisiete\": 17,\n  \"dieciocho\": 18,\n  \"diecinueve\": 19,\n  \"veinte\": 20,\n  \"veintiuno\": 21, \"veintiuna\": 21,\n  \"veintidós\": 22, \"veintidos\": 22,\n  \"veintitrés\": 23, \"veintitres\": 23,\n  \"veinticuatro\": 24,\n  \"veinticinco\": 25,\n  \"veintiséis\": 26, \"veintiseis\": 26,\n  \"veintisiete\": 27,\n  \"veintiocho\": 28,\n  \"veintinueve\": 29,\n  \"treinta\": 30,\n  \"cuarenta\": 40,\n  \"cincuenta\": 50,\n  \"sesenta\": 60,\n  \"setenta\": 70,\n  \"ochenta\": 80,\n  \"noventa\": 90\n};\n\n// Función para convertir palabras a números o símbolos\nfunction palabraANumero(palabra) {\n  palabra = palabra.toLowerCase();\n\n  // Conversión de \"punto\" a \".\"\n  if (palabra === \"punto\") {\n    return \".\";\n  }\n\n  if (numeros.hasOwnProperty(palabra)) {\n    return numeros[palabra];\n  }\n\n  // Manejo de combinaciones como \"treinta y cinco\"\n  if (palabra.includes(\" y \")) {\n    let partes = palabra.split(\" y \").map(p => p.trim());\n    if (numeros[partes[0]] && numeros[partes[1]]) {\n      return numeros[partes[0]] + numeros[partes[1]];\n    }\n  }\n\n  return palabra; // si no se reconoce, se deja igual\n}\n\n// Reemplazar en el texto\ntexto = texto.replace(/\\b([a-záéíóúñ]+(?:\\s+y\\s+[a-záéíóúñ]+)?)\\b/gi, (match) => {\n  const convertido = palabraANumero(match);\n  return convertido !== match ? convertido : match;\n});\n\nreturn { texto_convertido: texto };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -720,
        -256
      ],
      "id": "f5fbf3ae-3ad9-4adb-884d-599bc4a95e93",
      "name": "Code5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b65575a3-b476-4c0f-8ce4-a7f93531b7f0",
              "name": "final_message",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            },
            {
              "id": "bf8845d4-5e4e-4596-b9d9-ec7940739e0c",
              "name": "sessionid",
              "value": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "d1aea00f-74e0-4acd-bf3d-5984b8eade6c",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -496,
        -256
      ],
      "id": "89bd467d-8a1a-4ef3-aed6-398c225e96e4",
      "name": "Final_message_audio"
    },
    {
      "parameters": {
        "jsCode": "// Solo para depurar\nconsole.log(\"Contenido de $input.first().json:\", $input.first().json);\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        -160
      ],
      "id": "307fcc58-a470-42e3-a1a1-4a8e1d85517e",
      "name": "Code2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aa4f659e-93fd-458f-8cb0-d6b2bd655160",
              "name": "sessionid",
              "value": "={{ $('prepararEstado').item.json.sessionid }}",
              "type": "string"
            },
            {
              "id": "b355a1d1-f888-4ce4-b12b-03a9644fb07e",
              "name": "estado",
              "value": "={\n  \"mensaje_original\": \"{{ $json.texto_convertido }}\",\n  \"requiere_confirmacion\": false,\n  \"items\": []\n}\n",
              "type": "string"
            },
            {
              "id": "1e088d66-819f-4e4d-ad34-9ca8e437290d",
              "name": "texto_convertido",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -480,
        -48
      ],
      "id": "669f384b-867b-424f-aca4-f725172bf489",
      "name": "FInal_message_text"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $input.first().json.estado.mensaje_original || \"\";\n\n// Diccionario básico de números en palabras a números\nconst numeros = {\n  \"cero\": \"0\",\n  \"uno\": \"1\", \"una\": \"1\", \"un\": \"1\",\n  \"dos\": \"2\",\n  \"tres\": \"3\",\n  \"cuatro\": \"4\",\n  \"cinco\": \"5\",\n  \"seis\": \"6\",\n  \"siete\": \"7\",\n  \"ocho\": \"8\",\n  \"nueve\": \"9\",\n  \"diez\": \"10\",\n  \"once\": \"11\",\n  \"doce\": \"12\",\n  \"trece\": \"13\",\n  \"catorce\": \"14\",\n  \"quince\": \"15\",\n  \"dieciséis\": \"16\", \"dieciseis\": \"16\",\n  \"diecisiete\": \"17\",\n  \"dieciocho\": \"18\",\n  \"diecinueve\": \"19\",\n  \"veinte\": \"20\",\n  \"veintiuno\": \"21\", \"veintiuna\": \"21\",\n  \"veintidós\": \"22\", \"veintidos\": \"22\",\n  \"veintitrés\": \"23\", \"veintitres\": \"23\",\n  \"veinticuatro\": \"24\",\n  \"veinticinco\": \"25\",\n  \"veintiséis\": \"26\", \"veintiseis\": \"26\",\n  \"veintisiete\": \"27\",\n  \"veintiocho\": \"28\",\n  \"veintinueve\": \"29\",\n  \"treinta\": \"30\",\n  \"cuarenta\": \"40\",\n  \"cincuenta\": \"50\",\n  \"sesenta\": \"60\",\n  \"setenta\": \"70\",\n  \"ochenta\": \"80\",\n  \"noventa\": \"90\",\n\n};\n\n// Función para convertir palabras a números o símbolos\nfunction palabraANumero(palabra) {\n  palabra = palabra.toLowerCase().trim();\n  \n  // Conversión de \"punto\" a \".\"\n  if (palabra === \"punto\") {\n    return \".\";\n  }\n  \n  if (numeros.hasOwnProperty(palabra)) {\n    return numeros[palabra];\n  }\n  \n  // Manejo de combinaciones como \"treinta y cinco\"\n  if (palabra.includes(\" y \")) {\n    let partes = palabra.split(\" y \").map(p => p.trim());\n    if (numeros[partes[0]] && numeros[partes[1]]) {\n      return (parseInt(numeros[partes[0]]) + parseInt(numeros[partes[1]])).toString();\n    }\n  }\n  \n  return palabra; // si no se reconoce, se deja igual\n}\n\n// Procesar el texto palabra por palabra\nlet palabras = texto.split(/(\\s+)/); // Mantiene los espacios\nlet resultado = palabras.map(palabra => {\n  // Solo procesar si no es un espacio y contiene letras\n  if (palabra.trim() && /[a-záéíóúñ]/i.test(palabra)) {\n    return palabraANumero(palabra);\n  }\n  return palabra;\n}).join('');\n\nreturn { texto_convertido: resultado };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -704,
        -48
      ],
      "id": "16289a1c-219c-49b2-adc5-0efda50375bb",
      "name": "Code8"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "0ebc283e-1a2a-4e30-8649-a42413095db8",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2144,
        -48
      ],
      "id": "5dad4fd4-97cf-4f71-b199-935290d68d30",
      "name": "Webhook",
      "webhookId": "0ebc283e-1a2a-4e30-8649-a42413095db8"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cccb067b-4dd7-4efc-8b4f-70a2e8f0fcc3",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "=conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "1066c446-0129-4619-8eff-ec1b00093dda"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "texto"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1696,
        -48
      ],
      "id": "938ad423-44a4-43fa-a634-fae87e2c3eb9",
      "name": "Switch2"
    },
    {
      "parameters": {
        "resource": "chat-api",
        "operation": "get-media-base64",
        "instanceName": "={{ $json.body.instance }}",
        "messageId": "={{ $json.body.data.key.id }}"
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -1392,
        -256
      ],
      "id": "68a88e3f-565b-40c8-982e-95041c6a61ab",
      "name": "Obter m dia em base64",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data.base64",
        "options": {
          "fileName": "audio.mp3"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1168,
        -256
      ],
      "id": "bf514331-6434-4837-b63d-a0986808ea0a",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3328,
        288
      ],
      "id": "56bb1434-9a4a-4bfb-bcaf-ef270396cc7a",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "1xCDK2DGnsJt4GD0",
          "mode": "list",
          "cachedResultName": "obtener_inventario"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $json.final_message }}",
            "telefono": "={{ $json.sessionid }}",
            "fecha": "={{ $json.datetime }}",
            "instancia": "={{ $('Webhook').item.json.body.instance }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        896,
        -304
      ],
      "id": "aafcd26b-f29a-44c5-93a7-ded9809ca0c2",
      "name": "Execute Workflow1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b8711675-481a-47a5-b7fc-7fb78291914c",
              "leftValue": "={{ $('FInal_message_text').item.json.texto_convertido }}",
              "rightValue": "=inventario",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        560,
        -160
      ],
      "id": "afa99b17-ddee-428b-b5e2-343e6590e703",
      "name": "IF1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "venta",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "4073be86-ac3d-4341-82e7-b7088b96fa02"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "venta"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b6189def-f795-4403-8763-be0074e7c569",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "actualizarPrecio",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Actualizar precios"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6643239a-a644-411c-8d18-62571cd67c50",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "Registrar consumo",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "consumoPersonal"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "eab13bf9-e889-461d-903e-897b9dad78d9",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "=informeVentas",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "informeVentas"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f6d4b305-0c05-464e-8bdf-f29027df2858",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "ingresarProductosAbodega",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ingresoProductos Inventario"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bd7c9184-c623-444b-b561-fdfc2a53fcf6",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "envio_link",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "crear producto"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3760,
        -128
      ],
      "id": "a21a3972-08b8-437b-a342-164586e987a3",
      "name": "Switch"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "3EC1nfxk6lvqjhjz",
          "mode": "list",
          "cachedResultName": "Registra_ventas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('calcularSimilitud').item.json.mensaje_procesado }}",
            "numero_telefono": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
            "date_time": "={{ $('Webhook').first().json.body.instance }}",
            "instancia": "={{ $('Code2').first().json.datetime }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "numero_telefono",
              "displayName": "numero_telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "date_time",
              "displayName": "date_time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4048,
        -544
      ],
      "id": "3a4f8b0f-53b9-4f51-855b-815b744d5f0b",
      "name": "registroVentas"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "VEIIikYeRQYjWSgu",
          "mode": "list",
          "cachedResultName": "actualizar_precio"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('calcularSimilitud').item.json.mensaje_procesado }}",
            "telefono": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}",
            "fecha": "={{ $('Code2').first().json.datetime }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4048,
        -352
      ],
      "id": "f15d199c-be58-463f-a662-4fa23f458e5b",
      "name": "actualizarPrecios"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "eEPLO5jaUFJzMEZq",
          "mode": "list",
          "cachedResultName": "ingresar_consumo"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('calcularSimilitud').item.json.mensaje_procesado }}",
            "telefono": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}",
            "fecha": "={{ $('Code2').first().json.datetime }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4048,
        -160
      ],
      "id": "b0e5628b-4b9b-40d1-af9f-27104a1e504c",
      "name": "consumoPersonal"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "wrULXZDPO5EmNxd3",
          "mode": "list",
          "cachedResultName": "informe_ventas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('calcularSimilitud').item.json.mensaje_procesado }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}",
            "fecha": "={{ $('Code2').first().json.datetime }}",
            "wa_id": "={{ $('Webhook').first().json.body.data.key.remoteJid }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "wa_id",
              "displayName": "wa_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4048,
        32
      ],
      "id": "a582144b-b4c3-4c60-a1a8-7b808864bf78",
      "name": "informeVentas"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "HbXMEziTLEdBjon5",
          "mode": "list",
          "cachedResultName": "ingresar_o_crear_inventario"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('calcularSimilitud').item.json.mensaje_procesado }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}",
            "fecha": "={{ $('Code2').first().json.datetime }}",
            "wa_id": "={{ $('Webhook').first().json.body.data.key.remoteJid }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "wa_id",
              "displayName": "wa_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4048,
        224
      ],
      "id": "5766b39a-765c-4ad4-b92f-46829a7a3d6e",
      "name": "ingresarProductoInventario"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.mensaje_procesado }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# SISTEMA DE DETECCIÓN DE INTENCIONES - AGENTE IA\n\nEres un agente especializado en identificar la intención del usuario y devolver el output correspondiente. Analiza cada mensaje y determina qué acción tomar. \n\n## 🚨 REGLA FUNDAMENTAL - OBLIGATORIA:\n\n**CUANDO LLAMES UNA HERRAMIENTA:**\n- ❌ NO agregues saludos, comentarios, explicaciones ni texto adicional\n- ❌ NO modifiques, reformules o interpretes la respuesta\n- ❌ NO añadas tu propio estilo de escritura\n- ❌ NO incluyas frases como \"Aquí tienes...\", \"El resultado es...\", etc.\n\n\n---\n\n## 🛒 DETECCIÓN DE VENTAS - PRIORIDAD MÁXIMA\n\n### 💡 EJEMPLOS DE VENTAS:\n\n- \"2 Agua 600ml sin gas y 1 Gaseosas MEGA 2.5\"\n- \"1 Gaseosas 350ml\"\n- \"2 Gaseosas 250ml\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `venta`\n\n---\n\n## 💰 ACTUALIZAR PRECIO DE PRODUCTOS\n\n### 📝 PALABRAS CLAVE:\n- **quedo a/quedó a**\n- **quedo/quedó**\n- **actualizar precio**\n- **cambiar el precio**\n- **modificar precio**\n- **nuevo precio**\n- **precio ahora es**\n- **ahora cuesta**\n- **ahora vale**\n\n### 💡 EJEMPLOS:\n- \"la 350 quedó a 3000\"\n- \"la cerveza ahora cuesta $5000\"\n- \"cambia el precio del combo a $8000\"\n- \"actualiza la gaseosa a $3500\"\n- \"el tinto ahora está a $1000\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `actualizarPrecio`\n\n---\n\n## 🍽️ CONSUMO DE PRODUCTOS POR PARTE DEL DUEÑO\n\n### 📝 PALABRAS CLAVE:\n- **me tomé/me tome**\n- **me comí/me comi**\n- **consumí/consumi**\n\n### 💡 EJEMPLOS:\n- \"me tomé 1 Gaseosas 350ml\"\n- \"me tomé 2 Gaseosas 250ml\"\n- \"me comí 1 chorizo\"\n- \"me comi una arepa\"\n- \"me comí 2 combos\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `Registrar consumo`\n\n---\n\n📊 INFORMES DE VENTAS\n📝 PALABRAS CLAVE:\n\nventa/ventas\ninforme/informes\nreporte de ventas\nventas de hoy/ayer/antier\nventas de esta semana/mes\ncuánto vendimos\ntotal de ventas\n\n🎯 ACCIÓN:\nDevuelve output: informeVentas\n\n---\n\n## 📦 INGRESO DE PRODUCTOS AL INVENTARIO\n\n### 📝 PALABRAS CLAVE:\n-ingresaron\n-llegaron\n-entraron\n-cajas\n-pacas\n-bolsas\n- **cajas de/pacas de**\n- **unidades**\n- **entraron/ingresaron**\n- **llegó mercancía**\n- **recibí/recibimos**\n- **compré/compramos**\n- **me trajeron**\n\n### 💡 EJEMPLOS:\n- \"entraron 5 cajas de Gaseosa 250ml\"\n- \"llegaron 3 pacas de Gaseosas MEGA 2.5\"\n- \"recibí 10 unidades de...\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `ingresarProductosAbodega`\n\n---\n\n## 🆕 CREAR NUEVOS PRODUCTOS\n\n### 📝 PALABRAS CLAVE:\n- **crear/creando**\n- **nuevo/nueva/nuevos**\n- **agregar producto**\n- **registrar producto**\n- **añadir al inventario**\n\n### 💡 EJEMPLOS:\n- \"crear nuevo producto\"\n- \"necesito agregar un producto\"\n- \"registrar nueva cerveza\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `envio_link` \n\n---\n\n## ⚠️ REGLAS IMPORTANTES:\n\n1. **PRIORIDAD:** Las ventas tienen máxima prioridad\n2. **TOLERANCIA:** Ignora mayúsculas, minúsculas y errores ortográficos\n3. **FLEXIBILIDAD:** No importan palabras adicionales en el mensaje\n4. **DECISIÓN RÁPIDA:** Una sola coincidencia = llamar herramienta\n5. **MENSAJE COMPLETO:** Siempre pasa el mensaje original completo a la herramienta\n6. **RESPUESTA ÚNICA:** Para TODAS las herramientas: devuelve ÚNICAMENTE ok\n\n## 🚨 RECORDATORIOS CRÍTICOS:\n\n### OBLIGATORIO AL USAR HERRAMIENTAS:\n\n- ❌ **NO INTERPRETES** la respuesta de la herramienta\n- ❌ **NO REFORMULES** el mensaje\n- ❌ **NO AGREGUES** tu propio texto\n- ❌ **NO USES** frases como \"Aquí está...\", \"El resultado es...\", etc.\n\n### EJEMPLO DE RESPUESTA CORRECTA:\n```\nUsuario: \"3 combos\"\nAgente llama herramienta → Herramienta responde: {\"message\": \"✅ Venta registrada correctamente\"}\nRespuesta del agente: ok\n```\n\n### EJEMPLO DE RESPUESTA INCORRECTA:\n```\nUsuario: \"3 combos\"  \nAgente llama herramienta → Herramienta responde: {\"message\": \"✅ Venta registrada correctamente\"}\nRespuesta del agente: \"Perfecto, he registrado tu venta de 3 combos. ✅ Venta registrada correctamente\"\n```\n\n**¡NUNCA olvides llamar la herramienta correspondiente cuando detectes una intención!**"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3408,
        -48
      ],
      "id": "7175c6f4-ae03-45c9-a990-a236ec31d441",
      "name": "Administrador1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "ZreAVVrz07RDx1dx",
          "mode": "list",
          "cachedResultName": "envio_link_nuevoProducto"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mensaje": "={{ $('calcularSimilitud').item.json.mensaje_procesado }}",
            "instancia": "={{ $('Webhook').first().json.body.instance }}",
            "fecha": "={{ $('Code2').first().json.datetime }}",
            "telefono": "={{ $('Code2').first().json.sessionid }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4048,
        416
      ],
      "id": "dd938a5f-a666-4d3d-ae39-be84d33b14f2",
      "name": "crearProducto"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vkj-0XG2xG8AixToCz2oy_e6dbo8a7Nf500tXRg7W2A",
          "mode": "list",
          "cachedResultName": "APODOS Y REFERENCIAS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vkj-0XG2xG8AixToCz2oy_e6dbo8a7Nf500tXRg7W2A/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Hoja 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vkj-0XG2xG8AixToCz2oy_e6dbo8a7Nf500tXRg7W2A/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -784,
        544
      ],
      "id": "e4a51452-1e0c-4de3-a761-6611055bd32b",
      "name": "Get row(s) in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// NODO CODE - VERIFICADOR DE PRODUCTOS\n// Input: todas las filas de Google Sheets + mensaje desde IF1\n\nfunction procesarMensaje() {\n  // Mensaje desde IF1\n  const mensaje = $('IF1').first().json.final_message;\n  \n  // Todas las filas de Google Sheets\n  const todasLasFilas = $input.all().map(item => item.json);\n  \n  // Crear mapa de apodos -> producto\n  const mapaApodos = {};\n  todasLasFilas.forEach(fila => {\n    const producto = fila[\"NOMBRE DE PRODUCTO\"];\n    const apodos = fila[\"REFERENCIAS_Y_APODOS\"];\n    if (apodos && producto) {\n      String(apodos)\n        .split(',')\n        .map(a => a.trim())\n        .filter(a => a)\n        .forEach(apodo => {\n          mapaApodos[apodo] = producto;\n        });\n    }\n  });\n  \n  // Ordenar apodos por longitud (más largos primero para evitar solapamientos tipo \"pan\" y \"panela\")\n  const apodosOrdenados = Object.keys(mapaApodos).sort((a, b) => b.length - a.length);\n\n  // Buscar ocurrencias en el mensaje original\n  let reemplazos = [];\n  apodosOrdenados.forEach(apodo => {\n    const producto = mapaApodos[apodo];\n    const apodoEscapado = apodo.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    const regex = new RegExp('\\\\b' + apodoEscapado + '\\\\b', 'g');\n    let match;\n    while ((match = regex.exec(mensaje)) !== null) {\n      reemplazos.push({ start: match.index, end: match.index + match[0].length, producto });\n    }\n  });\n\n  // Aplicar reemplazos de izquierda a derecha\n  reemplazos.sort((a, b) => a.start - b.start);\n  let mensajeProcesado = \"\";\n  let lastIndex = 0;\n  reemplazos.forEach(r => {\n    mensajeProcesado += mensaje.slice(lastIndex, r.start) + r.producto;\n    lastIndex = r.end;\n  });\n  mensajeProcesado += mensaje.slice(lastIndex);\n\n  return [{\n    json: {\n      mensaje_original: mensaje,\n      mensaje_procesado: mensajeProcesado,\n      apodos_detectados: Object.keys(mapaApodos),\n      total_filas_procesadas: todasLasFilas.length,\n      mapa_completo: mapaApodos\n    }\n  }];\n}\n\n// Ejecutar función\nreturn procesarMensaje();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -608,
        544
      ],
      "id": "153ac3b8-bfe3-4562-b93f-d360f0e4aadf",
      "name": "Code3",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.mensaje_procesado }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# SISTEMA DE DETECCIÓN DE INTENCIONES - AGENTE IA\n\nEres un agente especializado en identificar la intención del usuario y devolver el output correspondiente. Analiza cada mensaje y determina qué acción tomar. \n\n## 🚨 REGLA FUNDAMENTAL - OBLIGATORIA:\n\n**CUANDO LLAMES UNA HERRAMIENTA:**\n- ❌ NO agregues saludos, comentarios, explicaciones ni texto adicional\n- ❌ NO modifiques, reformules o interpretes la respuesta\n- ❌ NO añadas tu propio estilo de escritura\n- ❌ NO incluyas frases como \"Aquí tienes...\", \"El resultado es...\", etc.\n\n\n---\n\n## 🛒 DETECCIÓN DE VENTAS - PRIORIDAD MÁXIMA\n\n### 💡 EJEMPLOS DE VENTAS:\n\n- \"2 Agua 600ml sin gas y 1 Gaseosas MEGA 2.5\"\n- \"1 Gaseosas 350ml\"\n- \"2 Gaseosas 250ml\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `venta`\n\n---\n\n## 💰 ACTUALIZAR PRECIO DE PRODUCTOS\n\n### 📝 PALABRAS CLAVE:\n- **quedo a/quedó a**\n- **quedo/quedó**\n- **actualizar precio**\n- **cambiar el precio**\n- **modificar precio**\n- **nuevo precio**\n- **precio ahora es**\n- **ahora cuesta**\n- **ahora vale**\n\n### 💡 EJEMPLOS:\n- \"la 350 quedó a 3000\"\n- \"la cerveza ahora cuesta $5000\"\n- \"cambia el precio del combo a $8000\"\n- \"actualiza la gaseosa a $3500\"\n- \"el tinto ahora está a $1000\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `actualizarPrecio`\n\n---\n\n## 🍽️ CONSUMO DE PRODUCTOS POR PARTE DEL DUEÑO\n\n### 📝 PALABRAS CLAVE:\n- **me tomé/me tome**\n- **me comí/me comi**\n- **consumí/consumi**\n\n### 💡 EJEMPLOS:\n- \"me tomé 1 Gaseosas 350ml\"\n- \"me tomé 2 Gaseosas 250ml\"\n- \"me comí 1 chorizo\"\n- \"me comi una arepa\"\n- \"me comí 2 combos\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `Registrar consumo`\n\n---\n\n📊 INFORMES DE VENTAS\n📝 PALABRAS CLAVE:\n\nventa/ventas\ninforme/informes\nreporte de ventas\nventas de hoy/ayer/antier\nventas de esta semana/mes\ncuánto vendimos\ntotal de ventas\n\n🎯 ACCIÓN:\nDevuelve output: informeVentas\n\n---\n\n## 📦 INGRESO DE PRODUCTOS AL INVENTARIO\n\n### 📝 PALABRAS CLAVE:\n-ingresaron\n-llegaron\n-entraron\n-cajas\n-pacas\n-bolsas\n- **cajas de/pacas de**\n- **unidades**\n- **entraron/ingresaron**\n- **llegó mercancía**\n- **recibí/recibimos**\n- **compré/compramos**\n- **me trajeron**\n\n### 💡 EJEMPLOS:\n- \"entraron 5 cajas de Gaseosa 250ml\"\n- \"llegaron 3 pacas de Gaseosas MEGA 2.5\"\n- \"recibí 10 unidades de...\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `ingresarProductosAbodega`\n\n---\n\n## 🆕 CREAR NUEVOS PRODUCTOS\n\n### 📝 PALABRAS CLAVE:\n- **crear/creando**\n- **nuevo/nueva/nuevos**\n- **agregar producto**\n- **registrar producto**\n- **añadir al inventario**\n\n### 💡 EJEMPLOS:\n- \"crear nuevo producto\"\n- \"necesito agregar un producto\"\n- \"registrar nueva cerveza\"\n\n### 🎯 ACCIÓN:\n**Devuelve output:** `envio_link` \n\n---\n\n## ⚠️ REGLAS IMPORTANTES:\n\n1. **PRIORIDAD:** Las ventas tienen máxima prioridad\n2. **TOLERANCIA:** Ignora mayúsculas, minúsculas y errores ortográficos\n3. **FLEXIBILIDAD:** No importan palabras adicionales en el mensaje\n4. **DECISIÓN RÁPIDA:** Una sola coincidencia = llamar herramienta\n5. **MENSAJE COMPLETO:** Siempre pasa el mensaje original completo a la herramienta\n6. **RESPUESTA ÚNICA:** Para TODAS las herramientas: devuelve ÚNICAMENTE ok\n\n## 🚨 RECORDATORIOS CRÍTICOS:\n\n### OBLIGATORIO AL USAR HERRAMIENTAS:\n\n- ❌ **NO INTERPRETES** la respuesta de la herramienta\n- ❌ **NO REFORMULES** el mensaje\n- ❌ **NO AGREGUES** tu propio texto\n- ❌ **NO USES** frases como \"Aquí está...\", \"El resultado es...\", etc.\n\n### EJEMPLO DE RESPUESTA CORRECTA:\n```\nUsuario: \"3 combos\"\nAgente llama herramienta → Herramienta responde: {\"message\": \"✅ Venta registrada correctamente\"}\nRespuesta del agente: ok\n```\n\n### EJEMPLO DE RESPUESTA INCORRECTA:\n```\nUsuario: \"3 combos\"  \nAgente llama herramienta → Herramienta responde: {\"message\": \"✅ Venta registrada correctamente\"}\nRespuesta del agente: \"Perfecto, he registrado tu venta de 3 combos. ✅ Venta registrada correctamente\"\n```\n\n**¡NUNCA olvides llamar la herramienta correspondiente cuando detectes una intención!**"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -416,
        544
      ],
      "id": "a414880f-c8fc-46ca-9acb-fdb1b5af9c99",
      "name": "Administrador",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Entrada esperada: puede venir como string o como array\n// Ejemplo 1: \"qrpa\"\n// Ejemplo 2: [\"qrpa\", \"arepa\"]\n\nlet entrada = $json.productos_detectados || $json.final_message || \"\";\n\n// Si es string, lo convertimos en array de una sola palabra\nif (typeof entrada === \"string\") {\n  entrada = [entrada.trim()];\n}\n\n// Si no es array, lo forzamos a array\nif (!Array.isArray(entrada)) {\n  entrada = [String(entrada)];\n}\n\n// Normalizamos: quitamos vacíos\nentrada = entrada.filter(p => p && p.trim() !== \"\");\n\n// Ahora devolvemos un array de objetos, uno por producto\nreturn entrada.map(p => ({\n  json: { producto_detectado: p }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1504,
        -32
      ],
      "id": "69ee1f08-5794-482e-8876-690eb303378f",
      "name": "producto_detectado"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vkj-0XG2xG8AixToCz2oy_e6dbo8a7Nf500tXRg7W2A",
          "mode": "list",
          "cachedResultName": "APODOS Y REFERENCIAS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vkj-0XG2xG8AixToCz2oy_e6dbo8a7Nf500tXRg7W2A/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Hoja 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vkj-0XG2xG8AixToCz2oy_e6dbo8a7Nf500tXRg7W2A/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1680,
        112
      ],
      "id": "900ca1da-e7e4-4878-8dce-313f2fe7274d",
      "name": "obtenerApodos",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1936,
        -16
      ],
      "id": "5f617d80-4680-4a93-b4f7-8f9cbe68c713",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos los datos de entrada\nconst sessionid = $json.sessionid;\nconst estado = $json.estado || { mensaje_original: \"\", requiere_confirmacion: false, items: [] };\n\n// Aquí deberías llenar productosDetectados dinámicamente\nlet productosDetectados = [];  \nlet productosReemplazados = productosDetectados.length > 0;\n\nif (productosDetectados.length > 0) {\n  // Unimos todos los productos en un string legible\n  const listaProductos = productosDetectados.join(\" y \");\n  return [\n    {\n      json: {\n        sessionid,\n        estado: {\n          ...estado,\n          mensaje_original: listaProductos,\n          requiere_confirmacion: false,\n          items: productosDetectados.map(p => ({ producto: p }))\n        },\n        mensaje_final: listaProductos,\n        productos_reemplazados: productosReemplazados\n      }\n    }\n  ];\n}\n\n// Si no hubo coincidencias\nreturn [\n  {\n    json: {\n      sessionid,\n      estado: {\n        ...estado,\n        requiere_confirmacion: true,\n        items: []\n      },\n      mensaje_final: `🤔 No estuve 100% seguro con \"${estado.mensaje_original}\".\\n¿Podrías ser más específico con tu pedido?`,\n      productos_reemplazados: false\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2112,
        -16
      ],
      "id": "a4a149f7-2f67-4f19-9107-f5a6c1a23d1b",
      "name": "calcularSimilitud1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ed4a047a-26b3-444d-9f46-129708b6c95c",
              "name": "final_message",
              "value": "={{ $json.content.parts[0].text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1216,
        -48
      ],
      "id": "5dfa0e89-b17a-4bff-b5f4-0eb5ee4ad8dd",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// NODO armaMensaje - solo devuelve el mensaje original\nconst entrada = $input.first().json;\n\nreturn [{\n  json: {\n    mensaje: entrada.estado?.mensaje_original || \"No se detectaron productos válidos en tu mensaje.\"\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        -16
      ],
      "id": "64410a8c-cc5a-44b4-8349-578bc2d2ccbf",
      "name": "armaMensaje"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook').first().json.body.instance }}",
        "remoteJid": "={{ $('Webhook').first().json.body.data.key.remoteJid }}",
        "messageText": "={{ $json.mensaje }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2752,
        -16
      ],
      "id": "a7abb075-688b-4eec-b469-98cc4cdc621e",
      "name": "Enviar texto",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Detectar si el mensaje del usuario es un número\nconst mensaje = String($json.final_message || \"\").trim();\nconst telefono = $json.sessionid;\n\nconst esNumero = /^[1-9]\\d*$/.test(mensaje); // 1,2,3...\n\nif (!esNumero) {\n  // No es número → continuar flujo normal\n  return [{\n    json: {\n      ...$json,\n      _debug: \"Mensaje normal, no es respuesta a sugerencia\"\n    }\n  }];\n}\n\n// Si es número, buscar en Postgres la memoria de esta sesión\n// (Este nodo debe estar CONECTADO a Postgres previamente con un SELECT)\nconst memoria = $items(\"postgres_select_estado\")[0]?.json?.estado || null;\n\nif (!memoria || !memoria.items || memoria.items.length === 0) {\n  // No hay sugerencias guardadas → continuar flujo normal\n  return [{\n    json: {\n      ...$json,\n      _debug: \"Número detectado pero sin sugerencias en memoria\"\n    }\n  }];\n}\n\n// Convertir el mensaje en índice de array\nconst indice = parseInt(mensaje, 10) - 1;\nconst sugerencia = memoria.items[indice];\n\nif (!sugerencia) {\n  // El usuario mandó un número inválido (ejemplo: \"9\")\n  return [{\n    json: {\n      ...$json,\n      mensaje_final: \"❌ Esa opción no es válida, por favor responde con un número de la lista.\",\n      requiere_confirmacion: true\n    }\n  }];\n}\n\n// Si es válido, reemplazamos mensaje final con el producto elegido\nreturn [{\n  json: {\n    ...$json,\n    mensaje_final: sugerencia.producto,\n    producto_confirmado: true,\n    requiere_confirmacion: false\n  }\n}];\n"
      },
      "id": "3139636d-af71-4c3f-b46b-150d1013a2c8",
      "name": "¿Es respuesta a sugerencia?",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        -160
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-pro"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $('FInal_message_text').item.json.texto_convertido }}"
            }
          ]
        },
        "options": {
          "systemMessage": "=Analiza el siguiente mensaje de un cliente y marca entre comillas (\"\") SOLO los nombres de productos o apodos que aparecen.\n\nREGLAS IMPORTANTES:\n- NO marques números de cantidad (1, 2, 3, etc.)\n- NO marques palabras como \"quiero\", \"dame\", \"vendo\", etc.\n- SOLO marca lo que parezca nombre de un producto alimenticio\n- Si hay \"1 arepa\", marca solo \"arepa\"\n- Si hay \"2 gaseosas cola\", marca solo \"gaseosas cola\"\n\nEjemplos:\n- Input: \"1 arepa\" → Output: 1 \"arepa\"\n- Input: \"quiero 2 gaseosas\" → Output: quiero 2 \"gaseosas\"\n- Input: \"dame qrpa\" → Output: dame \"qrpa\"\n\nDevuelve la frase original con SOLO los productos marcados entre comillas."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        800,
        -80
      ],
      "id": "d75fec25-f7c3-4eef-9c91-e9a057466eb5",
      "name": "Message a model1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -416,
        800
      ],
      "id": "d2070b12-ee20-4f04-a51c-9faedd2ae95b",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "contextWindowLength": 2
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -272,
        800
      ],
      "id": "b9784299-b5b7-40d1-a563-72d1984cce4a",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "QYN0UhXauGwlSaLm",
          "name": "transito"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "conversaciones_pendientes",
          "mode": "list",
          "cachedResultName": "conversaciones_pendientes"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "sessionid": "={{ $('IF1').first().json.sessionid }}",
            "estado": "={{ $json.estado }}",
            "expires_at": "={{ new Date(Date.now() + 10 * 60 * 1000).toISOString() }}\n"
          },
          "matchingColumns": [
            "sessionid"
          ],
          "schema": [
            {
              "id": "sessionid",
              "displayName": "sessionid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "estado",
              "displayName": "estado",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expires_at",
              "displayName": "expires_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "version",
              "displayName": "version",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2336,
        -16
      ],
      "id": "fb4e955a-a123-4409-ad02-a3e91fe03f14",
      "name": "Memoria _GuardarContexto",
      "credentials": {
        "postgres": {
          "id": "QYN0UhXauGwlSaLm",
          "name": "transito"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b312d7b6-e979-4e5a-a0a1-bef82730196e",
              "name": "sessionid",
              "value": "={{ $json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "d0338f07-19d6-4a5c-a1fc-da38909ba858",
              "name": "estado",
              "value": "={\n  \"mensaje_original\": \"{{$json.body.data.message.conversation}}\",\n  \"requiere_confirmacion\": false,\n  \"items\": []\n}\n",
              "type": "object"
            },
            {
              "id": "86953061-57dd-4c4a-958f-cf6d1151a0ed",
              "name": "texto",
              "value": "={{ $json.body.data.messageType }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1936,
        -48
      ],
      "id": "bd84d269-ccc9-40f8-a98d-8eb0abd6db1b",
      "name": "prepararEstado"
    },
    {
      "parameters": {
        "jsCode": "function normalizar(s) {\n  if (s === undefined || s === null) return \"\";\n  return String(s)\n    .trim()\n    .toLowerCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/\\s+/g, \" \");\n}\n\nfunction levenshtein(a, b) {\n  const m = a.length, n = b.length;\n  if (m === 0) return n;\n  if (n === 0) return m;\n  const dp = Array.from({ length: m + 1 }, () => new Array(n + 1).fill(0));\n  for (let i = 0; i <= m; i++) dp[i][0] = i;\n  for (let j = 0; j <= n; j++) dp[0][j] = j;\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      dp[i][j] = Math.min(\n        dp[i - 1][j] + 1,\n        dp[i][j - 1] + 1,\n        dp[i - 1][j - 1] + cost\n      );\n    }\n  }\n  return dp[m][n];\n}\n\nfunction similitud(a, b) {\n  if (!a && !b) return 1;\n  if (!a || !b) return 0;\n  const dist = levenshtein(a, b);\n  return 1 - dist / Math.max(a.length, b.length);\n}\n\n// Extraer todas las palabras entre comillas\nfunction extraerMarcados(texto) {\n  if (!texto) return [];\n  const matches = String(texto).match(/\"([^\"]+)\"/g);\n  if (!matches) return [];\n  return matches.map(m => m.replace(/\"/g, \"\"));\n}\n\nconst UMBRAL_ACEPTAR = 0.85;\nconst UMBRAL_SUGERIR = 0.60;\n\nlet resultados = [];\n\n// Traemos todos los apodos desde el nodo obtenerApodos\nconst apodos = $items(\"obtenerApodos\");\n\nfor (const item of items) {\n  // 👇 TOMAR EXACTAMENTE LO QUE LLEGA\n  const mensajeOriginal = item.json.producto_detectado || \"\";\n  let mensajeProcesado = mensajeOriginal;\n  \n  const detectados = extraerMarcados(mensajeOriginal);\n  \n  // Si no hay productos marcados, devolver el mensaje tal como llega\n  if (detectados.length === 0) {\n    resultados.push({\n      json: {\n        mensaje_final: mensajeOriginal,\n        sin_productos: true\n      }\n    });\n    continue;\n  }\n  \n  let hayReemplazos = false;\n  let haySugerencias = false;\n  let sugerenciasData = null;\n\n  for (const detectado of detectados) {\n    const entrada = normalizar(detectado);\n\n    if (!entrada) continue;\n\n    // 1) Coincidencia exacta\n    let exacto = apodos.find(f => normalizar(f.json.APODO) === entrada);\n    if (exacto) {\n      // REEMPLAZAR en el mensaje: \"producto\" -> producto_encontrado\n      const regex = new RegExp(`\"${detectado}\"`, 'g');\n      mensajeProcesado = mensajeProcesado.replace(regex, exacto.json.PRODUCTO);\n      hayReemplazos = true;\n      continue;\n    }\n\n    // 2) Calcular similitud con todos los apodos\n    let comparaciones = [];\n    for (const fila of apodos) {\n      const apodo = normalizar(fila.json.APODO);\n      const score = similitud(entrada, apodo);\n      comparaciones.push({\n        producto: fila.json.PRODUCTO,\n        apodo,\n        score\n      });\n    }\n\n    comparaciones.sort((a, b) => b.score - a.score);\n    const top3 = comparaciones.slice(0, 3);\n\n    // 3) Decisión\n    if (top3[0] && top3[0].score >= UMBRAL_ACEPTAR) {\n      // REEMPLAZAR en el mensaje: \"producto\" -> producto_encontrado\n      const regex = new RegExp(`\"${detectado}\"`, 'g');\n      mensajeProcesado = mensajeProcesado.replace(regex, top3[0].producto);\n      hayReemplazos = true;\n    } else if (top3[0] && top3[0].score >= UMBRAL_SUGERIR) {\n      // SUGERENCIAS - no reemplazar, enviar sugerencias\n      haySugerencias = true;\n      sugerenciasData = {\n        apodo_usado: detectado,\n        sugerencias: top3.map((r, i) => ({\n          opcion: i + 1,\n          producto: r.producto,\n          apodo: r.apodo,\n          confianza: Number(r.score.toFixed(3))\n        }))\n      };\n      break; // Solo una sugerencia por mensaje\n    } else {\n      // SIN MATCH\n      resultados.push({\n        json: {\n          mensaje_final: `❌ No encontré \"${detectado}\" en el menú.\\n¿Podrías verificar el nombre del producto?`,\n          sin_coincidencia: true,\n          apodo_usado: detectado\n        }\n      });\n      return resultados; // Salir si hay productos sin match\n    }\n  }\n  \n  // DEVOLVER RESULTADO SEGÚN LO QUE PASÓ\n  if (haySugerencias && sugerenciasData) {\n    // Hay sugerencias\n    let opciones = sugerenciasData.sugerencias.map(s => {\n      let numEmoji = [\"1️⃣\",\"2️⃣\",\"3️⃣\",\"4️⃣\",\"5️⃣\"][s.opcion - 1] || `${s.opcion})`;\n      return `${numEmoji} ${s.producto}`;\n    }).join(\"\\n\");\n    \n    resultados.push({\n      json: {\n        mensaje_final: `🤔 No estuve 100% seguro con \"${sugerenciasData.apodo_usado}\".\\n¿Te refieres a alguna de estas opciones?\\n\\n${opciones}\\n\\n💬 Responde con el número`,\n        requiere_confirmacion: true,\n        sugerencias: sugerenciasData.sugerencias,\n        apodo_usado: sugerenciasData.apodo_usado\n      }\n    });\n  } else {\n    // Productos encontrados o mensaje sin cambios\n    resultados.push({\n      json: {\n        mensaje_final: mensajeProcesado,\n        productos_reemplazados: hayReemplazos\n      }\n    });\n  }\n}\n\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2096,
        320
      ],
      "id": "e0750e07-7aee-4e90-9d8e-b8d003c33297",
      "name": "calcularSimilitud"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO conversaciones_pendientes (sessionid, estado)\nVALUES (\n  '{{$json.sessionid}}',\n  '{{$json.estado}}'::jsonb\n)\nON CONFLICT (sessionid) DO UPDATE\nSET estado = EXCLUDED.estado;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -208,
        -160
      ],
      "id": "704a12a8-5626-4dd8-bcde-47e2c29cf646",
      "name": "GuardarConversación",
      "credentials": {
        "postgres": {
          "id": "QYN0UhXauGwlSaLm",
          "name": "transito"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n-n8n.jac8tn.easypanel.host",
            "user-agent": "axios/1.7.9",
            "content-length": "1003",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n-n8n.jac8tn.easypanel.host",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "9c2ac7b198e2",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "Gerson_cuentas",
            "data": {
              "key": {
                "remoteJid": "573103015865@s.whatsapp.net",
                "fromMe": false,
                "id": "3F6B6793AB505A10500D"
              },
              "pushName": "Alejandro",
              "status": "DELIVERY_ACK",
              "message": {
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "e3GnwCc3oAo36g==",
                    "senderTimestamp": "1757137861",
                    "recipientKeyHash": "Ri9rRGFEO65E1g==",
                    "recipientTimestamp": "1757636125"
                  },
                  "deviceListMetadataVersion": 2
                },
                "conversation": "un arpa y una mega"
              },
              "contextInfo": {
                "expiration": 0,
                "ephemeralSettingTimestamp": "0",
                "disappearingMode": {
                  "initiator": "CHANGED_IN_CHAT"
                }
              },
              "messageType": "conversation",
              "messageTimestamp": 1758166629,
              "instanceId": "058bae9c-0346-42da-8811-6c7aad5dbf0c",
              "source": "unknown"
            },
            "destination": "https://n8n-n8n.jac8tn.easypanel.host/webhook/0ebc283e-1a2a-4e30-8649-a42413095db8",
            "date_time": "2025-09-18T00:37:10.055Z",
            "sender": "573102304801@s.whatsapp.net",
            "server_url": "https://evolution-evolution-api.jac8tn.easypanel.host",
            "apikey": "630D35671CDD-4961-B1E5-09E0B5145173"
          },
          "webhookUrl": "https://n8n-n8n.jac8tn.easypanel.host/webhook/0ebc283e-1a2a-4e30-8649-a42413095db8",
          "executionMode": "production"
        }
      }
    ],
    "Merge": [
      {
        "json": {
          "producto_detectado": "1 \"arpa\" y 1 \"mega\""
        }
      },
      {
        "json": {
          "row_number": 2,
          "PRODUCTO": "Arepas de QUESO",
          "APODO": "arepa",
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 3,
          "PRODUCTO": "Arepas de QUESO",
          "APODO": "arepas de queso",
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 4,
          "PRODUCTO": "Arepas de QUESO",
          "APODO": "arepa con queso",
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 5,
          "PRODUCTO": "Arepas de QUESO",
          "APODO": "arepas",
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 6,
          "PRODUCTO": "Chorizos",
          "APODO": "chorizo",
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 7,
          "PRODUCTO": "Chorizos",
          "APODO": "chorizos",
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 8,
          "PRODUCTO": "Chorizos",
          "APODO": "chorisos",
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 9,
          "PRODUCTO": "Chorizos",
          "APODO": "choriso",
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 10,
          "PRODUCTO": "Arepa BURGUER",
          "APODO": "burguer",
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 11,
          "PRODUCTO": "Gaseosas 350ml",
          "APODO": 350,
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 12,
          "PRODUCTO": "Gaseosas 250ml",
          "APODO": 250,
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 13,
          "PRODUCTO": "Gaseosas MEGA 2.5",
          "APODO": 2.5,
          "FUENTE": "",
          "FECHA": ""
        }
      },
      {
        "json": {
          "row_number": 14,
          "PRODUCTO": "Gaseosas MEGA 2.5",
          "APODO": "mega",
          "FUENTE": "",
          "FECHA": ""
        }
      }
    ]
  },
  "connections": {
    "Transcribe a recording1": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Final_message_audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final_message_audio": {
      "main": [
        [
          {
            "node": "GuardarConversación",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "¿Es respuesta a sugerencia?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FInal_message_text": {
      "main": [
        [
          {
            "node": "GuardarConversación",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "FInal_message_text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "prepararEstado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Obter m dia em base64",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obter m dia em base64": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Transcribe a recording1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Administrador1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Execute Workflow1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Message a model1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "registroVentas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "actualizarPrecios",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "consumoPersonal",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "informeVentas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ingresarProductoInventario",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "crearProducto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Administrador1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Administrador",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "producto_detectado": {
      "main": [
        [
          {
            "node": "obtenerApodos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtenerApodos": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "calcularSimilitud1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "producto_detectado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calcularSimilitud1": {
      "main": [
        [
          {
            "node": "Memoria _GuardarContexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "armaMensaje": {
      "main": [
        [
          {
            "node": "Enviar texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar texto": {
      "main": [
        []
      ]
    },
    "¿Es respuesta a sugerencia?": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        []
      ]
    },
    "Message a model1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memoria _GuardarContexto": {
      "main": [
        [
          {
            "node": "armaMensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepararEstado": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GuardarConversación": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "29186f84-273c-471a-b7e0-a7a96018e27d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "07f67ec32baaad4ae3d75f4e22d6ad4d1aa561c2ad8388f49ad7031ee0fe8de1"
  },
  "id": "A6O5AP9ePlWwaaY9",
  "tags": []
}