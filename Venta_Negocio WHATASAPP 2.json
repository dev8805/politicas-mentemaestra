{
  "name": "Venta_Negocio WHATASAPP 2",
  "nodes": [
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1624,
        488
      ],
      "id": "8a598340-b11c-4d42-8b9f-b98f0628fc12",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Transcripcion de archivos\n## imagenes, texto. audio",
        "height": 848,
        "width": 1312,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -64,
        8
      ],
      "id": "062cc1ff-c752-4661-b942-090077f26f98",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.categoria }}",
                    "rightValue": "venta",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "f3933b07-b993-49b3-9bcf-a89073e90911"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "registro_venta"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "317d967e-167d-49a6-84c1-dc3d6c10af08",
                    "leftValue": "={{ $json.categoria }}",
                    "rightValue": "precios_mod",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "precios_mod"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "60c4819e-7de8-4057-9114-d079bd314c62",
                    "leftValue": "={{ $json.categoria }}",
                    "rightValue": "info_venta",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "informacion de ventas"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "33894fb6-564e-45d8-a821-5786ff3f1661",
                    "leftValue": "={{ $json.categoria }}",
                    "rightValue": "inventario",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "inventario"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2128,
        232
      ],
      "id": "77d3b4cc-0a00-4067-a25e-a04df705b3b2",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4df07822-8763-486d-b9f4-8255febbd98e",
              "name": "final_message",
              "value": "={{ $('Code2').item.json.final_message }}",
              "type": "string"
            },
            {
              "id": "42e3e377-78a2-4771-a9db-ca9cc8cc2b94",
              "name": "datetime",
              "value": "={{ $('Code2').item.json.datetime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2624,
        72
      ],
      "id": "44a67ab1-326d-439c-a4b4-2ca29bdcb787",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2984,
        192
      ],
      "id": "caf07a9a-7c99-416e-8e85-03f5c2ed252e",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Capturamos el texto desde la propiedad correcta\nconst texto = String($input.first().json.output || '').trim();\n\n// Regex para extraer \"producto\" cantidad\nconst regex = /\"([^\"]+)\"\\s+(\\d+(?:\\.\\d+)?)/g;\n\nconst filas = [];\nlet match;\n\nwhile ((match = regex.exec(texto)) !== null) {\n  filas.push({\n    PRODUCTO: match[1].replace(/_/g, ' '),\n    CANTIDAD: parseFloat(match[2]),\n    FECHA: new Date().toLocaleString('es-CO', { timeZone: 'America/Bogota' })\n  });\n}\n\nreturn filas;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3264,
        72
      ],
      "id": "6758fb63-4a4c-4f41-923d-c7e1543a6abc",
      "name": "Code_ventas"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 368924617,
          "mode": "list",
          "cachedResultName": "LISTA_PRECIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=368924617"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3488,
        72
      ],
      "id": "bd70aaea-2732-4ea7-9f33-b34e6e9a265a",
      "name": "Obtener_lista_precios",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos todas las ventas desde Code_ventas\nconst ventas = $('Code_ventas').all().map(item => item.json);\n// Obtenemos la lista de precios desde Obtener_lista_precios\nconst precios = $('Obtener_lista_precios').all().map(item => item.json);\n\n// FunciÃ³n para buscar el precio y costo de un producto\nfunction buscarPrecio(nombreProducto) {\n  const nombreVenta = nombreProducto.toLowerCase().replace(/_/g, ' ').trim();\n  for (const p of precios) {\n    const nombrePrecio = p.PRODUCTO.toLowerCase().replace(/_/g, ' ').trim();\n    if (nombrePrecio === nombreVenta) {\n      return {\n        precio: parseFloat(p.PRECIO_UNITARIO),\n        costo: parseFloat(p.COSTO || 0)\n      };\n    }\n  }\n  return { precio: 0, costo: 0 }; // Si no se encuentra, devuelve 0\n}\n\n// Procesamos todas las ventas\nreturn ventas.map(v => {\n  const { precio: precioUnitario, costo: costoUnitario } = buscarPrecio(v.PRODUCTO);\n  const valorTotal = Number(v.CANTIDAD) * precioUnitario;\n  \n  return {\n    json: {\n      PRODUCTO: v.PRODUCTO,\n      CANTIDAD: Number(v.CANTIDAD),\n      VALOR_UNITARIO: precioUnitario,\n      VALOR_TOTAL: valorTotal,\n      COSTO: costoUnitario,\n      FECHA: v.FECHA\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3712,
        72
      ],
      "id": "d0aba8b3-13c0-4fdd-9252-7aaf27fdd662",
      "name": "Cruce_precio_venta"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Ingreso_ventas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "CANTIDAD": "={{ $json.CANTIDAD }}",
            "FECHA": "={{ $json.FECHA }}",
            "VALOR_UNITARIO": "={{ $json.VALOR_UNITARIO }}",
            "VALOR_TOTAL": "={{ $json.VALOR_TOTAL }}",
            "COSTO": "={{ $json.COSTO }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CANTIDAD",
              "displayName": "CANTIDAD",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "VALOR_UNITARIO",
              "displayName": "VALOR_UNITARIO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "VALOR_TOTAL",
              "displayName": "VALOR_TOTAL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "FECHA",
              "displayName": "FECHA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "COSTO",
              "displayName": "COSTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CODIGO",
              "displayName": "CODIGO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3936,
        72
      ],
      "id": "469791b5-a6ef-4107-9cd8-c46a94ec5b73",
      "name": "Guardar_venta_en_hoja",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Clasificacion del mensaje\n",
        "height": 544,
        "width": 816,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1256,
        88
      ],
      "id": "53b998ea-78a3-4dd2-898f-b155b739fc4a",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.final_message }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# CLASIFICADOR DE MENSAJES PARA NEGOCIO DE AREPAS\n\n## ROL\nEres un clasificador automÃ¡tico para un negocio que vende gaseosas, aguas,te y demas bebidas en diferentes presentacione\n\n## OBJETIVO\nAnaliza el mensaje entrante y devuelve **ÃNICAMENTE** una de estas tres palabras:\n- `venta`\n- `info_venta`Â Â \n- `precios_mod`\n- `inventario`\n\n## TÃRMINOS Y CONVERSIONES\n### Productos bÃ¡sicos:\n| Entrada | Salida exacta |\n|---------|---------------|\n| combo/combos | \"Chorizos\" + \"Arepas de queso\" (1 de cada uno) |\n| 2.5 | \"Gaseosas MEGA 2.5\" |\n| 350 | \"Gaseosas 350ml\" |\n| 250 | \"Gaseosas 250ml\" |\n| chorizo/chorizos | \"Chorizos\" |\n| arepa/arepas/arepas con queso | \"Arepas de queso\" |\n\n## REGLAS DE CLASIFICACIÃN\n\n### CATEGORÃA: venta\n**CuÃ¡ndo usar:** El mensaje registra productos vendidos\n**Ejemplos:**\n- \"5 arepas y dos chorizos\"\n- \"2 combos y una 350\"\n- \"vendi 3 chorizos\"\n- \"3250\" (3 gaseosas 350ml)\n- \"32.5\" (3 gaseosas 2.5L)\n\n---\n\n### CATEGORÃA: info_venta\n**CuÃ¡ndo usar:** El mensaje pide informaciÃ³n sobre ventas realizadas\n**Ejemplos:**\n- \"cuÃ¡nto se vendiÃ³ hoy\"\n- \"ventas de esta semana\"\n- \"total del dÃ­a\"\n- \"ventas de agosto\"\n- \"reporte de ventas\"\n\n---\n\n### CATEGORÃA: precios_mod\n**CuÃ¡ndo usar:** El mensaje modifica o crea precios de productos\n**Ejemplos:**\n- \"el chorizo quedÃ³ a 7000\"\n- \"350 a 3500\"\n- \"la 2.5 a 8000\"\n- \"crea los siguientes productos\"\n- \"cambiar precio del tinto\"\n\n---\n\n### CATEGORÃA: inventario\n**CuÃ¡ndo usar:** El mensaje registra la compra o el ingreso de productos al inventario.\n**Ejemplos:**\n- \"entraron 4 cajas de 350\"\n- \"ingresaron 2 cajas de 250\"\n- \"comprÃ© 10 bultos de arepas\"\n- \"llegaron 50 gaseosas de 250ml\"\n\n---\n\n## GLOSARIO INTERNO\n- **combo** = 1 chorizo + 1 arepa\n- **350** = gaseosa 350ml\n- **2.5** = gaseosa 2.5L\n- **\"3250\"** = 3 gaseosas 350ml\n- **\"32.5\"** = 3 gaseosas 2.5L\n- **\"cuatro, uno punto cinco\"** = 4 gaseosas 1.5L\n\n## INSTRUCCIÃN FINAL\nAnaliza este mensaje: {{ $json.final_message }}\n\nResponde solo con la categorÃ­a correspondiente (sin comillas, sin explicaciones)."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1552,
        264
      ],
      "id": "2c54e6e3-0f1a-440c-a6fc-117394873cf5",
      "name": "CLASIFICA TIPO DE ENTRADA"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.final_message }}",
        "options": {
          "systemMessage": "=# INSTRUCCIONES PARA TRANSFORMAR VENTAS\nTu labor es transformar el mensaje {{ $json.final_message }} de ventas siguiendo **EXACTAMENTE** el formato especificado.\n\n## TÃRMINOS Y CONVERSIONES\n### Productos bÃ¡sicos:\n| Entrada | Salida exacta |\n|---------|---------------|\n| combo/combos | \"Chorizos\" + \"Arepas de queso\" (1 de cada uno) |\n| 2.5 | \"Gaseosas MEGA 2.5\" |\n| 350 | \"Gaseosas 350ml\" |\n| 250 | \"Gaseosas 250ml\" |\n| chorizo/chorizos | \"Chorizos\" |\n| arepa/arepas/arepas con queso | \"Arepas de queso\" |\n| mustang/lucky/luqui/luki/mosto/musta/mustang/lukis/must/most | \"Cigarrillos\" |\n| tinto/tintos | \"Tintos\" |\n\n### Casos especiales - NÃºmeros unidos:\n- **PatrÃ³n:** Cuando encuentres un nÃºmero de 4 dÃ­gitos donde los primeros dÃ­gitos representan cantidad y los Ãºltimos el tipo de gaseosa:\n  - \"3250\" o \"3 250\" = 3 \"Gaseosas 250ml\"\n  - \"2350\" o \"2 350\" = 2 \"Gaseosas 350ml\" \n  - \"4350\" o \"4 350\" = 4 \"Gaseosas 350ml\"\n  - \"5250\" o \"5 250\" = 5 \"Gaseosas 250ml\"\n\n- **PatrÃ³n con decimales:** Cuando encuentres nÃºmeros con formato X2.5:\n  - \"32.5\" o \"3 2.5\" = 3 \"Gaseosas MEGA 2.5\"\n  - \"22.5\" o \"2 2.5\" = 2 \"Gaseosas MEGA 2.5\"\n  - \"52.5\" o \"5 2.5\" = 5 \"Gaseosas MEGA 2.5\"\n\n### Ejemplos de conversiÃ³n:\n- **Entrada:** \"3 combos\" \n- **Salida:** \"Chorizos\" 3, \"Arepas de queso\" 3\n- **Entrada:** \"2 combos y una 2.5\"\n- **Salida:** \"Chorizos\" 2, \"Arepas de queso\" 2, \"Gaseosa MEGA 2.5\" 1\n- **Entrada:** \"2350\"\n- **Salida:** \"Gaseosas 350ml\" 2\n- **Entrada:** \"32.5\"\n- **Salida:** \"Gaseosas MEGA 2.5\" 3\n\n## FORMATO DE SALIDA OBLIGATORIO\n**ESTRUCTURA:** \"NombreProducto\" cantidad, \"NombreProducto\" cantidad\n\n**REGLAS ESTRICTAS:**\n1. Cada producto entre comillas dobles: \"Chorizos\"\n2. Espacio despuÃ©s de las comillas: \"Chorizos\" 3\n3. Coma y espacio entre productos: , \"\n4. NO agregar saltos de lÃ­nea (\\n)\n5. NO cambiar mayÃºsculas/minÃºsculas de los nombres de productos\n\n## EJEMPLOS COMPLETOS:\n**Entrada:** \"4 combos 2 tintos y una 2.5\"\n**Salida:** \"Chorizos\" 4, \"Arepas de queso\" 4, \"Tintos\" 2, \"Gaseosas MEGA 2.5\" 1\n\n**Entrada:** \"3 arepas y 2 350\"\n**Salida:** \"Arepas de queso\" 3, \"Gaseosas 350ml\" 2\n\n**Entrada:** \"32.5\"\n**Salida:** \"Gaseosas MEGA 2.5\" 3\n\n**Entrada:** \"2350 y un combo\"\n**Salida:** \"Gaseosas 350ml\" 2, \"Chorizos\" 1, \"Arepas de queso\" 1\n\n**Entrada:** \"4250 y 22.5\"\n**Salida:** \"Gaseosas 250ml\" 4, \"Gaseosas MEGA 2.5\" 2\n\n## IMPORTANTE:\n- Devuelve ÃNICAMENTE el formato de salida especificado\n- NO agregues explicaciones\n- NO agregues saltos de lÃ­nea\n- RESPETA exactamente las comillas y espacios"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2912,
        -32
      ],
      "id": "a030dc7b-928e-4066-bd3f-4ecd62ef6e0d",
      "name": "LIMPIA MENSAJE DE VENTA"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Ingreso_ventas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=0"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:F"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -16,
        1352
      ],
      "id": "ed772a07-88e8-4cf9-a6fb-ace9f8205f7d",
      "name": "ventas_solicitadas",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Tomar el mensaje desde Telegram Trigger con manejo de errores\nlet raw = \"\";\ntry {\n  raw = $('Code2').first().json.final_message || \"\";\n} catch (error) {\n  console.log(\"Error obteniendo mensaje de Telegram:\", error.message);\n  return [{ json: { error: \"No se pudo obtener el mensaje de Telegram\" } }];\n}\n\n// Normalizar texto mejorado (minÃºsculas, sin tildes, sin caracteres especiales)\nfunction normalize(str) {\n  return String(str)\n    .toLowerCase()\n    .trim()\n    .replace(/[Ã¡Ã Ã¤Ã¢Ã£]/g, \"a\")\n    .replace(/[Ã©Ã¨Ã«Ãª]/g, \"e\")\n    .replace(/[Ã­Ã¬Ã¯Ã®]/g, \"i\")\n    .replace(/[Ã³Ã²Ã¶Ã´Ãµ]/g, \"o\")\n    .replace(/[ÃºÃ¹Ã¼Ã»]/g, \"u\")\n    .replace(/[Ã±]/g, \"n\")\n    .replace(/[Ã§]/g, \"c\")\n    .replace(/\\s+/g, \" \"); // MÃºltiples espacios a uno solo\n}\n\nconst msg = normalize(raw);\nconsole.log(\"Mensaje normalizado:\", msg);\n\n// Obtener fecha de hoy en zona horaria de BogotÃ¡ optimizada\nfunction todayInTZ(tz = \"America/Bogota\") {\n  const now = new Date();\n  const formatter = new Intl.DateTimeFormat(\"en-CA\", {\n    timeZone: tz,\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n  });\n  \n  const [year, month, day] = formatter.format(now).split('-');\n  return new Date(Number(year), Number(month) - 1, Number(day));\n}\n\n// FunciÃ³n para obtener el lunes de la semana actual\nfunction getMondayOfWeek(date) {\n  const d = new Date(date);\n  const day = d.getDay(); // 0 = domingo, 1 = lunes, ..., 6 = sÃ¡bado\n  const diff = day === 0 ? -6 : 1 - day; // Si es domingo, retroceder 6 dÃ­as\n  d.setDate(d.getDate() + diff);\n  return d;\n}\n\n// FunciÃ³n para obtener el domingo de la semana actual\nfunction getSundayOfWeek(date) {\n  const monday = getMondayOfWeek(date);\n  const sunday = new Date(monday);\n  sunday.setDate(monday.getDate() + 6);\n  return sunday;\n}\n\nfunction addDays(date, delta) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + delta);\n  return result;\n}\n\nfunction formatDDMMYYYY(date) {\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const yyyy = date.getFullYear();\n  return `${dd}-${mm}-${yyyy}`;\n}\n\n// Patrones de consulta mÃ¡s robustos\nconst patterns = {\n  hoy: /\\b(hoy|dia de hoy|ventas de hoy|hoy ventas)\\b/,\n  ayer: /\\b(ayer|dia de ayer|ventas de ayer|ayer ventas)\\b/,\n  semana: /\\b(semana|esta semana|ventas de la semana|semana actual)\\b/,\n  semanaCompleta: /\\b(semana completa|toda la semana|semana entera)\\b/,\n  mes: /\\b(mes|este mes|ventas del mes|mes actual|ultimos 30 dias|30 dias)\\b/,\n  // Nuevos patrones\n  antier: /\\b(antier|anteayer|antes de ayer)\\b/,\n  ultimosDias: /\\b(ultimos (\\d+) dias|(\\d+) dias)\\b/\n};\n\nconst hoy = todayInTZ();\nlet tipo = \"dia\";\nlet inicio = hoy;\nlet fin = hoy;\nlet descripcion = \"Ventas de hoy\";\n\n// LÃ³gica de interpretaciÃ³n mejorada\nif (patterns.ayer.test(msg)) {\n  const ayer = addDays(hoy, -1);\n  inicio = ayer;\n  fin = ayer;\n  tipo = \"dia\";\n  descripcion = \"Ventas de ayer\";\n  \n} else if (patterns.antier.test(msg)) {\n  const antier = addDays(hoy, -2);\n  inicio = antier;\n  fin = antier;\n  tipo = \"dia\";\n  descripcion = \"Ventas de antier\";\n  \n} else if (patterns.semana.test(msg)) {\n  inicio = getMondayOfWeek(hoy); // Desde el lunes de esta semana\n  fin = hoy; // Hasta hoy\n  tipo = \"semana\";\n  descripcion = \"Ventas de esta semana (lunes a hoy)\";\n  \n} else if (patterns.semanaCompleta.test(msg)) {\n  inicio = getMondayOfWeek(hoy); // Desde el lunes\n  fin = getSundayOfWeek(hoy); // Hasta el domingo (puede ser futuro)\n  if (fin > hoy) fin = hoy; // No ir mÃ¡s allÃ¡ de hoy\n  tipo = \"semana\";\n  descripcion = \"Ventas de la semana completa\";\n  \n} else if (patterns.mes.test(msg)) {\n  inicio = new Date(hoy.getFullYear(), hoy.getMonth(), 1);\n  fin = hoy;\n  tipo = \"mes\";\n  descripcion = \"Ventas del mes\";\n  \n} else if (patterns.ultimosDias.test(msg)) {\n  const match = msg.match(/(\\d+)/);\n  if (match) {\n    const dias = parseInt(match[1]);\n    if (dias > 0 && dias <= 365) { // Validar rango razonable\n      inicio = addDays(hoy, -(dias - 1));\n      fin = hoy;\n      tipo = \"rango\";\n      descripcion = `Ventas de los Ãºltimos ${dias} dÃ­as`;\n    }\n  }\n} else if (patterns.hoy.test(msg)) {\n  // ExplÃ­citamente \"hoy\" (ya estÃ¡ configurado por defecto)\n  descripcion = \"Ventas de hoy\";\n}\n\n// Log de depuraciÃ³n\nconsole.log(`InterpretaciÃ³n: ${descripcion}`);\nconsole.log(`PerÃ­odo: ${formatDDMMYYYY(inicio)} al ${formatDDMMYYYY(fin)}`);\n\n// ValidaciÃ³n de fechas\nif (inicio > hoy) {\n  console.log(\"Advertencia: Fecha de inicio en el futuro, ajustando a hoy\");\n  inicio = hoy;\n}\n\nif (fin > hoy) {\n  console.log(\"Advertencia: Fecha de fin en el futuro, ajustando a hoy\");\n  fin = hoy;\n}\n\n// Resultado con mÃ¡s informaciÃ³n\nreturn [{\n  json: {\n    // Datos originales (compatibilidad)\n    queryType: tipo,\n    fechaInicio: formatDDMMYYYY(inicio),\n    fechaFin: formatDDMMYYYY(fin),\n    textoInterpretado: msg,\n    \n    // Nuevos datos\n    mensajeOriginal: raw,\n    descripcion: descripcion,\n    diasIncluidos: Math.ceil((fin - inicio) / (1000 * 60 * 60 * 24)) + 1,\n    fechaConsulta: formatDDMMYYYY(hoy),\n    \n    // Para debugging\n    debug: {\n      patronEncontrado: Object.keys(patterns).find(key => patterns[key].test(msg)) || \"hoy (default)\",\n      fechasCalculadas: {\n        inicio: inicio.toISOString().split('T')[0],\n        fin: fin.toISOString().split('T')[0]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        1352
      ],
      "id": "c25f1530-0947-406d-a8d6-3a2fc482e795",
      "name": "Interpretar_mensaje"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 368924617,
          "mode": "list",
          "cachedResultName": "LISTA_PRECIOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=368924617"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "PRECIO_UNITARIO": "={{ $json.PRECIO_UNITARIO }}"
          },
          "matchingColumns": [
            "PRODUCTO"
          ],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PRECIO_UNITARIO",
              "displayName": "PRECIO_UNITARIO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        336,
        1024
      ],
      "id": "3ed74985-4832-46b3-a24b-4fde94b90524",
      "name": "crea_o_actualiza_productos",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del nodo de Google Sheets\nconst sheetData = $('crea_o_actualiza_productos').all();\n\n// FunciÃ³n para generar la respuesta\nfunction generateProductResponse(data) {\n    if (!data || data.length === 0) {\n        return {\n            mensaje: \"â No se pudo procesar ningÃºn producto. Por favor, verifica el formato del mensaje.\",\n            tipo: \"error\",\n            productos_procesados: 0\n        };\n    }\n    \n    let productosValidos = [];\n    let productosConError = [];\n    \n    // Procesar cada elemento de respuesta del sheets\n    data.forEach((item, index) => {\n        const json = item.json;\n        \n        // Verificar si hay error en la respuesta\n        if (json.error || json.PRODUCTO === 'ERROR') {\n            productosConError.push({\n                error: json.error || 'Error desconocido',\n                producto: json.PRODUCTO || 'Producto desconocido'\n            });\n            return;\n        }\n        \n        const producto = {\n            nombre: json.PRODUCTO || json.producto || json.name,\n            precio: json.PRECIO_UNITARIO || json.precio || json.price\n        };\n        \n        // Validar que tengamos datos vÃ¡lidos\n        if (producto.nombre && producto.precio) {\n            productosValidos.push(producto);\n        }\n    });\n    \n    // Generar mensaje de respuesta\n    return buildResponseMessage(productosValidos, productosConError);\n}\n\n// FunciÃ³n para construir el mensaje de respuesta simplificado\nfunction buildResponseMessage(productos, errores) {\n    let mensaje = \"\";\n    \n    // Productos procesados exitosamente\n    if (productos.length > 0) {\n        mensaje += \"â *Precio actualizado:*\\n\\n\";\n        \n        productos.forEach((producto, index) => {\n            mensaje += `${index + 1}. ${producto.nombre} - $${formatPrice(producto.precio)}\\n`;\n        });\n    }\n    \n    // Errores si los hay\n    if (errores.length > 0) {\n        if (productos.length > 0) mensaje += \"\\n\";\n        mensaje += \"â ï¸ *Errores:*\\n\";\n        errores.forEach((error, index) => {\n            mensaje += `${index + 1}. ${error.producto}: ${error.error}\\n`;\n        });\n    }\n    \n    // Si no hay productos procesados\n    if (productos.length === 0 && errores.length === 0) {\n        mensaje = \"â No se encontraron productos vÃ¡lidos para procesar.\\n\\n\";\n        mensaje += \"ð¡ *Formato correcto:*\\n\";\n        mensaje += \"â¢ producto a precio\\n\";\n        mensaje += \"â¢ Ejemplo: coca cola 350ml a 3000\\n\";\n        mensaje += \"â¢ Ejemplo: arepa burguer a 7000\";\n    }\n    \n    return {\n        mensaje: mensaje.trim(),\n        tipo: productos.length > 0 ? \"success\" : \"error\",\n        productos_procesados: productos.length,\n        errores: errores.length,\n        detalles: {\n            productos: productos,\n            errores: errores\n        }\n    };\n}\n\n// FunciÃ³n para formatear precios (agregar separadores de miles)\nfunction formatPrice(price) {\n    return new Intl.NumberFormat('es-CO').format(price);\n}\n\n// FunciÃ³n alternativa si el nodo de sheets retorna datos en formato diferente\nfunction generateResponseFromAlternativeFormat(data) {\n    if (!data || data.length === 0) {\n        return generateProductResponse([]);\n    }\n    \n    // Si los datos vienen en formato diferente, adaptarlos\n    const adaptedData = data.map(item => {\n        return {\n            json: {\n                PRODUCTO: item.PRODUCTO || item.producto || item.name,\n                PRECIO_UNITARIO: item.PRECIO_UNITARIO || item.precio || item.price,\n                error: item.error\n            }\n        };\n    });\n    \n    return generateProductResponse(adaptedData);\n}\n\n// Ejecutar la generaciÃ³n de respuesta\nconsole.log('Datos recibidos del nodo sheets:', sheetData);\n\nlet response;\n\n// Intentar con el formato principal\ntry {\n    response = generateProductResponse(sheetData);\n} catch (error) {\n    console.log('Error con formato principal, intentando formato alternativo:', error);\n    \n    // Si falla, intentar con formato alternativo\n    try {\n        response = generateResponseFromAlternativeFormat(sheetData);\n    } catch (altError) {\n        console.log('Error con formato alternativo:', altError);\n        \n        // Respuesta de error genÃ©rica\n        response = {\n            mensaje: \"â Error interno al procesar los datos de los productos.\",\n            tipo: \"error\",\n            productos_procesados: 0,\n            error_tecnico: altError.message\n        };\n    }\n}\n\nconsole.log('Respuesta generada:', response);\n\n// Retornar la respuesta formateada\nreturn [response];\n\n/*\nEJEMPLO DE SALIDA SIMPLIFICADA:\n\nPara productos exitosos:\n{\n  \"mensaje\": \"â *Productos procesados:*\\n\\n1. Coca Cola 350ml - $3,000\\n2. Arepa Burguer - $7,000\",\n  \"tipo\": \"success\",\n  \"productos_procesados\": 2\n}\n\nPara errores:\n{\n  \"mensaje\": \"â No se encontraron productos vÃ¡lidos para procesar.\\n\\nð¡ *Formato correcto:*\\nâ¢ producto a precio\\nâ¢ Ejemplo: coca cola 350ml a 3000\\nâ¢ Ejemplo: arepa burguer a 7000\",\n  \"tipo\": \"error\",\n  \"productos_procesados\": 0\n}\n*/"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        1024
      ],
      "id": "e208e359-5d6f-4887-b6f1-6cfcd5b419bb",
      "name": "crea_mensaje"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Code2').first().json.final_message }}",
        "options": {
          "systemMessage": "=#ROL\nTu funcion es extraer productos y precios, para devolverlos en las variables PRODUCTO y PRECIO_UNITARIO\n\n#TERMINOS\n- Combo es igual a 1 chorizo y 1 Arepas de queso.\nejemplo: si la venta dice 3 combos el output debe ser: \"chorizos\" 3 \"Arepas de queso\" 3.\n\n- 2.5 es igual a 1 Gaseosa MEGA  2.5\n-1 mustang es igual a 1 cigarrillo mustang\n-350 es igual a Gaseosa 350ml\n-chorizo o chorizos es igual a Chorizos\n\n| 2.5 | Gaseosa MEGA 2.5 |\n| 350 | Gaseosa 350ml |\n| 250 | Gaseosa 250ml |\n| arepa/arepas/arepas con queso | Arepas de queso |\n| mustang | Cigarrillo Mustang |\n| tinto | Tintos |\n\n**Casos especiales:**\n- \"3250\" o \"3 250\" = 3 Gaseosa 250ml\n- \"32.5\" o \"3 2.5\" = 3 Gaseosa MEGA  2.5\n\n#FORMATO DE SALIDA\nes para modificar precios de productos entonces, hazlo para que el siguiente nodo los pueda agregar a la hoja de sheets correctamente\n\nEjemplos de formatos vÃ¡lidos:\nUn solo producto:\n\"PRODUCTO: Chorizos\\nPRECIO_UNITARIO: 8500\"\n\nMÃºltiples productos:\n\"PRODUCTO: Chorizos\\nPRECIO_UNITARIO: 8500\\n\\nPRODUCTO: Arepas de queso\\nPRECIO_UNITARIO: 2200\\n\\nPRODUCTO: Tintos\\nPRECIO_UNITARIO: 1500\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -240,
        920
      ],
      "id": "3a2f49f6-e1d9-4939-9596-3b3a5aa21335",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -168,
        1144
      ],
      "id": "40b714c1-2f78-4361-aeda-2d0cf207c5b4",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos de entrada\nconst inputData = $input.all();\n\n// FunciÃ³n para parsear el output y convertirlo al formato requerido\nfunction parseOutputToSheetFormat(data) {\n    const results = [];\n    \n    // Procesar cada item de entrada\n    data.forEach((item, index) => {\n        try {\n            // Obtener el texto del output\n            const outputText = item.json.output;\n            \n            if (!outputText) {\n                console.log(`Item ${index}: No se encontrÃ³ campo 'output'`);\n                return;\n            }\n            \n            // Llama a la nueva funciÃ³n que maneja mÃºltiples productos\n            const parsedItems = parseMultipleProductData(outputText);\n            \n            if (parsedItems.length > 0) {\n                // Agregar cada producto individual a los resultados\n                parsedItems.forEach(product => {\n                    results.push({\n                        PRODUCTO: product.PRODUCTO,\n                        PRECIO_UNITARIO: product.PRECIO_UNITARIO,\n                        item_index: index,\n                        original_output: outputText\n                    });\n                });\n            } else {\n                console.log(`Item ${index}: No se pudieron extraer datos vÃ¡lidos`);\n                // Agregar item con error para tracking\n                results.push({\n                    PRODUCTO: 'ERROR_PARSING',\n                    PRECIO_UNITARIO: 0,\n                    error: 'No se pudieron extraer producto y precio',\n                    original_output: outputText,\n                    item_index: index\n                });\n            }\n            \n        } catch (error) {\n            console.log(`Error procesando item ${index}:`, error.message);\n            results.push({\n                PRODUCTO: 'ERROR',\n                PRECIO_UNITARIO: 0,\n                error: error.message,\n                item_index: index\n            });\n        }\n    });\n    \n    return results;\n}\n\n// ----> FUNCIÃN MODIFICADA <----\n// Ahora esta funciÃ³n procesa mÃºltiples productos en una sola cadena de texto\nfunction parseMultipleProductData(outputText) {\n    const allProducts = [];\n    // Dividir el texto en bloques de productos, cada uno separado por dos saltos de lÃ­nea\n    const productBlocks = outputText.split('\\n\\n');\n\n    productBlocks.forEach(block => {\n        const lines = block.split('\\n');\n        \n        // Asume que el primer elemento es el producto y el segundo el precio\n        if (lines.length >= 2) {\n            const productNameMatch = lines[0].match(/PRODUCTO:\\s*(.*)/i);\n            const productPriceMatch = lines[1].match(/PRECIO_UNITARIO:\\s*(\\d+)/i);\n            \n            if (productNameMatch && productPriceMatch) {\n                const productName = productNameMatch[1].trim();\n                const productPrice = parseInt(productPriceMatch[1], 10);\n\n                if (productName && !isNaN(productPrice)) {\n                    allProducts.push({\n                        PRODUCTO: productName,\n                        PRECIO_UNITARIO: productPrice\n                    });\n                }\n            }\n        }\n    });\n\n    return allProducts;\n}\n\n// FunciÃ³n para limpiar el nombre del producto (ya no necesaria con el nuevo enfoque)\n// function cleanProductName(producto) { ... }\n\n// Ejecutar el procesamiento\nconsole.log('Datos de entrada:', JSON.stringify(inputData, null, 2));\nconst parsedResults = parseOutputToSheetFormat(inputData);\nconsole.log('Resultados parseados:', JSON.stringify(parsedResults, null, 2));\n\n// Retornar los resultados en el formato esperado\nreturn parsedResults;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        1024
      ],
      "id": "7bb8d832-e728-470c-85a1-eb404588bbbc",
      "name": "Code3"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1816b788-3db9-4d49-bee1-d0ce22bbb3e3",
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "422d9d78-f06f-4b39-856e-1dc2995dd539"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "274fb551-9220-4973-9a59-db0e80151f75",
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Imagen"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0e50ec0e-9edb-4310-b491-81535dddb451",
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "sticker",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Sticker"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -16,
        400
      ],
      "id": "18ad5c37-b823-4ed1-945f-73d740cc79c8",
      "name": "Switch1"
    },
    {
      "parameters": {
        "resource": "audio",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-flash"
        },
        "inputType": "binary",
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        656,
        168
      ],
      "id": "efa3e3c0-f201-4c0f-b9d7-c1a1179b320a",
      "name": "Transcribe a recording1",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        208,
        696
      ],
      "id": "97a3cd6a-61f1-4c88-9222-922d4611ca73",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        208,
        504
      ],
      "id": "0633baba-114d-48fd-b43d-1964b4f868b5",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto desde la ruta indicada\nlet texto = $json.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n// Diccionario bÃ¡sico de nÃºmeros en palabras a nÃºmeros\nconst numeros = {\n  \"cero\": 0,\n  \"uno\": 1, \"una\": 1, \"un\": 1,\n  \"dos\": 2,\n  \"tres\": 3,\n  \"cuatro\": 4,\n  \"cinco\": 5,\n  \"seis\": 6,\n  \"siete\": 7,\n  \"ocho\": 8,\n  \"nueve\": 9,\n  \"diez\": 10,\n  \"once\": 11,\n  \"doce\": 12,\n  \"trece\": 13,\n  \"catorce\": 14,\n  \"quince\": 15,\n  \"diecisÃ©is\": 16, \"dieciseis\": 16,\n  \"diecisiete\": 17,\n  \"dieciocho\": 18,\n  \"diecinueve\": 19,\n  \"veinte\": 20,\n  \"veintiuno\": 21, \"veintiuna\": 21,\n  \"veintidÃ³s\": 22, \"veintidos\": 22,\n  \"veintitrÃ©s\": 23, \"veintitres\": 23,\n  \"veinticuatro\": 24,\n  \"veinticinco\": 25,\n  \"veintisÃ©is\": 26, \"veintiseis\": 26,\n  \"veintisiete\": 27,\n  \"veintiocho\": 28,\n  \"veintinueve\": 29,\n  \"treinta\": 30,\n  \"cuarenta\": 40,\n  \"cincuenta\": 50,\n  \"sesenta\": 60,\n  \"setenta\": 70,\n  \"ochenta\": 80,\n  \"noventa\": 90\n};\n\n// FunciÃ³n para convertir palabras a nÃºmeros o sÃ­mbolos\nfunction palabraANumero(palabra) {\n  palabra = palabra.toLowerCase();\n\n  // ConversiÃ³n de \"punto\" a \".\"\n  if (palabra === \"punto\") {\n    return \".\";\n  }\n\n  if (numeros.hasOwnProperty(palabra)) {\n    return numeros[palabra];\n  }\n\n  // Manejo de combinaciones como \"treinta y cinco\"\n  if (palabra.includes(\" y \")) {\n    let partes = palabra.split(\" y \").map(p => p.trim());\n    if (numeros[partes[0]] && numeros[partes[1]]) {\n      return numeros[partes[0]] + numeros[partes[1]];\n    }\n  }\n\n  return palabra; // si no se reconoce, se deja igual\n}\n\n// Reemplazar en el texto\ntexto = texto.replace(/\\b([a-zÃ¡Ã©Ã­Ã³ÃºÃ±]+(?:\\s+y\\s+[a-zÃ¡Ã©Ã­Ã³ÃºÃ±]+)?)\\b/gi, (match) => {\n  const convertido = palabraANumero(match);\n  return convertido !== match ? convertido : match;\n});\n\nreturn { texto_convertido: texto };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        168
      ],
      "id": "f3bf4a39-484c-4c17-b5be-29759628c28e",
      "name": "Code5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b355a1d1-f888-4ce4-b12b-03a9644fb07e",
              "name": "final_message",
              "value": "={{ $json.messages[0].text.body }}",
              "type": "string"
            },
            {
              "id": "aa4f659e-93fd-458f-8cb0-d6b2bd655160",
              "name": "sessionid",
              "value": "={{ $json.messages[0].from }}",
              "type": "string"
            },
            {
              "id": "0f0f416c-ed04-4b77-bb03-23a469d40113",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1104,
        360
      ],
      "id": "3e480cc0-2723-415e-9668-9cb50fe6a53b",
      "name": "FInals_message_text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b65575a3-b476-4c0f-8ce4-a7f93531b7f0",
              "name": "final_message",
              "value": "={{ $json.texto_convertido }}",
              "type": "string"
            },
            {
              "id": "bf8845d4-5e4e-4596-b9d9-ec7940739e0c",
              "name": "sessionid",
              "value": "={{ $('WhatsApp Trigger').item.json.contacts[0].wa_id }}",
              "type": "string"
            },
            {
              "id": "d1aea00f-74e0-4acd-bf3d-5984b8eade6c",
              "name": "datetime",
              "value": "={{ new Date($now).toLocaleDateString('es-CO', { timeZone: 'America/Bogota', day: '2-digit', month: '2-digit', year: 'numeric' }) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1104,
        168
      ],
      "id": "78a86472-5518-4e4d-bcf5-b1dfe3f39b31",
      "name": "Final_message_audio"
    },
    {
      "parameters": {
        "jsCode": "// Solo para depurar\nconsole.log(\"Contenido de $input.first().json:\", $input.first().json);\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        264
      ],
      "id": "8a774389-9e71-4914-85b4-7e2de78fc837",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// Si sabes que viene en item.json.output especÃ­ficamente\nconst inputData = $input.all();\n\nreturn inputData.map(item => ({\n  json: {\n    categoria: (item.json.output || '').replace(/\\\\n/g, '').trim()\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1904,
        264
      ],
      "id": "84ac9b6d-7111-4863-b88b-429370042144",
      "name": "Code1"
    },
    {
      "parameters": {
        "content": "## GENERACION DE RESPUESTA",
        "height": 928,
        "width": 2000,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2424,
        -216
      ],
      "id": "dff4ab3f-b747-4a2f-aa10-4ef6b8f31584",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "jsCode": "// CÃ³digo para nodo Code de n8n - ConfirmaciÃ³n de Ventas (Formato Simplificado)\n// Los datos llegan desde Google Sheets con las columnas: CANTIDAD, PRODUCTO, VALOR_UNITARIO, VALOR_TOTAL\n\n// Obtener los datos de entrada\nconst inputData = $input.all();\n\n// Arrays para procesar los datos\nconst ventasItems = [];\nlet totalGeneral = 0;\n\n// FunciÃ³n para manejar plurales\nconst manejarPlural = (cantidad, producto) => {\n  const cantidadNum = parseInt(cantidad);\n  \n  // Si la cantidad es 1, intentar convertir a singular\n  if (cantidadNum === 1) {\n    const palabras = producto.trim().split(' ');\n    let primeraPalabra = palabras[0];\n    \n    // Solo procesar la primera palabra para singular/plural\n    if (primeraPalabra.endsWith('s') && primeraPalabra.length > 1) {\n      // Casos especiales que NO deben perder la 's'\n      const excepcionesS = ['lapis', 'virus', 'tesis', 'crisis', 'oasis', 'martes', 'miercoles', 'jueves', 'viernes'];\n      const palabraLower = primeraPalabra.toLowerCase();\n      \n      // Si no es una excepciÃ³n, quitar la 's'\n      if (!excepcionesS.some(excepcion => palabraLower.includes(excepcion))) {\n        // Si termina en 'es' despuÃ©s de consonante, quitar 'es'\n        if (primeraPalabra.endsWith('es') && primeraPalabra.length > 2) {\n          const antesDe_es = primeraPalabra[primeraPalabra.length - 3];\n          // Si antes de 'es' hay una consonante (no vocal)\n          if (!'aeiouÃ¡Ã©Ã­Ã³Ãº'.includes(antesDe_es.toLowerCase())) {\n            primeraPalabra = primeraPalabra.slice(0, -2);\n          } else {\n            primeraPalabra = primeraPalabra.slice(0, -1);\n          }\n        } else {\n          // Simplemente quitar la 's' final\n          primeraPalabra = primeraPalabra.slice(0, -1);\n        }\n      }\n    }\n    \n    // Reconstruir el nombre del producto con la primera palabra en singular\n    palabras[0] = primeraPalabra;\n    return palabras.join(' ');\n  }\n  \n  // Si la cantidad es mayor a 1, devolver el producto original (plural)\n  return producto;\n};\n\n// Procesar cada fila de datos\nfor (const item of inputData) {\n  const { \n    CANTIDAD, \n    PRODUCTO, \n    VALOR_UNITARIO, \n    VALOR_TOTAL \n  } = item.json;\n  \n  // Validar que todos los campos necesarios estÃ©n presentes\n  if (!CANTIDAD || !PRODUCTO || !VALOR_TOTAL) {\n    console.log('Datos incompletos en una fila:', item.json);\n    continue;\n  }\n  \n  // Formatear valores monetarios (formato colombiano sin sÃ­mbolo)\n  const formatCurrency = (value) => {\n    return parseInt(value).toLocaleString('es-CO');\n  };\n  \n  // Manejar plural/singular del producto\n  const productoFormateado = manejarPlural(CANTIDAD, PRODUCTO);\n  \n  // Agregar item a la lista con el producto en singular/plural correcto\n  const itemFormateado = `- ${parseInt(CANTIDAD)} ${productoFormateado} = ${formatCurrency(VALOR_TOTAL)}`;\n  ventasItems.push(itemFormateado);\n  \n  // Sumar al total general\n  totalGeneral += parseFloat(VALOR_TOTAL);\n}\n\n// Formatear el total general\nconst totalFormateado = totalGeneral.toLocaleString('es-CO');\n\n// Crear mensaje con formato HTML para Telegram\nlet mensajeHTML = '<b>â Registro de ventas:</b>\\n\\n';\nventasItems.forEach(item => {\n  mensajeHTML += `<code>${item}</code>\\n`;\n});\nmensajeHTML += `\\n<b>ð° Total de la venta: $ ${totalFormateado}</b>`;\n\n// Crear mensaje de texto plano (backup)\nlet mensajeTexto = 'â Registro de ventas:\\n\\n';\nmensajeTexto += ventasItems.join('\\n');\nmensajeTexto += `\\n\\nð° Total de la venta: $ ${totalFormateado}`;\n\n// Crear objeto de respuesta\nconst resultado = {\n  mensaje_html: mensajeHTML,\n  mensaje_texto: mensajeTexto,\n  parse_mode: 'HTML',\n  total_venta: totalGeneral,\n  cantidad_items: ventasItems.length,\n  items: ventasItems,\n  fecha_registro: new Date().toLocaleDateString('es-CO'),\n  hora_registro: new Date().toLocaleTimeString('es-CO', {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  })\n};\n\n// Retornar resultado (si hay mÃºltiples filas, se agrupan en un solo mensaje)\nreturn [resultado];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4160,
        -24
      ],
      "id": "8bb116c5-567a-4b05-9297-2140ae6a17cb",
      "name": "mensaje_confirmacion1"
    },
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.whatsAppTrigger",
      "typeVersion": 1,
      "position": [
        -240,
        432
      ],
      "id": "56511664-84b6-44c1-a642-3bee75e7acaa",
      "name": "WhatsApp Trigger",
      "webhookId": "e2cb9de1-267b-406d-87db-d86b490e295a",
      "credentials": {
        "whatsAppTriggerApi": {
          "id": "hwD7ETMikaozwDtr",
          "name": "Cuenta uno de prueba"
        }
      }
    },
    {
      "parameters": {
        "resource": "media",
        "operation": "mediaUrlGet",
        "mediaGetId": "={{ $('WhatsApp Trigger').item.json.messages[0].audio.id }}"
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        208,
        168
      ],
      "id": "1dae62fa-b05e-45ba-b315-8f840ed5dd90",
      "name": "Download media",
      "webhookId": "d9d821eb-99fb-4b2a-8aff-05fe1b9097eb",
      "credentials": {
        "whatsAppApi": {
          "id": "YoC3V7aBKJFC6Ew8",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        432,
        168
      ],
      "id": "25985c91-08c7-4d8b-96ef-df9ab5cd9ab7",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "07LaH64obYWqX7mM",
          "name": "Token de dos meses"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "759449937248855",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').first().json.contacts[0].wa_id }}",
        "textBody": "={{ $json.mensaje_texto }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        4384,
        -24
      ],
      "id": "223974a4-bf96-44a0-ab24-3274293c89ab",
      "name": "Send message",
      "webhookId": "1a535f01-5c49-4d61-b451-fc5a1689f7d7",
      "credentials": {
        "whatsAppApi": {
          "id": "oAX0wAZeMgXyCAYW",
          "name": "token_prueba_nunca_expira"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "759449937248855",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').first().json.contacts[0].wa_id }}",
        "textBody": "={{ $json.mensaje }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        784,
        1024
      ],
      "id": "b67c2fcd-9fc0-435d-80f0-77e3c8aa3dd9",
      "name": "Send message1",
      "webhookId": "2671fddb-16ed-4957-914f-925978163f30",
      "credentials": {
        "whatsAppApi": {
          "id": "4Gtz5w2nlTfskWBb",
          "name": "WhatsApp account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "759449937248855",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').first().json.contacts[0].wa_id }}",
        "textBody": "={{ $json.mensaje_texto }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        432,
        1352
      ],
      "id": "485958fa-b7d1-417a-a0a6-0e1a6bf1a816",
      "name": "Send message2",
      "webhookId": "2c5219a9-cb87-48b9-8c46-2da891ee1f00",
      "credentials": {
        "whatsAppApi": {
          "id": "4Gtz5w2nlTfskWBb",
          "name": "WhatsApp account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generador de mensaje WhatsApp para resumen de ventas - Con costos y utilidades\nconst fechaObjetivo = $('Interpretar_mensaje').item.json.fechaInicio;\nconst todasLasVentas = $('ventas_solicitadas').all();\n\nconsole.log(\"Generando resumen para fecha: \" + fechaObjetivo);\n\n// FunciÃ³n para normalizar fechas a formato DD-MM-YYYY\nfunction normalizarFecha(fecha) {\n  if (!fecha) return null;\n  \n  // Si ya estÃ¡ en formato DD-MM-YYYY\n  if (typeof fecha === 'string' && fecha.match(/^\\d{1,2}-\\d{1,2}-\\d{4}$/)) {\n    const partes = fecha.split('-');\n    const dia = partes[0];\n    const mes = partes[1];\n    const aÃ±o = partes[2];\n    return dia.padStart(2, '0') + '-' + mes.padStart(2, '0') + '-' + aÃ±o;\n  }\n  \n  // Si viene en formato \"24/8/2025, 8:27:04 p. m.\"\n  if (typeof fecha === 'string' && fecha.includes('/')) {\n    try {\n      const partesFecha = fecha.split(',')[0].trim();\n      const partes = partesFecha.split('/');\n      const dia = partes[0];\n      const mes = partes[1];\n      const aÃ±o = partes[2];\n      return dia.padStart(2, '0') + '-' + mes.padStart(2, '0') + '-' + aÃ±o;\n    } catch (error) {\n      return null;\n    }\n  }\n  \n  return null;\n}\n\n// FunciÃ³n para formatear nÃºmeros con separadores de miles\nfunction formatearPeso(valor) {\n  return '$' + new Intl.NumberFormat('es-CO').format(valor);\n}\n\n// FunciÃ³n para obtener dÃ­a de la semana en espaÃ±ol\nfunction obtenerDiaSemana(fecha) {\n  const partes = fecha.split('-');\n  const dia = partes[0];\n  const mes = partes[1];\n  const aÃ±o = partes[2];\n  const fechaObj = new Date(aÃ±o, mes - 1, dia);\n  const dias = ['Domingo', 'Lunes', 'Martes', 'MiÃ©rcoles', 'Jueves', 'Viernes', 'SÃ¡bado'];\n  return dias[fechaObj.getDay()];\n}\n\n// FunciÃ³n para fecha legible corta\nfunction fechaLegibleCorta(fecha) {\n  const partes = fecha.split('-');\n  const dia = partes[0];\n  const mes = partes[1];\n  return dia + '/' + mes;\n}\n\n// FunciÃ³n para convertir fecha a formato legible\nfunction fechaLegible(fecha) {\n  const partes = fecha.split('-');\n  const dia = partes[0];\n  const mes = partes[1];\n  const aÃ±o = partes[2];\n  const meses = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',\n                 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];\n  const diaSemana = obtenerDiaSemana(fecha);\n  const diaCapitalizado = diaSemana.charAt(0).toUpperCase() + diaSemana.slice(1);\n  return diaCapitalizado + ', ' + parseInt(dia) + ' de ' + meses[parseInt(mes)-1] + ' de ' + aÃ±o;\n}\n\n// Obtener el tipo de consulta y fechas\nconst tipoConsulta = $('Interpretar_mensaje').item.json.queryType;\nconst fechaInicio = $('Interpretar_mensaje').item.json.fechaInicio;\nconst fechaFin = $('Interpretar_mensaje').item.json.fechaFin;\n\n// Filtrar ventas por fecha (ahora maneja rangos)\nconst fechaInicioNormalizada = normalizarFecha(fechaInicio);\nconst fechaFinNormalizada = normalizarFecha(fechaFin);\n\nconsole.log(\"Filtrando desde: \" + fechaInicioNormalizada + \" hasta: \" + fechaFinNormalizada);\n\nlet ventasFiltradas = [];\n\nfor (let i = 0; i < todasLasVentas.length; i++) {\n  const venta = todasLasVentas[i].json;\n  const fechaVenta = venta.FECHA;\n  \n  if (fechaVenta) {\n    const fechaVentaNormalizada = normalizarFecha(fechaVenta);\n    \n    // Comparar si la fecha estÃ¡ en el rango\n    if (fechaVentaNormalizada >= fechaInicioNormalizada && fechaVentaNormalizada <= fechaFinNormalizada) {\n      ventasFiltradas.push(venta);\n    }\n  }\n}\n\n// Procesar datos para el resumen\nlet resumenProductos = {};\nlet resumenPorDia = {}; // Para agrupar por dÃ­a\nlet valorTotalGeneral = 0;\nlet costoTotalGeneral = 0;\nlet utilidadTotalGeneral = 0;\nlet cantidadTotalProductos = 0;\n\nventasFiltradas.forEach(function(venta) {\n  const producto = venta.PRODUCTO;\n  const cantidad = parseInt(venta.CANTIDAD) || 0;\n  const valorUnitario = parseFloat(venta.VALOR_UNITARIO) || 0;\n  const costo = parseFloat(venta.COSTO) || 0;\n  const valorTotal = parseFloat(venta.VALOR_TOTAL) || 0;\n  const fechaVenta = normalizarFecha(venta.FECHA);\n  \n  // Calcular costo total y utilidad total del item\n  const costoTotal = cantidad * costo;\n  const utilidadTotal = cantidad * (valorUnitario - costo);\n  \n  // Agrupar por productos\n  if (!resumenProductos[producto]) {\n    resumenProductos[producto] = {\n      cantidad: 0,\n      valorTotal: 0,\n      costoTotal: 0,\n      utilidadTotal: 0\n    };\n  }\n  \n  resumenProductos[producto].cantidad += cantidad;\n  resumenProductos[producto].valorTotal += valorTotal;\n  resumenProductos[producto].costoTotal += costoTotal;\n  resumenProductos[producto].utilidadTotal += utilidadTotal;\n  \n  // Agrupar por dÃ­a para reporte semanal\n  if (!resumenPorDia[fechaVenta]) {\n    resumenPorDia[fechaVenta] = {\n      valorTotal: 0,\n      costoTotal: 0,\n      utilidadTotal: 0\n    };\n  }\n  resumenPorDia[fechaVenta].valorTotal += valorTotal;\n  resumenPorDia[fechaVenta].costoTotal += costoTotal;\n  resumenPorDia[fechaVenta].utilidadTotal += utilidadTotal;\n  \n  valorTotalGeneral += valorTotal;\n  costoTotalGeneral += costoTotal;\n  utilidadTotalGeneral += utilidadTotal;\n  cantidadTotalProductos += cantidad;\n});\n\n// Generar mensaje para WhatsApp (solo texto plano)\nlet mensajeTexto = '';\n\nif (ventasFiltradas.length === 0) {\n  // Sin ventas\n  const tituloTexto = tipoConsulta === 'semana' ? \n    'ð RESUMEN SEMANAL\\nð ' + fechaLegibleCorta(fechaInicioNormalizada) + ' al ' + fechaLegibleCorta(fechaFinNormalizada) :\n    'ð RESUMEN DE VENTAS\\nð ' + fechaLegible(fechaInicioNormalizada);\n    \n  mensajeTexto = tituloTexto + '\\n\\nâ ï¸ No se registraron ventas para este perÃ­odo';\n  \n} else if (tipoConsulta === 'semana' || tipoConsulta === 'mes') {\n  // FORMATO ESPECIAL PARA SEMANA/MES\n  mensajeTexto = 'ð RESUMEN SEMANAL\\n';\n  mensajeTexto += 'ð ' + fechaLegibleCorta(fechaInicioNormalizada) + ' al ' + fechaLegibleCorta(fechaFinNormalizada) + '\\n';\n  mensajeTexto += 'âââââââââââââââââââââââââ\\n\\n';\n  \n  // Ordenar dÃ­as por fecha\n  const diasOrdenados = Object.keys(resumenPorDia).sort();\n  \n  diasOrdenados.forEach(function(fecha) {\n    const diaSemana = obtenerDiaSemana(fecha);\n    const datos = resumenPorDia[fecha];\n    \n    mensajeTexto += 'ð ' + diaSemana + ' â ' + formatearPeso(datos.costoTotal) + ' / ' + formatearPeso(datos.utilidadTotal) + '\\n';\n  });\n  \n  // Totales finales\n  mensajeTexto += '\\nâââââââââââââââââââââââââ\\n';\n  mensajeTexto += 'ð° COSTO TOTAL: ' + formatearPeso(costoTotalGeneral) + '\\n';\n  mensajeTexto += 'ð¸ UTILIDAD TOTAL: ' + formatearPeso(utilidadTotalGeneral) + '\\n';\n  mensajeTexto += 'ð TOTAL VENTAS: ' + formatearPeso(valorTotalGeneral);\n  \n} else {\n  // FORMATO NORMAL PARA DÃAS\n  mensajeTexto = 'ð RESUMEN DE VENTAS\\n';\n  mensajeTexto += 'ð ' + fechaLegible(fechaInicioNormalizada) + '\\n';\n  mensajeTexto += 'âââââââââââââââââââââââââ\\n\\n';\n  \n  // Ordenar productos por valor total (mayor a menor)\n  const productosArray = Object.entries(resumenProductos);\n  productosArray.sort(function(a, b) {\n    return b[1].valorTotal - a[1].valorTotal;\n  });\n  \n  // Lista de productos con formato: Producto â cantidad und â costo / utilidad\n  productosArray.forEach(function(item) {\n    const producto = item[0];\n    const datos = item[1];\n    \n    mensajeTexto += producto + ' â ' + datos.cantidad + ' und â ' + formatearPeso(datos.costoTotal) + ' / ' + formatearPeso(datos.utilidadTotal) + '\\n';\n  });\n  \n  // Totales generales\n  mensajeTexto += 'âââââââââââââââââââââââââ\\n';\n  mensajeTexto += 'ð° COSTO TOTAL: ' + formatearPeso(costoTotalGeneral) + '\\n';\n  mensajeTexto += 'ð¸ UTILIDAD TOTAL: ' + formatearPeso(utilidadTotalGeneral) + '\\n';\n  mensajeTexto += 'ð TOTAL VENTAS: ' + formatearPeso(valorTotalGeneral);\n}\n\nconsole.log(\"Ventas procesadas: \" + ventasFiltradas.length);\nconsole.log(\"Valor total: \" + valorTotalGeneral);\nconsole.log(\"Costo total: \" + costoTotalGeneral);\nconsole.log(\"Utilidad total: \" + utilidadTotalGeneral);\n\n// Retornar el mensaje\nreturn [\n  {\n    json: {\n      mensaje_texto: mensajeTexto,\n      tipo_consulta: tipoConsulta,\n      fecha_inicio: fechaInicioNormalizada,\n      fecha_fin: fechaFinNormalizada,\n      total_ventas: valorTotalGeneral,\n      total_costos: costoTotalGeneral,\n      total_utilidades: utilidadTotalGeneral,\n      total_productos: cantidadTotalProductos,\n      total_transacciones: ventasFiltradas.length,\n      resumen_productos: resumenProductos,\n      resumen_por_dia: resumenPorDia\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        1352
      ],
      "id": "b89be2be-1a3e-45ce-bb36-583687ca702a",
      "name": "Crear_mensaje"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:F"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        4160,
        168
      ],
      "id": "494e6533-cd27-4dfe-a5b4-d31cb02c3d30",
      "name": "Obtener_inventario_actual",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ===== RESTAR VENTAS DEL INVENTARIO - VERSIÃN CORREGIDA =====\nconsole.log('=== INICIO: ACTUALIZAR INVENTARIO CON VENTAS ===');\n\ntry {\n  // 1. OBTENER VENTAS DESDE \"Guardar_venta_en_hoja\"\n  console.log('1. Obteniendo ventas...');\n  const ventasData = $('Guardar_venta_en_hoja').all();\n  console.log('â Ventas obtenidas:', ventasData?.length || 0, 'registros');\n  \n  // Debug: Mostrar estructura de ventas\n  if (ventasData.length > 0) {\n    console.log('ð Estructura de venta:', JSON.stringify(ventasData[0].json, null, 2));\n  }\n\n  // 2. OBTENER INVENTARIO DESDE \"Obtener_inventario_actual\"  \n  console.log('2. Obteniendo inventario actual...');\n  const inventarioData = $('Obtener_inventario_actual').all();\n  console.log('â Inventario obtenido:', inventarioData?.length || 0, 'registros');\n  \n  // Debug: Mostrar estructura de ventas\n  if (ventasData.length > 0) {\n    console.log('ð Estructura de venta:', JSON.stringify(ventasData[0].json, null, 2));\n  }\n\n  // 3. VALIDACIONES\n  if (!ventasData || ventasData.length === 0) {\n    console.log('â ï¸ No hay ventas para procesar - RETORNANDO INVENTARIO SIN CAMBIOS');\n    console.log('ð PROBLEMA: El nodo de ventas no estÃ¡ devolviendo datos');\n    console.log('ð¡ SOLUCIÃN: Verificar que el nodo \"Guardar_venta_en_hoja\" se haya ejecutado correctamente');\n    return inventarioData; // Devolver inventario sin cambios\n  }\n\n  if (!inventarioData || inventarioData.length === 0) {\n    console.log('â No hay inventario para actualizar');\n    return [];\n  }\n\n  // 4. CREAR MAPA DE INVENTARIO PARA BÃSQUEDA RÃPIDA\n  console.log('3. Creando mapa de inventario...');\n  const inventarioMap = {};\n  \n  inventarioData.forEach((item, index) => {\n    const producto = item.json.PRODUCTO;\n    if (producto) {\n      inventarioMap[producto] = {\n        data: { ...item.json }, // Copia de los datos\n        index: index // Ãndice original\n      };\n    }\n  });\n  \n  console.log('ð Productos en inventario:', Object.keys(inventarioMap));\n\n  // 5. SUMAR TODAS LAS VENTAS POR PRODUCTO (en caso de productos duplicados)\n  console.log('4. Consolidando ventas por producto...');\n  const ventasConsolidadas = {};\n  \n  ventasData.forEach((venta, ventaIndex) => {\n    const productoVenta = venta.json.PRODUCTO;\n    const cantidadVenta = parseInt(venta.json.CANTIDAD) || 0;\n    \n    console.log(`ð Venta ${ventaIndex + 1}: ${productoVenta} - ${cantidadVenta} unidades`);\n    \n    if (!ventasConsolidadas[productoVenta]) {\n      ventasConsolidadas[productoVenta] = 0;\n    }\n    ventasConsolidadas[productoVenta] += cantidadVenta;\n  });\n  \n  console.log('ð Ventas consolidadas:', ventasConsolidadas);\n\n  // 6. APLICAR DESCUENTOS AL INVENTARIO\n  console.log('5. Aplicando descuentos al inventario...');\n  const inventarioActualizado = [];\n  const productosActualizados = [];\n  const productosNoEncontrados = [];\n\n  // Procesar cada item del inventario\n  inventarioData.forEach((itemInventario, index) => {\n    const productoInventario = itemInventario.json.PRODUCTO;\n    let nuevoItem = { ...itemInventario.json }; // Copia del item original\n    \n    // Si este producto se vendiÃ³, actualizar el stock\n    if (ventasConsolidadas.hasOwnProperty(productoInventario)) {\n      const cantidadTotalVendida = ventasConsolidadas[productoInventario];\n      const stockActual = parseInt(itemInventario.json.STOCK_ACTUAL_UNIDADES) || 0;\n      const nuevoStock = stockActual - cantidadTotalVendida;\n      \n      console.log(`ð ${productoInventario}: ${stockActual} â ${nuevoStock} (vendido: ${cantidadTotalVendida})`);\n      \n      // AQUÃ ESTÃ LA CLAVE: Actualizar el STOCK_ACTUAL_UNIDADES\n      nuevoItem.STOCK_ACTUAL_UNIDADES = nuevoStock;\n      \n      productosActualizados.push({\n        producto: productoInventario,\n        stockAnterior: stockActual,\n        cantidadVendida: cantidadTotalVendida,\n        stockNuevo: nuevoStock\n      });\n      \n      // Marcar como procesado\n      delete ventasConsolidadas[productoInventario];\n    }\n    \n    // Agregar el item (actualizado o no) al resultado\n    inventarioActualizado.push({ json: nuevoItem });\n  });\n\n  // 7. IDENTIFICAR PRODUCTOS DE VENTAS NO ENCONTRADOS EN INVENTARIO\n  Object.keys(ventasConsolidadas).forEach(producto => {\n    productosNoEncontrados.push({\n      producto: producto,\n      cantidadVendida: ventasConsolidadas[producto]\n    });\n  });\n\n  // 8. GENERAR REPORTE FINAL\n  console.log(`\\nð RESUMEN DE ACTUALIZACIÃN:`);\n  console.log(`   Total items inventario: ${inventarioData.length}`);\n  console.log(`   Productos actualizados: ${productosActualizados.length}`);\n  console.log(`   Productos no encontrados: ${productosNoEncontrados.length}`);\n  \n  if (productosActualizados.length > 0) {\n    console.log('\\nâ PRODUCTOS ACTUALIZADOS:');\n    productosActualizados.forEach(item => {\n      console.log(`   - ${item.producto}: ${item.stockAnterior} â ${item.stockNuevo} (-${item.cantidadVendida})`);\n    });\n  }\n  \n  if (productosNoEncontrados.length > 0) {\n    console.log('\\nâ PRODUCTOS NO ENCONTRADOS EN INVENTARIO:');\n    productosNoEncontrados.forEach(item => {\n      console.log(`   - ${item.producto}: ${item.cantidadVendida} unidades`);\n    });\n  }\n\n  console.log('\\nð¤ Retornando inventario actualizado...');\n  \n  // Debug: Mostrar primera actualizaciÃ³n\n  if (inventarioActualizado.length > 0) {\n    console.log('ð Primer item actualizado:', JSON.stringify(inventarioActualizado[0].json, null, 2));\n  }\n\n  console.log('=== FIN: ACTUALIZAR INVENTARIO CON VENTAS ===');\n  \n  // 9. RETORNAR INVENTARIO ACTUALIZADO EN EL FORMATO CORRECTO\n  return inventarioActualizado;\n\n} catch (error) {\n  console.log('â ERROR GENERAL:', error.message);\n  console.log('ð Stack:', error.stack);\n  return [{ \n    json: { \n      ERROR: 'Error procesando inventario', \n      detalle: error.message,\n      stack: error.stack\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4384,
        168
      ],
      "id": "d6213bc1-f25f-41ea-998c-4fe4e2e71c07",
      "name": "Procesar_actualizacion_inventario"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "UNIDAD_MEDIDA": "={{ $json.UNIDAD_MEDIDA }}",
            "FACTOR_UNIDADES": "={{ $json.FACTOR_UNIDADES }}",
            "STOCK_ACTUAL_UNIDADES": "={{ $json.STOCK_ACTUAL_UNIDADES }}",
            "PRECIO_ULTIMA_COMPRA": "={{ $json.PRECIO_ULTIMA_COMPRA }}",
            "FECHA_ULTIMA_COMPRA": "={{ $json.FECHA_ULTIMA_COMPRA }}"
          },
          "matchingColumns": [
            "PRODUCTO"
          ],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UNIDAD_MEDIDA",
              "displayName": "UNIDAD_MEDIDA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FACTOR_UNIDADES",
              "displayName": "FACTOR_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "STOCK_ACTUAL_UNIDADES",
              "displayName": "STOCK_ACTUAL_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PRECIO_ULTIMA_COMPRA",
              "displayName": "PRECIO_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FECHA_ULTIMA_COMPRA",
              "displayName": "FECHA_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        4608,
        168
      ],
      "id": "1b0ada5f-d7ee-4438-b3ab-173d023047a7",
      "name": "Update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.final_message }}",
        "options": {
          "systemMessage": "=# Prompt Mejorado para ExtracciÃ³n de Inventario\n## Instrucciones Principales\nAnaliza el siguiente mensaje de compra para inventario y extrae la informaciÃ³n en formato JSON. Usa tu comprensiÃ³n contextual para interpretar mensajes informales o con errores tipogrÃ¡ficos.\n\n## Formato de Respuesta OBLIGATORIO\n```json\n{\n  \"cantidad\": [nÃºmero],\n  \"producto\": \"[nombre normalizado del producto]\",\n  \"unidad_medida\": \"[cajas|pacas|unidades|botellas|litros]\",\n  \"precio\": [nÃºmero total]\n}\n```\n\n## TÃRMINOS Y CONVERSIONES\n### Productos bÃ¡sicos:\n| Entrada | Salida exacta |\n|---------|---------------|\n| combo/combos | \"Chorizos\" + \"Arepas de queso\" (1 de cada uno) |\n| 2.5 | \"Gaseosas MEGA 2.5\" |\n| 350 | \"Gaseosas 350ml\" |\n| 250 | \"Gaseosas 250ml\" |\n| chorizo/chorizos | \"Chorizos\" |\n| arepa/arepas/arepas con queso | \"Arepas de queso\" |\n| mustang/lucky/luqui/luki/mosto/musta/mustang/lukis/must/most | \"Cigarrillos\" |\n| tinto/tintos | \"Tintos\" |\n\n### Casos especiales - NÃºmeros unidos:\n- **PatrÃ³n:** Cuando encuentres un nÃºmero de 4 dÃ­gitos donde los primeros dÃ­gitos representan cantidad y los Ãºltimos el tipo de gaseosa:\n  - \"3250\" o \"3 250\" = 3 \"Gaseosas 250ml\"\n  - \"2350\" o \"2 350\" = 2 \"Gaseosas 350ml\" \n  - \"4350\" o \"4 350\" = 4 \"Gaseosas 350ml\"\n  - \"5250\" o \"5 250\" = 5 \"Gaseosas 250ml\"\n\n- **PatrÃ³n con decimales:** Cuando encuentres nÃºmeros con formato X2.5:\n  - \"32.5\" o \"3 2.5\" = 3 \"Gaseosas MEGA 2.5\"\n  - \"22.5\" o \"2 2.5\" = 2 \"Gaseosas MEGA 2.5\"\n  - \"52.5\" o \"5 2.5\" = 5 \"Gaseosas MEGA 2.5\"\n\n## Reglas de ExtracciÃ³n\n### 1. Cantidad\n- Extrae el nÃºmero de unidades compradas\n- Si no se especifica, asume 1\n- Convierte palabras a nÃºmeros (ej: \"cinco\" â 5)\n\n### 2. Producto\n- Usa SOLO el nombre normalizado del catÃ¡logo (ver secciÃ³n TÃRMINOS Y CONVERSIONES)\n- NO incluyas \"cajas de\", \"pacas de\", etc.\n- Normaliza variaciones y errores tipogrÃ¡ficos\n- **IMPORTANTE**: Para combos, genera DOS entradas separadas: una para \"Chorizos\" y otra para \"Arepas de queso\"\n\n### 3. Unidad de Medida\n- Identifica cÃ³mo se vende: cajas, pacas, unidades, botellas, litros\n- Si no estÃ¡ claro, infiere del contexto del producto\n- Valores permitidos: \"cajas\", \"pacas\", \"unidades\", \"botellas\", \"litros\"\n\n### 4. Precio\n- Extrae el valor total pagado por toda la compra\n- Si hay mÃºltiples formatos de precio, usa el mÃ¡s especÃ­fico\n- Convierte a nÃºmero (sin sÃ­mbolos de moneda)\n\n## CatÃ¡logo de Productos Adicionales (Nombres Normalizados)\n| Variaciones en mensaje | Producto normalizado |\n|------------------------|---------------------|\n| \"coca cola 350\", \"coca 350\" | \"Coca cola 350ml\" |\n| \"4 2.5\", \"42.5\", \"4,2.5\", \"cuatro 2.5\" | \"Gaseosas MEGA 2.5\" |\n| \"4 350\", \"4350\", \"4,350\", \"cuatro 350\" | \"Gaseosas 350ml\" |\n| \"4 250\", \"4250\", \"4,250\", \"cuatro 250\" | \"Gaseosas 250ml\" |\n| \"agua\", \"botella agua\", \"botellas de agua\" | \"Botella Agua 600ml\" |\n\n\n## Ejemplos de Procesamiento\n**Entrada:** \"comprÃ© 3 cajas de 350 y 5 de 250\"\n**Salida (DOS entradas):** \n```json\n[\n  {\n    \"cantidad\": 3,\n    \"producto\": \"Gaseosas 350ml\",\n    \"unidad_medida\": \"cajas\",\n    \"precio\": 7500\n  },\n{\n  \"cantidad\": 5,\n  \"producto\": \"Gaseosas 250ml\",\n  \"unidad_medida\": \"cajas\",\n  \"precio\": 180000\n}\n\n```\n\n**Entrada:** \"5 cajas de 250\"\n**Salida:** \n```json\n{\n  \"cantidad\": 5,\n  \"producto\": \"Gaseosas 250ml\",\n  \"unidad_medida\": \"cajas\",\n  \"precio\": 180000\n}\n```\n\n**Entrada:** \"32.5 por 85000\"\n**Salida:**\n```json\n{\n  \"cantidad\": 3,\n  \"producto\": \"Gaseosas MEGA 2.5\",\n  \"unidad_medida\": \"unidades\",\n  \"precio\": 85000\n}\n```\n\n**Entrada:** \"2 mustang y 3 tintos\"\n**Salida (DOS entradas):**\n```json\n[\n  {\n    \"cantidad\": 2,\n    \"producto\": \"Cigarrillos\",\n    \"unidad_medida\": \"unidades\",\n    \"precio\": 0\n  },\n  {\n    \"cantidad\": 3,\n    \"producto\": \"Tintos\",\n    \"unidad_medida\": \"unidades\",\n    \"precio\": 0\n  }\n]\n```\n\n## Manejo de Casos Especiales\n1. **Combos**: Siempre generar DOS entradas separadas con la cantidad dividida proportionalmente\n2. **Mensajes ambiguos**: Usa la interpretaciÃ³n mÃ¡s lÃ³gica basada en el contexto\n3. **MÃºltiples productos**: Procesa TODOS los productos mencionados\n4. **Errores tipogrÃ¡ficos**: Usa coincidencia aproximada con el catÃ¡logo\n5. **InformaciÃ³n faltante**: \n   - Cantidad faltante â 1\n   - Unidad faltante â \"unidades\"\n   - Precio faltante â 0\n\n## Mensaje a Procesar:\n{{ $json.final_message }}\n\n---\n**IMPORTANTE**: \n- Responde ÃNICAMENTE con el JSON vÃ¡lido, sin explicaciones adicionales\n- Para combos, siempre devolver un array con dos objetos\n- Para mÃºltiples productos, devolver un array con todos los productos\n- Devuelve las variables del json en MAYUSCULAS"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2672,
        432
      ],
      "id": "2ea481cf-e6b8-49af-a086-e858ed167f06",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2656,
        592
      ],
      "id": "9730dd38-941a-4670-bc20-f286c58c7388",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Capturamos la respuesta de Gemini y limpiamos\nlet respuestaGemini = String($input.first().json.output || '').trim();\nrespuestaGemini = respuestaGemini.replace(/```json\\n?/g, '').replace(/\\n?```/g, '').trim();\n\n// Parseamos el JSON\nlet datosExtraidos;\ntry {\n  datosExtraidos = JSON.parse(respuestaGemini);\n} catch (error) {\n  return [{ json: { error: \"No se pudo procesar la respuesta de Gemini\" } }];\n}\n\n// CORRECCIÃN: Verificamos si es un array y tomamos el primer elemento\nlet itemData;\nif (Array.isArray(datosExtraidos)) {\n  itemData = datosExtraidos[0]; // Tomamos el primer elemento del array\n} else {\n  itemData = datosExtraidos; // Si no es array, usamos directamente\n}\n\n// Preparamos los datos y validamos - CORRECCIÃN: Usamos las claves en MAYÃSCULAS\nconst fila = {\n  PRODUCTO: itemData.PRODUCTO,           // Era datosExtraidos.producto\n  UNIDAD_MEDIDA: itemData.UNIDAD_MEDIDA || \"\",  // Era datosExtraidos.unidad_medida\n  CANTIDAD: parseFloat(itemData.CANTIDAD),       // Era datosExtraidos.cantidad\n  PRECIO: parseFloat(itemData.PRECIO || 0),      // Era datosExtraidos.precio\n  FECHA: new Date().toLocaleString('es-CO', { timeZone: 'America/Bogota' }),\n  errores: []\n};\n\n// Validaciones especÃ­ficas\nif (!fila.PRODUCTO || fila.PRODUCTO === \"\" || fila.PRODUCTO === \"null\") {\n  fila.errores.push(\"â No se pudo identificar el PRODUCTO\");\n}\nif (!fila.CANTIDAD || fila.CANTIDAD <= 0 || isNaN(fila.CANTIDAD)) {\n  fila.errores.push(\"â La CANTIDAD debe ser mayor a 0\");\n}\n\nreturn [{ json: fila }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3088,
        464
      ],
      "id": "e5ce38a0-68ee-442c-8613-b32b56048cea",
      "name": "Code4"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "UNIDAD_MEDIDA": "={{ $json.UNIDAD_MEDIDA }}",
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "FECHA_ULTIMA_COMPRA": "={{ $json.FECHA_ULTIMA_COMPRA }}",
            "STOCK_ACTUAL_UNIDADES": "={{ $json.STOCK_ACTUAL_UNIDADES }}",
            "PRECIO_ULTIMA_COMPRA": "={{ $json.PRECIO_ULTIMA_COMPRA }}",
            "FACTOR_UNIDADES": "={{ $json.FACTOR_UNIDADES }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UNIDAD_MEDIDA",
              "displayName": "UNIDAD_MEDIDA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FACTOR_UNIDADES",
              "displayName": "FACTOR_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "STOCK_ACTUAL_UNIDADES",
              "displayName": "STOCK_ACTUAL_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PRECIO_ULTIMA_COMPRA",
              "displayName": "PRECIO_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "FECHA_ULTIMA_COMPRA",
              "displayName": "FECHA_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        4160,
        360
      ],
      "id": "04ab049a-ce3e-4555-9a9d-18f754919cb9",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1ea02d28-be6d-4d61-9128-3f99310bc6bb",
              "name": "mensaje",
              "value": "=â Ingreso de nuevo producto exitoso\nSe ha registrado en el inventario el ingreso de {{ $('Procesar_compra').item.json.CANTIDAD }} {{ $json.UNIDAD_MEDIDA }} de {{ $json.PRODUCTO }}\n ",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4384,
        360
      ],
      "id": "c6d39811-d82a-42fa-ba2e-da2fddf62cb0",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "52ba995c-4cc3-4773-a7d4-ed5791a2feb6",
              "leftValue": "={{ $json.errores }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3264,
        456
      ],
      "id": "721281c1-4bc3-460c-880b-8fee18734900",
      "name": "Procesar_compra"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "PRODUCTO",
              "lookupValue": "={{ $json.PRODUCTO }}"
            }
          ]
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:F"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3488,
        456
      ],
      "id": "feb63824-12bf-44ea-b778-df644e925a14",
      "name": "Consultar_Inventario",
      "alwaysOutputData": true,
      "retryOnFail": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Diccionario de factores por producto (normalizado a minÃºsculas)\nconst factores = {\n  \"cerveza poker en botella 330ml\": 30,\n  \"cerveza aguila en botella 330ml\": 30,\n  \"gaseosa manzana postobon 350ml\": 24,\n  \"botella agua 600ml\": 20,\n  \"coca cola 350ml\": 24,\n  \"gaseosa quatro 2.5 lts\": 8,\n  \"gaseosa quatro 350ml\": 24,\n  \"gaseosa quatro 250ml\": 24,\n  \"de todito\": 15,\n  \"aguardiente llanero por botella\": 12,\n  \"aguardiente llanero por 1/2\": 12\n};\n\ntry {\n  // Obtener datos de la nueva compra\n  const compra = $(\"Procesar_compra\").item.json;\n  \n  // ValidaciÃ³n de datos de compra\n  if (!compra || !compra.PRODUCTO) {\n    throw new Error(\"Datos de compra invÃ¡lidos: falta informaciÃ³n del producto\");\n  }\n  \n  // Verificar si el producto existe en inventario\n  const productoExiste = items && items.length > 0 && items[0].json && items[0].json.PRODUCTO;\n  \n  // Datos del producto en inventario (si existe)\n  const inventario = productoExiste ? items[0].json : {};\n  \n  // Procesar datos del producto\n  const producto = compra.PRODUCTO.trim();\n  const productoLower = producto.toLowerCase();\n  const cantidadCompra = Number(compra.CANTIDAD) || 0;\n  const precioCompra = Number(compra.PRECIO) || 0;\n  \n  // Validaciones adicionales\n  if (cantidadCompra <= 0) {\n    throw new Error(\"La cantidad debe ser mayor a 0\");\n  }\n  \n  if (precioCompra < 0) {\n    throw new Error(\"El precio no puede ser negativo\");\n  }\n  \n  // Factor de unidades (primero buscar en diccionario, luego en inventario)\n  const factorUnidades = factores[productoLower] || Number(inventario.FACTOR_UNIDADES) || 1;\n  \n  // Stock actual\n  const stockActual = Number(inventario.STOCK_ACTUAL_UNIDADES) || 0;\n  \n  // Calcular unidades ingresadas\n  const unidadesIngresadas = cantidadCompra * factorUnidades;\n  \n  // Calcular nuevo stock\n  const nuevoStock = stockActual + unidadesIngresadas;\n  \n  // Fecha actual en zona horaria de Colombia\n  const fechaActual = new Date().toLocaleString('es-CO', { \n    timeZone: 'America/Bogota',\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  });\n  \n  // Determinar acciÃ³n\n  const accion = stockActual === 0 ? \"crear\" : \"actualizar\";\n  \n  // Log para debugging (opcional)\n  console.log(`Procesando: ${producto} - Cantidad: ${cantidadCompra} - Factor: ${factorUnidades} - Unidades: ${unidadesIngresadas}`);\n  \n  // Retornar resultado\n  return [{\n    json: {\n      PRODUCTO: producto,\n      UNIDAD_MEDIDA: compra.UNIDAD_MEDIDA || \"cajas\",\n      FACTOR_UNIDADES: factorUnidades,\n      CANTIDAD: cantidadCompra,\n      STOCK_ACTUAL_UNIDADES: nuevoStock,\n      PRECIO_ULTIMA_COMPRA: precioCompra,\n      FECHA_ULTIMA_COMPRA: fechaActual,\n      UNIDADES_INGRESADAS: unidadesIngresadas, // Campo adicional Ãºtil\n      STOCK_ANTERIOR: stockActual, // Campo adicional para auditorÃ­a\n      accion: accion\n    }\n  }];\n  \n} catch (error) {\n  console.error(\"Error procesando compra:\", error.message);\n  \n  // Retornar error estructurado\n  return [{\n    json: {\n      error: true,\n      mensaje: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3712,
        456
      ],
      "id": "c1443ae6-6e08-45c8-a401-f29cfe1c4347",
      "name": "Calcular_Stock",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.accion }}",
                    "rightValue": "crear",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "83998a57-c5a0-4498-b92a-823c9730b6a0"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "crear_producto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cc08f081-51a5-4153-8c7a-711502a7a88b",
                    "leftValue": "={{ $json.accion }}",
                    "rightValue": "actualizar",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "actualizar"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3936,
        464
      ],
      "id": "b857c698-d125-4a6d-93ac-36edbd8dc636",
      "name": "Decidir_Accion"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "243a4991-db1b-4c38-81b0-618edd24fb32",
              "name": "=mensaje_confirmacion",
              "value": "=â» ActualizaciÃ³n de inventario\nSe ingresaron correctamente {{ $('Procesar_compra').item.json.CANTIDAD }} {{ $json.UNIDAD_MEDIDA }} de {{ $json.PRODUCTO }}.\nNuevo Stock: {{ \n  Math.floor($json.STOCK_ACTUAL_UNIDADES / $json.FACTOR_UNIDADES) + \n  ' ' + $json.UNIDAD_MEDIDA + \n  ($json.STOCK_ACTUAL_UNIDADES % $json.FACTOR_UNIDADES !== 0 \n    ? ' y ' + ($json.STOCK_ACTUAL_UNIDADES % $json.FACTOR_UNIDADES) + ' unidades' \n    : '') \n}} de {{ $json.PRODUCTO }}\nFECHA: {{ $json.FECHA_ULTIMA_COMPRA }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4384,
        552
      ],
      "id": "2b7857c3-f656-4bba-bc87-0dc0cd957e37",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "UNIDAD_MEDIDA": "={{ $json.UNIDAD_MEDIDA }}",
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "FECHA_ULTIMA_COMPRA": "={{ $json.FECHA_ULTIMA_COMPRA }}",
            "STOCK_ACTUAL_UNIDADES": "={{ $json.STOCK_ACTUAL_UNIDADES }}",
            "PRECIO_ULTIMA_COMPRA": "={{ $json.PRECIO_ULTIMA_COMPRA }}",
            "FACTOR_UNIDADES": "={{ $json.FACTOR_UNIDADES }}"
          },
          "matchingColumns": [
            "PRODUCTO"
          ],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UNIDAD_MEDIDA",
              "displayName": "UNIDAD_MEDIDA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FACTOR_UNIDADES",
              "displayName": "FACTOR_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "STOCK_ACTUAL_UNIDADES",
              "displayName": "STOCK_ACTUAL_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PRECIO_ULTIMA_COMPRA",
              "displayName": "PRECIO_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "FECHA_ULTIMA_COMPRA",
              "displayName": "FECHA_ULTIMA_COMPRA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        4160,
        552
      ],
      "id": "5b50b2fd-b0f9-434f-98b4-c36d8ad7ad08",
      "name": "Update row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a43847d7-9c88-495e-b01a-9dc87dac721e",
              "name": "final_message",
              "value": "={{ $('Code2').item.json.final_message }}",
              "type": "string"
            },
            {
              "id": "2655e097-412c-4299-9410-7ca616088ba0",
              "name": "sessionid",
              "value": "={{ $('Code2').item.json.sessionid }}",
              "type": "string"
            },
            {
              "id": "f29ed700-e3b7-42c0-a963-78aa19163346",
              "name": "datetime",
              "value": "={{ $('Code2').item.json.datetime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2336,
        448
      ],
      "id": "e39b08da-2f8b-42db-b464-8387b6b8795d",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "759449937248855",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').first().json.contacts[0].wa_id }}",
        "textBody": "={{ $json.mensaje_confirmacion }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        4592,
        560
      ],
      "id": "3c814e8c-ef0b-45ce-978b-1d5a0783d8bd",
      "name": "Send message3",
      "webhookId": "e13ce16f-101b-400c-a117-3bb8f7cd46de",
      "credentials": {
        "whatsAppApi": {
          "id": "4Gtz5w2nlTfskWBb",
          "name": "WhatsApp account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "759449937248855",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').first().json.contacts[0].wa_id }}",
        "textBody": "={{ $json.mensaje_confirmacion }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        4576,
        368
      ],
      "id": "a1c3a409-504e-4a7d-aab2-23c257dce841",
      "name": "Send message4",
      "webhookId": "e13ce16f-101b-400c-a117-3bb8f7cd46de",
      "credentials": {
        "whatsAppApi": {
          "id": "4Gtz5w2nlTfskWBb",
          "name": "WhatsApp account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "CLASIFICA TIPO DE ENTRADA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [],
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "LIMPIA MENSAJE DE VENTA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "LIMPIA MENSAJE DE VENTA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code_ventas": {
      "main": [
        [
          {
            "node": "Obtener_lista_precios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener_lista_precios": {
      "main": [
        [
          {
            "node": "Cruce_precio_venta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cruce_precio_venta": {
      "main": [
        [
          {
            "node": "Guardar_venta_en_hoja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar_venta_en_hoja": {
      "main": [
        [
          {
            "node": "mensaje_confirmacion1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Obtener_inventario_actual",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CLASIFICA TIPO DE ENTRADA": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LIMPIA MENSAJE DE VENTA": {
      "main": [
        [
          {
            "node": "Code_ventas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ventas_solicitadas": {
      "main": [
        [
          {
            "node": "Crear_mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interpretar_mensaje": {
      "main": [
        [
          {
            "node": "ventas_solicitadas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crea_o_actualiza_productos": {
      "main": [
        [
          {
            "node": "crea_mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crea_mensaje": {
      "main": [
        [
          {
            "node": "Send message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "crea_o_actualiza_productos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Download media",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "FInals_message_text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe a recording1": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Final_message_audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final_message_audio": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FInals_message_text": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "CLASIFICA TIPO DE ENTRADA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mensaje_confirmacion1": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Trigger": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download media": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Transcribe a recording1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crear_mensaje": {
      "main": [
        [
          {
            "node": "Send message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener_inventario_actual": {
      "main": [
        [
          {
            "node": "Procesar_actualizacion_inventario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar_actualizacion_inventario": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Procesar_compra",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Send message4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar_compra": {
      "main": [
        [
          {
            "node": "Consultar_Inventario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar_Inventario": {
      "main": [
        [
          {
            "node": "Calcular_Stock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcular_Stock": {
      "main": [
        [
          {
            "node": "Decidir_Accion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decidir_Accion": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet1": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Send message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Bogota",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "APs2yNeX1kNL3e1L"
  },
  "versionId": "87c26e18-6b0b-471b-bc24-21d4567b3818",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "07f67ec32baaad4ae3d75f4e22d6ad4d1aa561c2ad8388f49ad7031ee0fe8de1"
  },
  "id": "L1TByIhLW8H0ge2x",
  "tags": []
}