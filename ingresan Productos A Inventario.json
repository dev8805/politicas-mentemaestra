{
  "name": "ingresan Productos A Inventario",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.final_message }}",
        "options": {
          "systemMessage": "=# Prompt Mejorado para Extracci√≥n de Inventario\n## Instrucciones Principales\nAnaliza el siguiente mensaje de compra para inventario y extrae la informaci√≥n en formato JSON. Usa tu comprensi√≥n contextual para interpretar mensajes informales o con errores tipogr√°ficos.\n\n## Formato de Respuesta OBLIGATORIO\n```json\n{\n  \"cantidad\": [n√∫mero],\n  \"producto\": \"[nombre normalizado del producto]\",\n  \"unidad_medida\": \"[cajas|pacas|unidades|botellas|litros]\",\n  \"precio\": [n√∫mero total]\n}\n```\n\n## Reglas de Extracci√≥n\n### 1. Cantidad\n- Extrae el n√∫mero de unidades compradas\n- Si no se especifica, asume 1\n- Convierte palabras a n√∫meros (ej: \"cinco\" ‚Üí 5)\n\n### 2. Producto\n- Usa SOLO el nombre normalizado del cat√°logo (ver secci√≥n T√âRMINOS Y CONVERSIONES)\n- NO incluyas \"cajas de\", \"pacas de\", etc.\n- Normaliza variaciones y errores tipogr√°ficos\n- **IMPORTANTE**: Para combos, genera DOS entradas separadas: una para \"Chorizos\" y otra para \"Arepas de queso\"\n\n### 3. Unidad de Medida\n- Identifica c√≥mo se vende: cajas, pacas, unidades, botellas, litros\n- Si no est√° claro, infiere del contexto del producto\n- Valores permitidos: \"cajas\", \"pacas\", \"unidades\", \"botellas\", \"litros\"\n\n### 4. Precio\n- Extrae el valor total pagado por toda la compra\n- Si hay m√∫ltiples formatos de precio, usa el m√°s espec√≠fico\n- Convierte a n√∫mero (sin s√≠mbolos de moneda)\n\n\n## Ejemplos de Procesamiento\n**Entrada:** \"compr√© 3 cajas de Gaseosas 350ml y 5 de Gaseosas 250ml\"\n**Salida (DOS entradas):** \n```json\n[\n  {\n    \"cantidad\": 3,\n    \"producto\": \"Gaseosas 350ml\",\n    \"unidad_medida\": \"cajas\",\n    \"precio\": 7500\n  },\n{\n  \"cantidad\": 5,\n  \"producto\": \"Gaseosas 250ml\",\n  \"unidad_medida\": \"cajas\",\n  \"precio\": 180000\n}\n\n```\n\n**Entrada:** \"5 cajas de Gaseosas 250ml\"\n**Salida:** \n```json\n{\n  \"cantidad\": 5,\n  \"producto\": \"Gaseosas 250ml\",\n  \"unidad_medida\": \"cajas\",\n  \"precio\": 180000\n}\n```\n\n## Manejo de Casos Especiales\n1. **Combos**: Siempre generar DOS entradas separadas con la cantidad dividida proportionalmente\n2. **Mensajes ambiguos**: Usa la interpretaci√≥n m√°s l√≥gica basada en el contexto\n3. **M√∫ltiples productos**: Procesa TODOS los productos mencionados\n4. **Errores tipogr√°ficos**: Usa coincidencia aproximada con el cat√°logo\n5. **Informaci√≥n faltante**: \n   - Cantidad faltante ‚Üí 1\n   - Unidad faltante ‚Üí \"unidades\"\n   - Precio faltante ‚Üí 0\n\n## Mensaje a Procesar:\n{{ $json.final_message }}\n\n---\n**IMPORTANTE**: \n- Responde √öNICAMENTE con el JSON v√°lido, sin explicaciones adicionales\n- Para combos, siempre devolver un array con dos objetos\n- Para m√∫ltiples productos, devolver un array con todos los productos\n- Devuelve las variables del json en MAYUSCULAS"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2848,
        560
      ],
      "id": "a0a9911a-1356-44b3-af46-4c74763c6fb2",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -2560,
        576
      ],
      "id": "1fc0ab75-70bc-4227-98ef-d2515447512e",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "taiVmaaeYJaTZiam",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Capturamos la respuesta de Gemini y limpiamos\nlet respuestaGemini = String($input.first().json.output || '').trim();\nrespuestaGemini = respuestaGemini.replace(/```json\\n?/g, '').replace(/\\n?```/g, '').trim();\n\n// Parseamos el JSON\nlet datosExtraidos;\ntry {\n  datosExtraidos = JSON.parse(respuestaGemini);\n} catch (error) {\n  return [{ json: { error: \"No se pudo procesar la respuesta de Gemini\" } }];\n}\n\n// ======= NUEVA L√ìGICA: PROCESAR TODOS LOS PRODUCTOS =======\nlet productosAProcesar = [];\n\n// Verificamos si es un array o un objeto √∫nico\nif (Array.isArray(datosExtraidos)) {\n  // Es un array, procesar todos los elementos\n  productosAProcesar = datosExtraidos;\n  console.log(`üì¶ Procesando ${datosExtraidos.length} productos del array`);\n} else {\n  // Es un objeto √∫nico, convertir a array\n  productosAProcesar = [datosExtraidos];\n  console.log(`üì¶ Procesando 1 producto √∫nico`);\n}\n\n// Array para almacenar todos los resultados\nconst resultados = [];\n\n// Procesar cada producto individualmente\nproductosAProcesar.forEach((itemData, index) => {\n  console.log(`üîç Procesando producto ${index + 1}: ${itemData.PRODUCTO}`);\n  \n  // Preparamos los datos y validamos\n  const fila = {\n    PRODUCTO: itemData.PRODUCTO,\n    UNIDAD_MEDIDA: itemData.UNIDAD_MEDIDA || \"\",\n    CANTIDAD: parseFloat(itemData.CANTIDAD),\n    PRECIO: parseFloat(itemData.PRECIO || 0),\n    FECHA: new Date().toLocaleString('es-CO', { timeZone: 'America/Bogota' }),\n    errores: []\n  };\n  \n  // Validaciones espec√≠ficas para cada producto\n  if (!fila.PRODUCTO || fila.PRODUCTO === \"\" || fila.PRODUCTO === \"null\") {\n    fila.errores.push(\"‚ùå No se pudo identificar el PRODUCTO\");\n  }\n  if (!fila.CANTIDAD || fila.CANTIDAD <= 0 || isNaN(fila.CANTIDAD)) {\n    fila.errores.push(\"‚ùå La CANTIDAD debe ser mayor a 0\");\n  }\n  \n  // Agregar este producto al array de resultados\n  resultados.push({ json: fila });\n  \n  // Log del resultado\n  if (fila.errores.length === 0) {\n    console.log(`‚úÖ Producto ${index + 1} procesado: ${fila.PRODUCTO} - ${fila.CANTIDAD} ${fila.UNIDAD_MEDIDA}`);\n  } else {\n    console.log(`‚ùå Producto ${index + 1} con errores: ${fila.errores.join(', ')}`);\n  }\n});\n\n// Log final\nconsole.log(`üìä Resumen: ${resultados.length} productos procesados`);\n\n// Retornar TODOS los productos procesados\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2416,
        544
      ],
      "id": "3d761a27-99ad-4102-84c3-07fdcacb35bc",
      "name": "Code4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "52ba995c-4cc3-4773-a7d4-ed5791a2feb6",
              "leftValue": "={{ $json.errores }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2144,
        544
      ],
      "id": "db3694ce-6de7-4ca1-af04-566cec22812b",
      "name": "Procesar_compra"
    },
    {
      "parameters": {
        "jsCode": "try {\n  // ======= OBTENER DATOS DE M√öLTIPLES COMPRAS =======\n  const comprasData = $(\"Procesar_compra\").all();\n  console.log(`üì¶ Procesando ${comprasData.length} compras`);\n  \n  // Validaci√≥n inicial\n  if (!comprasData || comprasData.length === 0) {\n    throw new Error(\"No hay datos de compras para procesar\");\n  }\n  \n  // ======= OBTENER INVENTARIO ACTUAL =======\n  const inventarioItems = $input.all(); // Todos los items del inventario\n  console.log(`üìä Items de inventario disponibles: ${inventarioItems.length}`);\n  \n  // Crear un mapa del inventario por producto para b√∫squeda r√°pida\n  const inventarioMap = {};\n  inventarioItems.forEach(item => {\n    if (item.json && item.json.PRODUCTO) {\n      const producto = item.json.PRODUCTO.trim();\n      inventarioMap[producto] = item.json;\n    }\n  });\n  \n  console.log(`üìã Productos en inventario:`, Object.keys(inventarioMap));\n  \n  // ======= PROCESAR CADA COMPRA INDIVIDUALMENTE =======\n  const resultados = [];\n  \n  comprasData.forEach((compraItem, index) => {\n    try {\n      const compra = compraItem.json;\n      console.log(`\\nüîç Procesando compra ${index + 1}: ${compra.PRODUCTO}`);\n      \n      // Validaci√≥n de datos de compra\n      if (!compra || !compra.PRODUCTO) {\n        throw new Error(`Compra ${index + 1}: Datos inv√°lidos - falta informaci√≥n del producto`);\n      }\n      \n      // Buscar este producto espec√≠fico en el inventario\n      const producto = compra.PRODUCTO.trim();\n      const inventario = inventarioMap[producto];\n      \n      console.log(`   üìã Producto: ${producto}`);\n      \n      // VALIDACI√ìN ESTRICTA: El producto DEBE existir en el inventario\n      if (!inventario || !inventario.PRODUCTO) {\n        throw new Error(`${producto}: No existe en el inventario. Use el nombre exacto del inventario.`);\n      }\n      \n      console.log(`   üìç Producto encontrado en inventario: ‚úÖ`);\n      \n      // Procesar datos del producto\n      const cantidadCompra = Number(compra.CANTIDAD) || 0;\n      const precioCompra = Number(compra.PRECIO) || 0;\n      \n      // Validaciones adicionales\n      if (cantidadCompra <= 0) {\n        throw new Error(`${producto}: La cantidad debe ser mayor a 0`);\n      }\n      \n      if (precioCompra < 0) {\n        throw new Error(`${producto}: El precio no puede ser negativo`);\n      }\n      \n      // Validar que el producto tenga factor definido\n      if (!inventario.FACTOR_UNIDADES || inventario.FACTOR_UNIDADES <= 0) {\n        throw new Error(`${producto}: No tiene FACTOR_UNIDADES definido en el inventario`);\n      }\n      \n      // Stock actual\n      const stockActual = Number(inventario.STOCK_ACTUAL_UNIDADES) || 0;\n      \n      // Calcular unidades ingresadas\n      const unidadesIngresadas = cantidadCompra * inventario.FACTOR_UNIDADES;\n      \n      // Calcular nuevo stock\n      const nuevoStock = stockActual + unidadesIngresadas;\n      \n      // Fecha actual en zona horaria de Colombia\n      const fechaActual = new Date().toLocaleString('es-CO', { \n        timeZone: 'America/Bogota',\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n      \n      // Log del procesamiento\n      console.log(`   üìä Stock: ${stockActual} ‚Üí ${nuevoStock} (+${unidadesIngresadas})`);\n      console.log(`   üîß Factor: ${inventario.FACTOR_UNIDADES} | Acci√≥n: actualizar`);\n      \n      // Crear resultado para este producto\n      const resultado = {\n        json: {\n          PRODUCTO: producto,\n          UNIDAD_MEDIDA: compra.UNIDAD_MEDIDA || \"cajas\",\n          FACTOR_UNIDADES: inventario.FACTOR_UNIDADES,\n          CANTIDAD: cantidadCompra,\n          STOCK_ACTUAL_UNIDADES: nuevoStock,\n          PRECIO_ULTIMA_COMPRA: precioCompra,\n          FECHA_ULTIMA_COMPRA: fechaActual,\n          UNIDADES_INGRESADAS: unidadesIngresadas,\n          STOCK_ANTERIOR: stockActual,\n          accion: \"actualizar\",\n          // Campos adicionales para tracking\n          row_number: inventario.row_number || null,\n          procesado_en_lote: true,\n          indice_compra: index + 1\n        }\n      };\n      \n      resultados.push(resultado);\n      console.log(`   ‚úÖ Producto procesado exitosamente`);\n      \n    } catch (error) {\n      console.error(`   ‚ùå Error procesando compra ${index + 1}:`, error.message);\n      \n      // Agregar resultado de error para este producto espec√≠fico\n      resultados.push({\n        json: {\n          error: true,\n          mensaje: error.message,\n          producto_con_error: compraItem.json?.PRODUCTO || 'Desconocido',\n          indice_compra: index + 1,\n          timestamp: new Date().toISOString()\n        }\n      });\n    }\n  });\n  \n  // ======= RESUMEN FINAL =======\n  const exitosos = resultados.filter(r => !r.json.error).length;\n  const conError = resultados.filter(r => r.json.error).length;\n  \n  console.log(`\\nüìä RESUMEN FINAL:`);\n  console.log(`   Total compras: ${comprasData.length}`);\n  console.log(`   Procesadas exitosamente: ${exitosos}`);\n  console.log(`   Con errores: ${conError}`);\n  \n  // Retornar TODOS los resultados\n  return resultados;\n  \n} catch (error) {\n  console.error(\"‚ùå Error general procesando compras:\", error.message);\n  \n  // Retornar error estructurado general\n  return [{\n    json: {\n      error: true,\n      mensaje: `Error general: ${error.message}`,\n      tipo_error: \"error_general\",\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1680,
        512
      ],
      "id": "d7e436d0-c9f6-4c05-9652-3837abe55656",
      "name": "Calcular_Stock",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Gerson",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "UNIDAD_MEDIDA": "={{ $json.UNIDAD_MEDIDA }}",
            "PRODUCTO": "={{ $json.PRODUCTO }}",
            "STOCK_ACTUAL_UNIDADES": "={{ $json.STOCK_ACTUAL_UNIDADES }}",
            "FACTOR_UNIDADES": "={{ $json.FACTOR_UNIDADES }}"
          },
          "matchingColumns": [
            "PRODUCTO"
          ],
          "schema": [
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UNIDAD_MEDIDA",
              "displayName": "UNIDAD_MEDIDA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FACTOR_UNIDADES",
              "displayName": "FACTOR_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "STOCK_ACTUAL_UNIDADES",
              "displayName": "STOCK_ACTUAL_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "APODOS Y REFERENCIAS",
              "displayName": "APODOS Y REFERENCIAS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1216,
        528
      ],
      "id": "72d82fa7-555b-4be7-acee-55e079848361",
      "name": "Update row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a43847d7-9c88-495e-b01a-9dc87dac721e",
              "name": "final_message",
              "value": "={{ $json.mensaje }}",
              "type": "string"
            },
            {
              "id": "2655e097-412c-4299-9410-7ca616088ba0",
              "name": "sessionid",
              "value": "={{ $json.wa_id }}",
              "type": "string"
            },
            {
              "id": "f29ed700-e3b7-42c0-a963-78aa19163346",
              "name": "datetime",
              "value": "={{ $json.fecha }}",
              "type": "string"
            },
            {
              "id": "e22e1768-594d-4730-9043-0fb05ad7caae",
              "name": "instancia",
              "value": "={{ $json.instancia }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3040,
        592
      ],
      "id": "2cd30735-fea1-4b98-a347-c8107f5d8418",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "jsCode": "// C√≥digo para generar mensaje de confirmaci√≥n de inventario\n// USAR DATOS DE CALCULAR_STOCK (que est√°n completos)\nconst inputData = $('Calcular_Stock').all();\n\n// Funci√≥n para formatear n√∫meros con separadores de miles\nfunction formatearNumero(numero) {\n  return new Intl.NumberFormat('es-CO').format(numero);\n}\n\n// Funci√≥n para formatear precios\nfunction formatearPrecio(precio) {\n  if (precio === 0 || precio === null || precio === undefined) {\n    return \"No registrado\";\n  }\n  return \"$\" + formatearNumero(precio);\n}\n\n// Funci√≥n para manejar singular/plural de unidades de medida\nfunction pluralizar(cantidad, unidad) {\n  const cantidadNum = parseInt(cantidad);\n  \n  if (cantidadNum === 1) {\n    // Convertir a singular\n    if (unidad === \"cajas\") return \"caja\";\n    if (unidad === \"pacas\") return \"paca\";\n    if (unidad === \"unidades\") return \"unidad\";\n    if (unidad === \"botellas\") return \"botella\";\n    if (unidad === \"litros\") return \"litro\";\n    return unidad; // Si no coincide, devolver original\n  }\n  \n  return unidad; // Plural (original)\n}\n\n// Procesar los datos\nconst productos = [];\nlet totalProductosActualizados = 0;\nlet totalUnidadesIngresadas = 0;\n\ninputData.forEach((item, index) => {\n  // Los datos vienen directamente en item.json desde Calcular_Stock\n  const data = item.json;\n  \n  // Verificar si hay errores\n  if (data.error) {\n    productos.push({\n      nombre: data.producto_con_error || \"Producto desconocido\",\n      error: data.mensaje,\n      esError: true\n    });\n    return;\n  }\n  \n  // Extraer valores (ahora directamente, ya que sabemos que est√°n disponibles)\n  const cantidad = parseInt(data.CANTIDAD);\n  const stockAnterior = parseInt(data.STOCK_ANTERIOR);\n  const stockNuevo = parseInt(data.STOCK_ACTUAL_UNIDADES);\n  const unidadesIngresadas = parseInt(data.UNIDADES_INGRESADAS);\n  const precio = parseFloat(data.PRECIO_ULTIMA_COMPRA) || 0;\n  const producto = data.PRODUCTO;\n  const unidadMedida = data.UNIDAD_MEDIDA;\n  \n  // Procesar producto exitoso\n  const unidadFormateada = pluralizar(cantidad, unidadMedida);\n  \n  productos.push({\n    nombre: producto,\n    cantidad: cantidad,\n    unidad: unidadFormateada,\n    stockAnterior: stockAnterior,\n    stockNuevo: stockNuevo,\n    unidadesIngresadas: unidadesIngresadas,\n    factor: parseInt(data.FACTOR_UNIDADES),\n    precio: precio,\n    accion: data.accion,\n    esError: false\n  });\n  \n  totalProductosActualizados++;\n  totalUnidadesIngresadas += unidadesIngresadas;\n});\n\n// Generar mensaje de confirmaci√≥n\nlet mensaje = \"\";\n\n// --- INICIO DE LOS CAMBIOS ---\n// Mensaje para cuando no hay productos que procesar\nif (productos.length === 0) {\n  mensaje = \"‚ö†Ô∏è El inventario no tiene productos para procesar.\";\n} else {\n  // Encabezado con nuevo formato\n  mensaje += \"‚úÖ *Informe de actualizaci√≥n de inventario*\\n\";\n  mensaje += `üìÖ ${new Date().toLocaleDateString('es-CO', { \n    timeZone: 'America/Bogota',\n    weekday: 'long',\n    year: 'numeric', \n    month: 'long', \n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  })}`.replace(/^\\w/, c => c.toUpperCase()) + \"\\n\\n\";\n  \n  // Listar productos en formato m√°s detallado\n  mensaje += \"*Detalles de los productos procesados:*\\n\\n\";\n  \n  productos.forEach((producto, index) => {\n    if (producto.esError) {\n      mensaje += `‚ùå *${producto.nombre}* - Error: ${producto.error}\\n`;\n    } else {\n      mensaje += `üì¶ *${producto.nombre}*:\\n`;\n      mensaje += `- Cantidad: ${producto.cantidad} ${producto.unidad}\\n`;\n      mensaje += `- Nuevo stock: ${formatearNumero(producto.stockNuevo)} unidades\\n\\n`;\n    }\n  });\n}\n// --- FIN DE LOS CAMBIOS ---\n\n// Crear versi√≥n de texto plano (sin markdown)\nlet mensajeTextoPlano = mensaje\n  .replace(/\\*/g, \"\") // Quitar asteriscos de markdown\n  .replace(/‚îÅ/g, \"-\"); // Reemplazar caracteres especiales\n\n// Retornar resultado\nconst resultado = {\n  json: {\n    mensaje_html: mensaje, // Con formato markdown para Telegram\n    mensaje_texto: mensajeTextoPlano, // Texto plano\n    parse_mode: \"Markdown\", // Para Telegram\n    total_productos: productos.length,\n    productos_exitosos: totalProductosActualizados,\n    productos_con_error: productos.filter(p => p.esError).length,\n    total_unidades_ingresadas: totalUnidadesIngresadas,\n    fecha_procesamiento: new Date().toISOString(),\n    resumen_productos: productos,\n    tipo_operacion: \"actualizacion_inventario\"\n  }\n};\n\nconsole.log(`üìä Mensaje de confirmaci√≥n generado:`);\nconsole.log(`   - Productos procesados: ${productos.length}`);\nconsole.log(`   - Productos exitosos: ${totalProductosActualizados}`);\nconsole.log(`   - Total unidades: ${totalUnidadesIngresadas}`);\n\nreturn [resultado];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -992,
        464
      ],
      "id": "63a2ccd8-7be0-4b0b-9cf0-26a32284c124",
      "name": "Code"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Edit Fields3').first().json.instancia }}",
        "remoteJid": "={{ $('Edit Fields3').first().json.sessionid }}",
        "messageText": "={{ $json.mensaje_texto }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -816,
        464
      ],
      "id": "bf42f641-6ab4-4812-b4d6-9aaab7f0cf21",
      "name": "Enviar texto3",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "mensaje"
            },
            {
              "name": "wa_id"
            },
            {
              "name": "instancia"
            },
            {
              "name": "fecha"
            }
          ]
        }
      },
      "id": "c055762a-8fe7-4141-a639-df2372f30060",
      "typeVersion": 1.1,
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -3264,
        592
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1898212254,
          "mode": "list",
          "cachedResultName": "inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=1898212254"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:D"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1888,
        512
      ],
      "id": "96113c28-f643-42d5-b865-82b8212947dc",
      "name": "obetener_inventario",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg",
          "mode": "list",
          "cachedResultName": "Ventas_Negocio",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 453999267,
          "mode": "list",
          "cachedResultName": "registro_entrada_inventario",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vrZgWkcv2TYE1-MJ7Rc_dcpvvPx28lP_P4bkaaXNwOg/edit#gid=453999267"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "CANTIDAD": "={{ $('Calcular_Stock').item.json.CANTIDAD }}",
            "FACTOR_UNIDADES": "={{ $('Calcular_Stock').item.json.UNIDAD_MEDIDA }}",
            "PRODUCTO": "={{ $('Calcular_Stock').item.json.PRODUCTO }}",
            "FECHA": "={{ $('Edit Fields3').first().json.datetime }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "CANTIDAD",
              "displayName": "CANTIDAD",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FACTOR_UNIDADES",
              "displayName": "FACTOR_UNIDADES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PRODUCTO",
              "displayName": "PRODUCTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FECHA",
              "displayName": "FECHA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -976,
        688
      ],
      "id": "1cc86bbe-de0d-45cd-a242-260d5ae32743",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlPPAlxZCKB3BTUm",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3933eeb3-38f1-45ab-a719-1abbd34b8430",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1488,
        512
      ],
      "id": "fcee30c8-64f8-45e6-b640-74396aee62a2",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3d3a0c8b-59f7-4c35-aa97-b04184a65374",
              "name": "mensaje",
              "value": "={{ $json.mensaje }} Verifica aqui en la lista de PRODUCTOS: \nhttps://docs.google.com/spreadsheets/d/1vkj-0XG2xG8AixToCz2oy_e6dbo8a7Nf500tXRg7W2A/edit?usp=sharing",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1360,
        304
      ],
      "id": "1466c9e8-a3fe-4f4d-ac9b-545deb8dba4b",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Edit Fields3').first().json.instancia }}",
        "remoteJid": "={{ $('Edit Fields3').first().json.sessionid }}",
        "messageText": "={{ $json.mensaje }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -1120,
        304
      ],
      "id": "61d1a710-7b56-42ae-b3ff-96396cdf8fea",
      "name": "Enviar texto",
      "credentials": {
        "evolutionApi": {
          "id": "B3iSOloEJUHghytc",
          "name": "Evolution account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Procesar_compra",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar_compra": {
      "main": [
        [
          {
            "node": "obetener_inventario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcular_Stock": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          },
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Enviar texto3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obetener_inventario": {
      "main": [
        [
          {
            "node": "Calcular_Stock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        []
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Enviar texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4b89cd23-2542-45d3-acaa-b0944536dbf0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "07f67ec32baaad4ae3d75f4e22d6ad4d1aa561c2ad8388f49ad7031ee0fe8de1"
  },
  "id": "HbXMEziTLEdBjon5",
  "tags": []
}